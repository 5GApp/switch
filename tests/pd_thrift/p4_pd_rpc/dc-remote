#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from p4_pd_rpc import dc
from p4_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  EntryHandle_t spanning_tree_table_add_with_set_stp_state(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_spanning_tree_match_spec_t match_spec, dc_set_stp_state_action_spec_t action_spec)')
  print('  EntryHandle_t int_bos_table_add_with_int_set_header_0_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_bos_table_add_with_int_set_header_6_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_bos_table_add_with_int_set_header_3_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_bos_table_add_with_int_set_header_4_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_bos_table_add_with_int_set_header_1_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_bos_table_add_with_int_set_header_7_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_bos_table_add_with_int_set_header_2_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_bos_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_bos_table_add_with_int_set_header_5_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_bos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t tunnel_dst_rewrite_table_add_with_rewrite_tunnel_ipv6_dst(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_dst_rewrite_match_spec_t match_spec, dc_rewrite_tunnel_ipv6_dst_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_dst_rewrite_table_add_with_rewrite_tunnel_ipv4_dst(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_dst_rewrite_match_spec_t match_spec, dc_rewrite_tunnel_ipv4_dst_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_dst_rewrite_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_dst_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_qinq_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_untagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_malformed_outer_ethernet_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority, dc_malformed_outer_ethernet_packet_action_spec_t action_spec)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_qinq_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_untagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_single_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_untagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_qinq_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_single_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_single_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ethernet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t qos_table_add_with_apply_tc_marking(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_qos_match_spec_t match_spec, i32 priority, dc_apply_tc_marking_action_spec_t action_spec)')
  print('  EntryHandle_t qos_table_add_with_apply_cos_marking(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_qos_match_spec_t match_spec, i32 priority, dc_apply_cos_marking_action_spec_t action_spec)')
  print('  EntryHandle_t qos_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_qos_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t qos_table_add_with_apply_dscp_marking(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_qos_match_spec_t match_spec, i32 priority, dc_apply_dscp_marking_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_fib_lpm_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_fib_lpm_match_spec_t match_spec)')
  print('  EntryHandle_t ipv6_fib_lpm_table_add_with_fib_hit_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_fib_lpm_match_spec_t match_spec, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_fib_lpm_table_add_with_fib_hit_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_fib_lpm_match_spec_t match_spec, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t egress_acl_table_add_with_egress_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_acl_match_spec_t match_spec, i32 priority, dc_egress_mirror_action_spec_t action_spec)')
  print('  EntryHandle_t egress_acl_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t egress_acl_table_add_with_egress_redirect_to_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_acl_match_spec_t match_spec, i32 priority, dc_egress_redirect_to_cpu_action_spec_t action_spec)')
  print('  EntryHandle_t egress_acl_table_add_with_egress_mirror_drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_acl_match_spec_t match_spec, i32 priority, dc_egress_mirror_drop_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_table_add_with_set_mpls_swap_push_rewrite_l3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec, dc_set_mpls_swap_push_rewrite_l3_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_table_add_with_set_mpls_swap_push_rewrite_l2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec, dc_set_mpls_swap_push_rewrite_l2_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_table_add_with_set_mpls_push_rewrite_l2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec, dc_set_mpls_push_rewrite_l2_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_table_add_with_set_mpls_push_rewrite_l3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec, dc_set_mpls_push_rewrite_l3_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_table_add_with_set_l3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec, dc_set_l3_rewrite_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_table_add_with_set_l2_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t rewrite_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t rewrite_table_add_with_set_l2_rewrite_with_tunnel(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec, dc_set_l2_rewrite_with_tunnel_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_table_add_with_set_l3_rewrite_with_tunnel(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_match_spec_t match_spec, dc_set_l3_rewrite_with_tunnel_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_table_add_with_acl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_acl_match_spec_t match_spec, i32 priority, dc_acl_log_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_table_add_with_acl_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_acl_match_spec_t match_spec, i32 priority, dc_acl_mirror_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_table_add_with_acl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_acl_match_spec_t match_spec, i32 priority, dc_acl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_table_add_with_acl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_acl_match_spec_t match_spec, i32 priority, dc_acl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_table_add_with_acl_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_acl_match_spec_t match_spec, i32 priority, dc_acl_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_table_add_with_acl_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_acl_match_spec_t match_spec, i32 priority, dc_acl_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t fwd_result_table_add_with_set_fib_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fwd_result_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t fwd_result_table_add_with_set_racl_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fwd_result_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t fwd_result_table_add_with_set_cpu_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fwd_result_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t fwd_result_table_add_with_set_l2_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fwd_result_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t fwd_result_table_add_with_set_acl_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fwd_result_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t fwd_result_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fwd_result_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t learn_notify_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_learn_notify_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t learn_notify_table_add_with_generate_learn_notify(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_learn_notify_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t mac_acl_table_add_with_acl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_acl_match_spec_t match_spec, i32 priority, dc_acl_log_action_spec_t action_spec)')
  print('  EntryHandle_t mac_acl_table_add_with_acl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_acl_match_spec_t match_spec, i32 priority, dc_acl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t mac_acl_table_add_with_acl_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_acl_match_spec_t match_spec, i32 priority, dc_acl_mirror_action_spec_t action_spec)')
  print('  EntryHandle_t mac_acl_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t mac_acl_table_add_with_acl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_acl_match_spec_t match_spec, i32 priority, dc_acl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t smac_table_add_with_smac_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_smac_match_spec_t match_spec, dc_smac_hit_action_spec_t action_spec)')
  print('  EntryHandle_t smac_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_smac_match_spec_t match_spec)')
  print('  EntryHandle_t smac_table_add_with_smac_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_smac_match_spec_t match_spec)')
  print('  EntryHandle_t int_outer_encap_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_outer_encap_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_outer_encap_table_add_with_int_update_vxlan_gpe_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_outer_encap_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t ipv6_src_vtep_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_src_vtep_match_spec_t match_spec)')
  print('  EntryHandle_t ipv6_src_vtep_table_add_with_src_vtep_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_src_vtep_match_spec_t match_spec, dc_src_vtep_hit_action_spec_t action_spec)')
  print('  EntryHandle_t egress_filter_table_add_with_set_egress_filter_drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t vlan_decap_table_add_with_remove_vlan_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_vlan_decap_match_spec_t match_spec)')
  print('  EntryHandle_t vlan_decap_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_vlan_decap_match_spec_t match_spec)')
  print('  EntryHandle_t vlan_decap_table_add_with_remove_vlan_single_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_vlan_decap_match_spec_t match_spec)')
  print('  EntryHandle_t rid_table_add_with_outer_replica_from_rid_with_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rid_match_spec_t match_spec, dc_outer_replica_from_rid_with_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t rid_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rid_match_spec_t match_spec)')
  print('  EntryHandle_t rid_table_add_with_outer_replica_from_rid(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rid_match_spec_t match_spec, dc_outer_replica_from_rid_action_spec_t action_spec)')
  print('  EntryHandle_t rid_table_add_with_inner_replica_from_rid(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rid_match_spec_t match_spec, dc_inner_replica_from_rid_action_spec_t action_spec)')
  print('  EntryHandle_t rid_table_add_with_inner_replica_from_rid_with_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rid_match_spec_t match_spec, dc_inner_replica_from_rid_with_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_fib_lpm_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_fib_lpm_match_spec_t match_spec)')
  print('  EntryHandle_t ipv4_fib_lpm_table_add_with_fib_hit_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_fib_lpm_match_spec_t match_spec, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_fib_lpm_table_add_with_fib_hit_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_fib_lpm_match_spec_t match_spec, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t egress_port_mapping_table_add_with_egress_port_type_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_port_mapping_match_spec_t match_spec)')
  print('  EntryHandle_t egress_port_mapping_table_add_with_egress_port_type_normal(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_port_mapping_match_spec_t match_spec)')
  print('  EntryHandle_t egress_port_mapping_table_add_with_egress_port_type_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_port_mapping_match_spec_t match_spec)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_table_add_with_terminate_fabric_multicast_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_ingress_dst_lkp_match_spec_t match_spec)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_table_add_with_switch_fabric_multicast_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_ingress_dst_lkp_match_spec_t match_spec)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_table_add_with_terminate_fabric_unicast_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_ingress_dst_lkp_match_spec_t match_spec)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_table_add_with_switch_fabric_unicast_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_ingress_dst_lkp_match_spec_t match_spec)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_ingress_dst_lkp_match_spec_t match_spec)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_table_add_with_terminate_cpu_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_ingress_dst_lkp_match_spec_t match_spec)')
  print('  EntryHandle_t compute_other_hashes_table_add_with_computed_one_hash(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_compute_other_hashes_match_spec_t match_spec)')
  print('  EntryHandle_t compute_other_hashes_table_add_with_computed_two_hashes(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_compute_other_hashes_match_spec_t match_spec)')
  print('  EntryHandle_t egress_bd_map_table_add_with_set_egress_bd_properties(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_bd_map_match_spec_t match_spec)')
  print('  EntryHandle_t egress_bd_map_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_bd_map_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_src_rewrite_table_add_with_rewrite_tunnel_ipv4_src(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_src_rewrite_match_spec_t match_spec, dc_rewrite_tunnel_ipv4_src_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_src_rewrite_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_src_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_src_rewrite_table_add_with_rewrite_tunnel_ipv6_src(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_src_rewrite_match_spec_t match_spec, dc_rewrite_tunnel_ipv6_src_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_fib_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_fib_match_spec_t match_spec)')
  print('  EntryHandle_t ipv4_fib_table_add_with_fib_hit_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_fib_match_spec_t match_spec, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_fib_table_add_with_fib_hit_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_fib_match_spec_t match_spec, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ingress_port_mapping_table_add_with_set_ifindex(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ingress_port_mapping_match_spec_t match_spec, dc_set_ifindex_action_spec_t action_spec)')
  print('  EntryHandle_t compute_non_ip_hashes_table_add_with_compute_lkp_non_ip_hash(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_compute_non_ip_hashes_match_spec_t match_spec)')
  print('  EntryHandle_t ipv4_src_vtep_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_src_vtep_match_spec_t match_spec)')
  print('  EntryHandle_t ipv4_src_vtep_table_add_with_src_vtep_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_src_vtep_match_spec_t match_spec, dc_src_vtep_hit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_dest_vtep_table_add_with_set_tunnel_termination_flag(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_dest_vtep_match_spec_t match_spec)')
  print('  EntryHandle_t ipv6_dest_vtep_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_dest_vtep_match_spec_t match_spec)')
  print('  EntryHandle_t ingress_bd_stats_table_add_with_update_ingress_bd_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_vlan_xlate_table_add_with_set_egress_packet_vlan_untagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_vlan_xlate_match_spec_t match_spec)')
  print('  EntryHandle_t egress_vlan_xlate_table_add_with_set_egress_packet_vlan_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_vlan_xlate_match_spec_t match_spec, dc_set_egress_packet_vlan_tagged_action_spec_t action_spec)')
  print('  EntryHandle_t egress_vlan_xlate_table_add_with_set_egress_packet_vlan_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_vlan_xlate_match_spec_t match_spec, dc_set_egress_packet_vlan_double_tagged_action_spec_t action_spec)')
  print('  EntryHandle_t validate_mpls_packet_table_add_with_set_valid_mpls_label2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_mpls_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_mpls_packet_table_add_with_set_valid_mpls_label3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_mpls_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_mpls_packet_table_add_with_set_valid_mpls_label1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_mpls_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t ipv6_fib_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_fib_match_spec_t match_spec)')
  print('  EntryHandle_t ipv6_fib_table_add_with_fib_hit_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_fib_match_spec_t match_spec, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_fib_table_add_with_fib_hit_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_fib_match_spec_t match_spec, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t validate_outer_ipv6_packet_table_add_with_set_malformed_outer_ipv6_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ipv6_packet_match_spec_t match_spec, i32 priority, dc_set_malformed_outer_ipv6_packet_action_spec_t action_spec)')
  print('  EntryHandle_t validate_outer_ipv6_packet_table_add_with_set_valid_outer_ipv6_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ipv6_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv6_ipv4_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv4_genv_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv4_gre_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv6_vxlan_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_mpls_ip_push1_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_mpls_ethernet_push3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv6_gre_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_mpls_ethernet_push1_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv4_ipv4_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv4_nvgre_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv6_erspan_t3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_mpls_ethernet_push2_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv6_nvgre_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_mpls_ip_push3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv4_ipv6_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv6_ipv6_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv4_vxlan_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv6_genv_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_ipv4_erspan_t3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_fabric_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec, dc_fabric_rewrite_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_table_add_with_mpls_ip_push2_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t storm_control_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_storm_control_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t storm_control_table_add_with_set_storm_control_meter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_storm_control_match_spec_t match_spec, i32 priority, dc_set_storm_control_meter_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_decap_process_inner_table_add_with_decap_inner_udp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_inner_table_add_with_decap_inner_icmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_inner_table_add_with_decap_inner_unknown(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_inner_table_add_with_decap_inner_tcp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t drop_stats_table_add_with_drop_stats_update(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_urpf_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_urpf_match_spec_t match_spec)')
  print('  EntryHandle_t ipv6_urpf_table_add_with_ipv6_urpf_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_urpf_match_spec_t match_spec, dc_ipv6_urpf_hit_action_spec_t action_spec)')
  print('  EntryHandle_t dmac_table_add_with_dmac_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_match_spec_t match_spec, i32 ttl)')
  print('  EntryHandle_t dmac_table_add_with_dmac_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_match_spec_t match_spec, dc_dmac_redirect_ecmp_action_spec_t action_spec, i32 ttl)')
  print('  EntryHandle_t dmac_table_add_with_dmac_drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_match_spec_t match_spec, i32 ttl)')
  print('  EntryHandle_t dmac_table_add_with_dmac_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_match_spec_t match_spec, dc_dmac_redirect_nexthop_action_spec_t action_spec, i32 ttl)')
  print('  EntryHandle_t dmac_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_match_spec_t match_spec, i32 ttl)')
  print('  EntryHandle_t dmac_table_add_with_dmac_multicast_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_match_spec_t match_spec, dc_dmac_multicast_hit_action_spec_t action_spec, i32 ttl)')
  print('  EntryHandle_t dmac_table_add_with_dmac_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_match_spec_t match_spec, dc_dmac_hit_action_spec_t action_spec, i32 ttl)')
  print('  EntryHandle_t urpf_bd_table_add_with_urpf_bd_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_urpf_bd_match_spec_t match_spec)')
  print('  EntryHandle_t urpf_bd_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_urpf_bd_match_spec_t match_spec)')
  print('  EntryHandle_t ipv6_racl_table_add_with_racl_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_racl_match_spec_t match_spec, i32 priority, dc_racl_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_racl_table_add_with_racl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_racl_match_spec_t match_spec, i32 priority, dc_racl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_racl_table_add_with_racl_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_racl_match_spec_t match_spec, i32 priority, dc_racl_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_racl_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_racl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t ipv6_racl_table_add_with_racl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_racl_match_spec_t match_spec, i32 priority, dc_racl_log_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_racl_table_add_with_racl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_racl_match_spec_t match_spec, i32 priority, dc_racl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i12(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i13(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i10(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i11(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i14(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i15(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i8(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i9(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i0(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i5(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0003_table_add_with_int_set_header_0003_i7(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0003_match_spec_t match_spec)')
  print('  EntryHandle_t compute_ipv4_hashes_table_add_with_compute_lkp_ipv4_hash(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_compute_ipv4_hashes_match_spec_t match_spec)')
  print('  EntryHandle_t nexthop_table_add_with_set_nexthop_details(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_nexthop_match_spec_t match_spec, dc_set_nexthop_details_action_spec_t action_spec)')
  print('  EntryHandle_t nexthop_table_add_with_set_nexthop_details_for_post_routed_flood(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_nexthop_match_spec_t match_spec, dc_set_nexthop_details_for_post_routed_flood_action_spec_t action_spec)')
  print('  EntryHandle_t nexthop_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_nexthop_match_spec_t match_spec)')
  print('  EntryHandle_t validate_outer_ipv4_packet_table_add_with_set_malformed_outer_ipv4_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ipv4_packet_match_spec_t match_spec, i32 priority, dc_set_malformed_outer_ipv4_packet_action_spec_t action_spec)')
  print('  EntryHandle_t validate_outer_ipv4_packet_table_add_with_set_valid_outer_ipv4_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_outer_ipv4_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t tunnel_rewrite_table_add_with_fabric_multicast_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_rewrite_match_spec_t match_spec, dc_fabric_multicast_rewrite_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_table_add_with_cpu_rx_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_rewrite_table_add_with_set_tunnel_rewrite_details(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_rewrite_match_spec_t match_spec, dc_set_tunnel_rewrite_details_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_table_add_with_set_mpls_rewrite_push1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_rewrite_match_spec_t match_spec, dc_set_mpls_rewrite_push1_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_table_add_with_set_mpls_rewrite_push3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_rewrite_match_spec_t match_spec, dc_set_mpls_rewrite_push3_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_table_add_with_set_mpls_rewrite_push2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_rewrite_match_spec_t match_spec, dc_set_mpls_rewrite_push2_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_rewrite_table_add_with_fabric_unicast_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_ipv6_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunneled_packet_over_fabric_match_spec_t match_spec)')
  print('  EntryHandle_t tunneled_packet_over_fabric_table_add_with_terminate_inner_ipv4_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunneled_packet_over_fabric_match_spec_t match_spec)')
  print('  EntryHandle_t tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_non_ip_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunneled_packet_over_fabric_match_spec_t match_spec)')
  print('  EntryHandle_t tunneled_packet_over_fabric_table_add_with_terminate_inner_ipv6_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunneled_packet_over_fabric_match_spec_t match_spec)')
  print('  EntryHandle_t tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_ipv4_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunneled_packet_over_fabric_match_spec_t match_spec)')
  print('  EntryHandle_t egress_lag_table_add_with_set_egress_ifindex(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_lag_match_spec_t match_spec, dc_set_egress_ifindex_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_urpf_lpm_table_add_with_ipv6_urpf_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_urpf_lpm_match_spec_t match_spec, dc_ipv6_urpf_hit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_urpf_lpm_table_add_with_urpf_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_urpf_lpm_match_spec_t match_spec)')
  print('  EntryHandle_t validate_packet_table_add_with_set_unicast_and_ipv6_src_is_link_local(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_packet_table_add_with_set_unicast(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_packet_table_add_with_set_malformed_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_packet_match_spec_t match_spec, i32 priority, dc_set_malformed_packet_action_spec_t action_spec)')
  print('  EntryHandle_t validate_packet_table_add_with_set_multicast_and_ipv6_src_is_link_local(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_packet_table_add_with_set_broadcast(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_packet_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t validate_packet_table_add_with_set_multicast(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_validate_packet_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i12(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i13(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i10(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i11(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i14(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i15(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i8(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i9(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i0(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i5(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0407_table_add_with_int_set_header_0407_i7(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0407_match_spec_t match_spec)')
  print('  EntryHandle_t rmac_table_add_with_rmac_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rmac_match_spec_t match_spec)')
  print('  EntryHandle_t rmac_table_add_with_rmac_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rmac_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_ipv4_icmp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_ipv4_unknown_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_non_ip_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_ipv6_tcp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_ipv6_unknown_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_ipv4_tcp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_ipv4_udp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_ipv6_icmp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_encap_process_inner_table_add_with_inner_ipv6_udp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_encap_process_inner_match_spec_t match_spec)')
  print('  EntryHandle_t replica_type_table_add_with_set_replica_copy_bridged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_replica_type_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t replica_type_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_replica_type_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t mac_rewrite_table_add_with_rewrite_ipv6_unicast_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_rewrite_match_spec_t match_spec, dc_rewrite_ipv6_unicast_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_table_add_with_rewrite_ipv4_multicast_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_rewrite_match_spec_t match_spec, dc_rewrite_ipv4_multicast_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_table_add_with_rewrite_mpls_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_rewrite_match_spec_t match_spec, dc_rewrite_mpls_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_table_add_with_rewrite_ipv6_multicast_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_rewrite_match_spec_t match_spec, dc_rewrite_ipv6_multicast_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_table_add_with_rewrite_ipv4_unicast_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_rewrite_match_spec_t match_spec, dc_rewrite_ipv4_unicast_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mac_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t mirror_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mirror_match_spec_t match_spec)')
  print('  EntryHandle_t mirror_table_add_with_set_mirror_nhop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mirror_match_spec_t match_spec, dc_set_mirror_nhop_action_spec_t action_spec)')
  print('  EntryHandle_t mirror_table_add_with_set_mirror_bd(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mirror_match_spec_t match_spec, dc_set_mirror_bd_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_genv_inner_non_ip(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_non_ip(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_non_ip(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_ip_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_ip_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_genv_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_table_add_with_decap_genv_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_decap_process_outer_match_spec_t match_spec)')
  print('  EntryHandle_t system_acl_table_add_with_drop_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_system_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t system_acl_table_add_with_redirect_to_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_system_acl_match_spec_t match_spec, i32 priority, dc_redirect_to_cpu_action_spec_t action_spec)')
  print('  EntryHandle_t system_acl_table_add_with_congestion_mirror_set(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_system_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t system_acl_table_add_with_negative_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_system_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t system_acl_table_add_with_drop_packet_with_reason(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_system_acl_match_spec_t match_spec, i32 priority, dc_drop_packet_with_reason_action_spec_t action_spec)')
  print('  EntryHandle_t system_acl_table_add_with_copy_to_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_system_acl_match_spec_t match_spec, i32 priority, dc_copy_to_cpu_action_spec_t action_spec)')
  print('  EntryHandle_t system_acl_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_system_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t tunnel_dmac_rewrite_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_dmac_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_dmac_rewrite_table_add_with_rewrite_tunnel_dmac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_dmac_rewrite_match_spec_t match_spec, dc_rewrite_tunnel_dmac_action_spec_t action_spec)')
  print('  EntryHandle_t compute_ipv6_hashes_table_add_with_compute_lkp_ipv6_hash(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_compute_ipv6_hashes_match_spec_t match_spec)')
  print('  EntryHandle_t bd_flood_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_bd_flood_match_spec_t match_spec)')
  print('  EntryHandle_t bd_flood_table_add_with_set_bd_flood_mc_index(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_bd_flood_match_spec_t match_spec, dc_set_bd_flood_mc_index_action_spec_t action_spec)')
  print('  EntryHandle_t egress_vni_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_vni_match_spec_t match_spec)')
  print('  EntryHandle_t egress_vni_table_add_with_set_egress_tunnel_vni(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_vni_match_spec_t match_spec, dc_set_egress_tunnel_vni_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_table_add_with_terminate_tunnel_inner_non_ip(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_match_spec_t match_spec, dc_terminate_tunnel_inner_non_ip_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_table_add_with_terminate_tunnel_inner_ethernet_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_match_spec_t match_spec, dc_terminate_tunnel_inner_ethernet_ipv6_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_table_add_with_terminate_tunnel_inner_ethernet_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_match_spec_t match_spec, dc_terminate_tunnel_inner_ethernet_ipv4_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_table_add_with_terminate_tunnel_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_match_spec_t match_spec, dc_terminate_tunnel_inner_ipv4_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_table_add_with_terminate_tunnel_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_match_spec_t match_spec, dc_terminate_tunnel_inner_ipv6_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_match_spec_t match_spec)')
  print('  EntryHandle_t acl_stats_table_add_with_acl_stats_update(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_stats_match_spec_t match_spec)')
  print('  EntryHandle_t ipv4_urpf_lpm_table_add_with_ipv4_urpf_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_urpf_lpm_match_spec_t match_spec, dc_ipv4_urpf_hit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_urpf_lpm_table_add_with_urpf_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_urpf_lpm_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_1215_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_1215_match_spec_t match_spec)')
  print('  EntryHandle_t mpls_table_add_with_forward_mpls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mpls_match_spec_t match_spec, dc_forward_mpls_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_table_add_with_terminate_vpls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mpls_match_spec_t match_spec, dc_terminate_vpls_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_table_add_with_terminate_eompls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mpls_match_spec_t match_spec, dc_terminate_eompls_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_table_add_with_terminate_ipv4_over_mpls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mpls_match_spec_t match_spec, dc_terminate_ipv4_over_mpls_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_table_add_with_terminate_pw(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mpls_match_spec_t match_spec, dc_terminate_pw_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_table_add_with_terminate_ipv6_over_mpls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_mpls_match_spec_t match_spec, dc_terminate_ipv6_over_mpls_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_dest_vtep_table_add_with_set_tunnel_termination_flag(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_dest_vtep_match_spec_t match_spec)')
  print('  EntryHandle_t ipv4_dest_vtep_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_dest_vtep_match_spec_t match_spec)')
  print('  EntryHandle_t fabric_ingress_src_lkp_table_add_with_set_ingress_ifindex_properties(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_ingress_src_lkp_match_spec_t match_spec)')
  print('  EntryHandle_t fabric_ingress_src_lkp_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_ingress_src_lkp_match_spec_t match_spec)')
  print('  EntryHandle_t int_insert_table_add_with_int_transit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_insert_match_spec_t match_spec, i32 priority, dc_int_transit_action_spec_t action_spec)')
  print('  EntryHandle_t int_insert_table_add_with_int_reset(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_insert_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t tunnel_smac_rewrite_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_smac_rewrite_match_spec_t match_spec)')
  print('  EntryHandle_t tunnel_smac_rewrite_table_add_with_rewrite_tunnel_smac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_tunnel_smac_rewrite_match_spec_t match_spec, dc_rewrite_tunnel_smac_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_urpf_table_add_with_ipv4_urpf_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_urpf_match_spec_t match_spec, dc_ipv4_urpf_hit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_urpf_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_urpf_match_spec_t match_spec)')
  print('  EntryHandle_t int_meta_header_update_table_add_with_int_update_total_hop_cnt(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_meta_header_update_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t int_meta_header_update_table_add_with_int_set_e_bit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_meta_header_update_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t ipsg_permit_special_table_add_with_ipsg_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipsg_permit_special_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t ipv4_racl_table_add_with_racl_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_racl_match_spec_t match_spec, i32 priority, dc_racl_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_racl_table_add_with_racl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_racl_match_spec_t match_spec, i32 priority, dc_racl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_racl_table_add_with_racl_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_racl_match_spec_t match_spec, i32 priority, dc_racl_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_racl_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_racl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t ipv4_racl_table_add_with_racl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_racl_match_spec_t match_spec, i32 priority, dc_racl_log_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_racl_table_add_with_racl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_racl_match_spec_t match_spec, i32 priority, dc_racl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_table_add_with_acl_dod_en(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ip_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t ip_acl_table_add_with_acl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ip_acl_match_spec_t match_spec, i32 priority, dc_acl_log_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_table_add_with_acl_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ip_acl_match_spec_t match_spec, i32 priority, dc_acl_mirror_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_table_add_with_acl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ip_acl_match_spec_t match_spec, i32 priority, dc_acl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_table_add_with_acl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ip_acl_match_spec_t match_spec, i32 priority, dc_acl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_table_add_with_acl_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ip_acl_match_spec_t match_spec, i32 priority, dc_acl_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_table_add_with_acl_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ip_acl_match_spec_t match_spec, i32 priority, dc_acl_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ip_acl_match_spec_t match_spec, i32 priority)')
  print('  EntryHandle_t outer_rmac_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_outer_rmac_match_spec_t match_spec)')
  print('  EntryHandle_t outer_rmac_table_add_with_outer_rmac_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_outer_rmac_match_spec_t match_spec)')
  print('  EntryHandle_t int_inst_0811_table_add_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_inst_0811_match_spec_t match_spec)')
  print('  EntryHandle_t ipsg_table_add_with_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipsg_match_spec_t match_spec)')
  print('  i32 spanning_tree_table_modify_with_set_stp_state(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_stp_state_action_spec_t action_spec)')
  print('  i32 int_bos_table_modify_with_int_set_header_0_bos(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_modify_with_int_set_header_6_bos(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_modify_with_int_set_header_3_bos(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_modify_with_int_set_header_4_bos(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_modify_with_int_set_header_1_bos(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_modify_with_int_set_header_7_bos(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_modify_with_int_set_header_2_bos(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_modify_with_int_set_header_5_bos(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_dst_rewrite_table_modify_with_rewrite_tunnel_ipv6_dst(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_tunnel_ipv6_dst_action_spec_t action_spec)')
  print('  i32 tunnel_dst_rewrite_table_modify_with_rewrite_tunnel_ipv4_dst(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_tunnel_ipv4_dst_action_spec_t action_spec)')
  print('  i32 tunnel_dst_rewrite_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_double_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_qinq_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_untagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_malformed_outer_ethernet_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_malformed_outer_ethernet_packet_action_spec_t action_spec)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_qinq_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_untagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_double_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_single_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_untagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_qinq_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_single_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_single_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_double_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 qos_table_modify_with_apply_tc_marking(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_apply_tc_marking_action_spec_t action_spec)')
  print('  i32 qos_table_modify_with_apply_cos_marking(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_apply_cos_marking_action_spec_t action_spec)')
  print('  i32 qos_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 qos_table_modify_with_apply_dscp_marking(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_apply_dscp_marking_action_spec_t action_spec)')
  print('  i32 ipv6_fib_lpm_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_fib_lpm_table_modify_with_fib_hit_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  i32 ipv6_fib_lpm_table_modify_with_fib_hit_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  i32 egress_acl_table_modify_with_egress_mirror(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_egress_mirror_action_spec_t action_spec)')
  print('  i32 egress_acl_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_acl_table_modify_with_egress_redirect_to_cpu(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_egress_redirect_to_cpu_action_spec_t action_spec)')
  print('  i32 egress_acl_table_modify_with_egress_mirror_drop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_egress_mirror_drop_action_spec_t action_spec)')
  print('  i32 rewrite_table_modify_with_set_mpls_swap_push_rewrite_l3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mpls_swap_push_rewrite_l3_action_spec_t action_spec)')
  print('  i32 rewrite_table_modify_with_set_mpls_swap_push_rewrite_l2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mpls_swap_push_rewrite_l2_action_spec_t action_spec)')
  print('  i32 rewrite_table_modify_with_set_mpls_push_rewrite_l2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mpls_push_rewrite_l2_action_spec_t action_spec)')
  print('  i32 rewrite_table_modify_with_set_mpls_push_rewrite_l3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mpls_push_rewrite_l3_action_spec_t action_spec)')
  print('  i32 rewrite_table_modify_with_set_l3_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_l3_rewrite_action_spec_t action_spec)')
  print('  i32 rewrite_table_modify_with_set_l2_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rewrite_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rewrite_table_modify_with_set_l2_rewrite_with_tunnel(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_l2_rewrite_with_tunnel_action_spec_t action_spec)')
  print('  i32 rewrite_table_modify_with_set_l3_rewrite_with_tunnel(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_l3_rewrite_with_tunnel_action_spec_t action_spec)')
  print('  i32 ipv6_acl_table_modify_with_acl_log(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_log_action_spec_t action_spec)')
  print('  i32 ipv6_acl_table_modify_with_acl_mirror(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_mirror_action_spec_t action_spec)')
  print('  i32 ipv6_acl_table_modify_with_acl_deny(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_deny_action_spec_t action_spec)')
  print('  i32 ipv6_acl_table_modify_with_acl_permit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_permit_action_spec_t action_spec)')
  print('  i32 ipv6_acl_table_modify_with_acl_redirect_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_redirect_nexthop_action_spec_t action_spec)')
  print('  i32 ipv6_acl_table_modify_with_acl_redirect_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_redirect_ecmp_action_spec_t action_spec)')
  print('  i32 ipv6_acl_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fwd_result_table_modify_with_set_fib_redirect_action(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fwd_result_table_modify_with_set_racl_redirect_action(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fwd_result_table_modify_with_set_cpu_redirect_action(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fwd_result_table_modify_with_set_l2_redirect_action(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fwd_result_table_modify_with_set_acl_redirect_action(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fwd_result_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 learn_notify_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 learn_notify_table_modify_with_generate_learn_notify(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mac_acl_table_modify_with_acl_log(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_log_action_spec_t action_spec)')
  print('  i32 mac_acl_table_modify_with_acl_deny(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_deny_action_spec_t action_spec)')
  print('  i32 mac_acl_table_modify_with_acl_mirror(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_mirror_action_spec_t action_spec)')
  print('  i32 mac_acl_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mac_acl_table_modify_with_acl_permit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_permit_action_spec_t action_spec)')
  print('  i32 smac_table_modify_with_smac_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_smac_hit_action_spec_t action_spec)')
  print('  i32 smac_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 smac_table_modify_with_smac_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_outer_encap_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_outer_encap_table_modify_with_int_update_vxlan_gpe_ipv4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_src_vtep_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_src_vtep_table_modify_with_src_vtep_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_src_vtep_hit_action_spec_t action_spec)')
  print('  i32 egress_filter_table_modify_with_set_egress_filter_drop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 vlan_decap_table_modify_with_remove_vlan_double_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 vlan_decap_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 vlan_decap_table_modify_with_remove_vlan_single_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rid_table_modify_with_outer_replica_from_rid_with_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_outer_replica_from_rid_with_nexthop_action_spec_t action_spec)')
  print('  i32 rid_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rid_table_modify_with_outer_replica_from_rid(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_outer_replica_from_rid_action_spec_t action_spec)')
  print('  i32 rid_table_modify_with_inner_replica_from_rid(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_inner_replica_from_rid_action_spec_t action_spec)')
  print('  i32 rid_table_modify_with_inner_replica_from_rid_with_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_inner_replica_from_rid_with_nexthop_action_spec_t action_spec)')
  print('  i32 ipv4_fib_lpm_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_fib_lpm_table_modify_with_fib_hit_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  i32 ipv4_fib_lpm_table_modify_with_fib_hit_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  i32 egress_port_mapping_table_modify_with_egress_port_type_cpu(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_port_mapping_table_modify_with_egress_port_type_normal(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_port_mapping_table_modify_with_egress_port_type_fabric(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_dst_lkp_table_modify_with_terminate_fabric_multicast_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_dst_lkp_table_modify_with_switch_fabric_multicast_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_dst_lkp_table_modify_with_terminate_fabric_unicast_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_dst_lkp_table_modify_with_switch_fabric_unicast_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_dst_lkp_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_dst_lkp_table_modify_with_terminate_cpu_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 compute_other_hashes_table_modify_with_computed_one_hash(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 compute_other_hashes_table_modify_with_computed_two_hashes(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_bd_map_table_modify_with_set_egress_bd_properties(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_bd_map_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_src_rewrite_table_modify_with_rewrite_tunnel_ipv4_src(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_tunnel_ipv4_src_action_spec_t action_spec)')
  print('  i32 tunnel_src_rewrite_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_src_rewrite_table_modify_with_rewrite_tunnel_ipv6_src(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_tunnel_ipv6_src_action_spec_t action_spec)')
  print('  i32 ipv4_fib_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_fib_table_modify_with_fib_hit_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  i32 ipv4_fib_table_modify_with_fib_hit_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  i32 ingress_port_mapping_table_modify_with_set_ifindex(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_ifindex_action_spec_t action_spec)')
  print('  i32 compute_non_ip_hashes_table_modify_with_compute_lkp_non_ip_hash(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_src_vtep_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_src_vtep_table_modify_with_src_vtep_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_src_vtep_hit_action_spec_t action_spec)')
  print('  i32 ipv6_dest_vtep_table_modify_with_set_tunnel_termination_flag(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_dest_vtep_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ingress_bd_stats_table_modify_with_update_ingress_bd_stats(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_untagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_egress_packet_vlan_tagged_action_spec_t action_spec)')
  print('  i32 egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_double_tagged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_egress_packet_vlan_double_tagged_action_spec_t action_spec)')
  print('  i32 validate_mpls_packet_table_modify_with_set_valid_mpls_label2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_mpls_packet_table_modify_with_set_valid_mpls_label3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_mpls_packet_table_modify_with_set_valid_mpls_label1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_fib_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_fib_table_modify_with_fib_hit_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  i32 ipv6_fib_table_modify_with_fib_hit_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  i32 validate_outer_ipv6_packet_table_modify_with_set_malformed_outer_ipv6_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_malformed_outer_ipv6_packet_action_spec_t action_spec)')
  print('  i32 validate_outer_ipv6_packet_table_modify_with_set_valid_outer_ipv6_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv6_ipv4_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv4_genv_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv4_gre_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv6_vxlan_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_mpls_ip_push1_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push3_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv6_gre_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push1_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv4_ipv4_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv4_nvgre_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv6_erspan_t3_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push2_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv6_nvgre_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_mpls_ip_push3_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv4_ipv6_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv6_ipv6_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv4_vxlan_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv6_genv_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_ipv4_erspan_t3_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_fabric_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fabric_rewrite_action_spec_t action_spec)')
  print('  i32 tunnel_encap_process_outer_table_modify_with_mpls_ip_push2_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 storm_control_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 storm_control_table_modify_with_set_storm_control_meter(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_storm_control_meter_action_spec_t action_spec)')
  print('  i32 tunnel_decap_process_inner_table_modify_with_decap_inner_udp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_inner_table_modify_with_decap_inner_icmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_inner_table_modify_with_decap_inner_unknown(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_inner_table_modify_with_decap_inner_tcp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 drop_stats_table_modify_with_drop_stats_update(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_urpf_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_urpf_table_modify_with_ipv6_urpf_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_ipv6_urpf_hit_action_spec_t action_spec)')
  print('  i32 dmac_table_modify_with_dmac_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 dmac_table_modify_with_dmac_redirect_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_dmac_redirect_ecmp_action_spec_t action_spec)')
  print('  i32 dmac_table_modify_with_dmac_drop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 dmac_table_modify_with_dmac_redirect_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_dmac_redirect_nexthop_action_spec_t action_spec)')
  print('  i32 dmac_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 dmac_table_modify_with_dmac_multicast_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_dmac_multicast_hit_action_spec_t action_spec)')
  print('  i32 dmac_table_modify_with_dmac_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_dmac_hit_action_spec_t action_spec)')
  print('  i32 urpf_bd_table_modify_with_urpf_bd_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 urpf_bd_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_racl_table_modify_with_racl_redirect_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_redirect_nexthop_action_spec_t action_spec)')
  print('  i32 ipv6_racl_table_modify_with_racl_deny(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_deny_action_spec_t action_spec)')
  print('  i32 ipv6_racl_table_modify_with_racl_redirect_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_redirect_ecmp_action_spec_t action_spec)')
  print('  i32 ipv6_racl_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_racl_table_modify_with_racl_log(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_log_action_spec_t action_spec)')
  print('  i32 ipv6_racl_table_modify_with_racl_permit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_permit_action_spec_t action_spec)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i12(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i13(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i10(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i11(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i14(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i15(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i8(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i9(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i0(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i5(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i6(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_modify_with_int_set_header_0003_i7(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 compute_ipv4_hashes_table_modify_with_compute_lkp_ipv4_hash(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 nexthop_table_modify_with_set_nexthop_details(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_nexthop_details_action_spec_t action_spec)')
  print('  i32 nexthop_table_modify_with_set_nexthop_details_for_post_routed_flood(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_nexthop_details_for_post_routed_flood_action_spec_t action_spec)')
  print('  i32 nexthop_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ipv4_packet_table_modify_with_set_malformed_outer_ipv4_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_malformed_outer_ipv4_packet_action_spec_t action_spec)')
  print('  i32 validate_outer_ipv4_packet_table_modify_with_set_valid_outer_ipv4_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_rewrite_table_modify_with_fabric_multicast_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_fabric_multicast_rewrite_action_spec_t action_spec)')
  print('  i32 tunnel_rewrite_table_modify_with_cpu_rx_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_rewrite_table_modify_with_set_tunnel_rewrite_details(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_tunnel_rewrite_details_action_spec_t action_spec)')
  print('  i32 tunnel_rewrite_table_modify_with_set_mpls_rewrite_push1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mpls_rewrite_push1_action_spec_t action_spec)')
  print('  i32 tunnel_rewrite_table_modify_with_set_mpls_rewrite_push3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mpls_rewrite_push3_action_spec_t action_spec)')
  print('  i32 tunnel_rewrite_table_modify_with_set_mpls_rewrite_push2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mpls_rewrite_push2_action_spec_t action_spec)')
  print('  i32 tunnel_rewrite_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_rewrite_table_modify_with_fabric_unicast_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_ipv6_over_fabric(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunneled_packet_over_fabric_table_modify_with_terminate_inner_ipv4_over_fabric(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_non_ip_over_fabric(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunneled_packet_over_fabric_table_modify_with_terminate_inner_ipv6_over_fabric(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_ipv4_over_fabric(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_lag_table_modify_with_set_egress_ifindex(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_egress_ifindex_action_spec_t action_spec)')
  print('  i32 ipv6_urpf_lpm_table_modify_with_ipv6_urpf_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_ipv6_urpf_hit_action_spec_t action_spec)')
  print('  i32 ipv6_urpf_lpm_table_modify_with_urpf_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_packet_table_modify_with_set_unicast_and_ipv6_src_is_link_local(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_packet_table_modify_with_set_unicast(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_packet_table_modify_with_set_malformed_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_malformed_packet_action_spec_t action_spec)')
  print('  i32 validate_packet_table_modify_with_set_multicast_and_ipv6_src_is_link_local(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_packet_table_modify_with_set_broadcast(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_packet_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_packet_table_modify_with_set_multicast(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i12(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i13(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i10(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i11(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i14(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i15(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i8(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i9(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i0(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i5(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i6(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_modify_with_int_set_header_0407_i7(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rmac_table_modify_with_rmac_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rmac_table_modify_with_rmac_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_ipv4_icmp_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_ipv4_unknown_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_non_ip_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_ipv6_tcp_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_ipv6_unknown_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_ipv4_tcp_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_ipv4_udp_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_ipv6_icmp_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_modify_with_inner_ipv6_udp_rewrite(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 replica_type_table_modify_with_set_replica_copy_bridged(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 replica_type_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mac_rewrite_table_modify_with_rewrite_ipv6_unicast_mac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_ipv6_unicast_mac_action_spec_t action_spec)')
  print('  i32 mac_rewrite_table_modify_with_rewrite_ipv4_multicast_mac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_ipv4_multicast_mac_action_spec_t action_spec)')
  print('  i32 mac_rewrite_table_modify_with_rewrite_mpls_mac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_mpls_mac_action_spec_t action_spec)')
  print('  i32 mac_rewrite_table_modify_with_rewrite_ipv6_multicast_mac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_ipv6_multicast_mac_action_spec_t action_spec)')
  print('  i32 mac_rewrite_table_modify_with_rewrite_ipv4_unicast_mac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_ipv4_unicast_mac_action_spec_t action_spec)')
  print('  i32 mac_rewrite_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mirror_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mirror_table_modify_with_set_mirror_nhop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mirror_nhop_action_spec_t action_spec)')
  print('  i32 mirror_table_modify_with_set_mirror_bd(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_mirror_bd_action_spec_t action_spec)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_ipv4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_ipv6(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_genv_inner_non_ip(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_ipv4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_ipv6(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_non_ip(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_non_ip(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_ip_inner_ipv4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop3(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop2(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop1(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_ip_inner_ipv6(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_genv_inner_ipv6(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_modify_with_decap_genv_inner_ipv4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 system_acl_table_modify_with_drop_packet(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 system_acl_table_modify_with_redirect_to_cpu(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_redirect_to_cpu_action_spec_t action_spec)')
  print('  i32 system_acl_table_modify_with_congestion_mirror_set(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 system_acl_table_modify_with_negative_mirror(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 system_acl_table_modify_with_drop_packet_with_reason(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_drop_packet_with_reason_action_spec_t action_spec)')
  print('  i32 system_acl_table_modify_with_copy_to_cpu(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_copy_to_cpu_action_spec_t action_spec)')
  print('  i32 system_acl_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_dmac_rewrite_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_dmac_rewrite_table_modify_with_rewrite_tunnel_dmac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_tunnel_dmac_action_spec_t action_spec)')
  print('  i32 compute_ipv6_hashes_table_modify_with_compute_lkp_ipv6_hash(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 bd_flood_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 bd_flood_table_modify_with_set_bd_flood_mc_index(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_bd_flood_mc_index_action_spec_t action_spec)')
  print('  i32 egress_vni_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_vni_table_modify_with_set_egress_tunnel_vni(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_set_egress_tunnel_vni_action_spec_t action_spec)')
  print('  i32 tunnel_table_modify_with_terminate_tunnel_inner_non_ip(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_tunnel_inner_non_ip_action_spec_t action_spec)')
  print('  i32 tunnel_table_modify_with_terminate_tunnel_inner_ethernet_ipv6(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_tunnel_inner_ethernet_ipv6_action_spec_t action_spec)')
  print('  i32 tunnel_table_modify_with_terminate_tunnel_inner_ethernet_ipv4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_tunnel_inner_ethernet_ipv4_action_spec_t action_spec)')
  print('  i32 tunnel_table_modify_with_terminate_tunnel_inner_ipv4(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_tunnel_inner_ipv4_action_spec_t action_spec)')
  print('  i32 tunnel_table_modify_with_terminate_tunnel_inner_ipv6(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_tunnel_inner_ipv6_action_spec_t action_spec)')
  print('  i32 tunnel_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 acl_stats_table_modify_with_acl_stats_update(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_urpf_lpm_table_modify_with_ipv4_urpf_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_ipv4_urpf_hit_action_spec_t action_spec)')
  print('  i32 ipv4_urpf_lpm_table_modify_with_urpf_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_1215_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mpls_table_modify_with_forward_mpls(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_forward_mpls_action_spec_t action_spec)')
  print('  i32 mpls_table_modify_with_terminate_vpls(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_vpls_action_spec_t action_spec)')
  print('  i32 mpls_table_modify_with_terminate_eompls(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_eompls_action_spec_t action_spec)')
  print('  i32 mpls_table_modify_with_terminate_ipv4_over_mpls(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_ipv4_over_mpls_action_spec_t action_spec)')
  print('  i32 mpls_table_modify_with_terminate_pw(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_pw_action_spec_t action_spec)')
  print('  i32 mpls_table_modify_with_terminate_ipv6_over_mpls(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_terminate_ipv6_over_mpls_action_spec_t action_spec)')
  print('  i32 ipv4_dest_vtep_table_modify_with_set_tunnel_termination_flag(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_dest_vtep_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_src_lkp_table_modify_with_set_ingress_ifindex_properties(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_src_lkp_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_insert_table_modify_with_int_transit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_int_transit_action_spec_t action_spec)')
  print('  i32 int_insert_table_modify_with_int_reset(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_smac_rewrite_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_smac_rewrite_table_modify_with_rewrite_tunnel_smac(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_rewrite_tunnel_smac_action_spec_t action_spec)')
  print('  i32 ipv4_urpf_table_modify_with_ipv4_urpf_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_ipv4_urpf_hit_action_spec_t action_spec)')
  print('  i32 ipv4_urpf_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_meta_header_update_table_modify_with_int_update_total_hop_cnt(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_meta_header_update_table_modify_with_int_set_e_bit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipsg_permit_special_table_modify_with_ipsg_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_racl_table_modify_with_racl_redirect_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_redirect_nexthop_action_spec_t action_spec)')
  print('  i32 ipv4_racl_table_modify_with_racl_deny(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_deny_action_spec_t action_spec)')
  print('  i32 ipv4_racl_table_modify_with_racl_redirect_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_redirect_ecmp_action_spec_t action_spec)')
  print('  i32 ipv4_racl_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_racl_table_modify_with_racl_log(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_log_action_spec_t action_spec)')
  print('  i32 ipv4_racl_table_modify_with_racl_permit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_racl_permit_action_spec_t action_spec)')
  print('  i32 ip_acl_table_modify_with_acl_dod_en(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ip_acl_table_modify_with_acl_log(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_log_action_spec_t action_spec)')
  print('  i32 ip_acl_table_modify_with_acl_mirror(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_mirror_action_spec_t action_spec)')
  print('  i32 ip_acl_table_modify_with_acl_deny(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_deny_action_spec_t action_spec)')
  print('  i32 ip_acl_table_modify_with_acl_permit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_permit_action_spec_t action_spec)')
  print('  i32 ip_acl_table_modify_with_acl_redirect_nexthop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_redirect_nexthop_action_spec_t action_spec)')
  print('  i32 ip_acl_table_modify_with_acl_redirect_ecmp(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry, dc_acl_redirect_ecmp_action_spec_t action_spec)')
  print('  i32 ip_acl_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 outer_rmac_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 outer_rmac_table_modify_with_outer_rmac_hit(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0811_table_modify_with_nop(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipsg_table_modify_with_on_miss(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 spanning_tree_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_bos_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_dst_rewrite_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ethernet_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 qos_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_fib_lpm_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_acl_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rewrite_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_acl_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fwd_result_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 lag_group_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 learn_notify_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mac_acl_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 smac_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_outer_encap_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_src_vtep_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_filter_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 vlan_decap_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rid_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_fib_lpm_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_port_mapping_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ecmp_group_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_dst_lkp_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 compute_other_hashes_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_bd_map_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_src_rewrite_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_fib_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ingress_port_mapping_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 compute_non_ip_hashes_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_src_vtep_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_dest_vtep_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ingress_bd_stats_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_vlan_xlate_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_mpls_packet_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_fib_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ipv6_packet_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_outer_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 storm_control_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_inner_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 drop_stats_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_urpf_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 dmac_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 urpf_bd_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_racl_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0003_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 compute_ipv4_hashes_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 nexthop_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_outer_ipv4_packet_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_rewrite_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunneled_packet_over_fabric_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_lag_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv6_urpf_lpm_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 validate_packet_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0407_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 port_vlan_mapping_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 rmac_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_encap_process_inner_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 replica_type_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mac_rewrite_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mirror_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_decap_process_outer_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 system_acl_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_dmac_rewrite_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 compute_ipv6_hashes_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 bd_flood_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 egress_vni_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 acl_stats_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_urpf_lpm_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_1215_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 mpls_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_dest_vtep_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_ingress_src_lkp_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_insert_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 tunnel_smac_rewrite_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_urpf_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 fabric_lag_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_meta_header_update_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipsg_permit_special_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipv4_racl_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ip_acl_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 outer_rmac_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 int_inst_0811_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  i32 ipsg_table_delete(SessionHandle_t sess_hdl, byte dev_id, EntryHandle_t entry)')
  print('  EntryHandle_t spanning_tree_set_default_action_set_stp_state(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_stp_state_action_spec_t action_spec)')
  print('  EntryHandle_t int_bos_set_default_action_int_set_header_0_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_bos_set_default_action_int_set_header_6_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_bos_set_default_action_int_set_header_3_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_bos_set_default_action_int_set_header_4_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_bos_set_default_action_int_set_header_1_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_bos_set_default_action_int_set_header_7_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_bos_set_default_action_int_set_header_2_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_bos_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_bos_set_default_action_int_set_header_5_bos(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_dst_rewrite_set_default_action_rewrite_tunnel_ipv6_dst(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_tunnel_ipv6_dst_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_dst_rewrite_set_default_action_rewrite_tunnel_ipv4_dst(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_tunnel_ipv4_dst_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_dst_rewrite_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_qinq_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_untagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_malformed_outer_ethernet_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_malformed_outer_ethernet_packet_action_spec_t action_spec)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_qinq_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_untagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_single_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_untagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_qinq_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_single_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_single_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t qos_set_default_action_apply_tc_marking(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_apply_tc_marking_action_spec_t action_spec)')
  print('  EntryHandle_t qos_set_default_action_apply_cos_marking(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_apply_cos_marking_action_spec_t action_spec)')
  print('  EntryHandle_t qos_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t qos_set_default_action_apply_dscp_marking(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_apply_dscp_marking_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_fib_lpm_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_fib_lpm_set_default_action_fib_hit_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_fib_lpm_set_default_action_fib_hit_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t egress_acl_set_default_action_egress_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_mirror_action_spec_t action_spec)')
  print('  EntryHandle_t egress_acl_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_acl_set_default_action_egress_redirect_to_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_redirect_to_cpu_action_spec_t action_spec)')
  print('  EntryHandle_t egress_acl_set_default_action_egress_mirror_drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_egress_mirror_drop_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_set_default_action_set_mpls_swap_push_rewrite_l3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mpls_swap_push_rewrite_l3_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_set_default_action_set_mpls_swap_push_rewrite_l2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mpls_swap_push_rewrite_l2_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_set_default_action_set_mpls_push_rewrite_l2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mpls_push_rewrite_l2_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_set_default_action_set_mpls_push_rewrite_l3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mpls_push_rewrite_l3_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_set_default_action_set_l3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_l3_rewrite_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_set_default_action_set_l2_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t rewrite_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t rewrite_set_default_action_set_l2_rewrite_with_tunnel(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_l2_rewrite_with_tunnel_action_spec_t action_spec)')
  print('  EntryHandle_t rewrite_set_default_action_set_l3_rewrite_with_tunnel(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_l3_rewrite_with_tunnel_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_set_default_action_acl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_log_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_set_default_action_acl_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_mirror_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_set_default_action_acl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_set_default_action_acl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_set_default_action_acl_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_set_default_action_acl_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_acl_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fwd_result_set_default_action_set_fib_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fwd_result_set_default_action_set_racl_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fwd_result_set_default_action_set_cpu_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fwd_result_set_default_action_set_l2_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fwd_result_set_default_action_set_acl_redirect_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fwd_result_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t learn_notify_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t learn_notify_set_default_action_generate_learn_notify(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t mac_acl_set_default_action_acl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_log_action_spec_t action_spec)')
  print('  EntryHandle_t mac_acl_set_default_action_acl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t mac_acl_set_default_action_acl_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_mirror_action_spec_t action_spec)')
  print('  EntryHandle_t mac_acl_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t mac_acl_set_default_action_acl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t smac_set_default_action_smac_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_smac_hit_action_spec_t action_spec)')
  print('  EntryHandle_t smac_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t smac_set_default_action_smac_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_outer_encap_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_outer_encap_set_default_action_int_update_vxlan_gpe_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_src_vtep_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_src_vtep_set_default_action_src_vtep_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_src_vtep_hit_action_spec_t action_spec)')
  print('  EntryHandle_t egress_filter_set_default_action_set_egress_filter_drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t vlan_decap_set_default_action_remove_vlan_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t vlan_decap_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t vlan_decap_set_default_action_remove_vlan_single_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t rid_set_default_action_outer_replica_from_rid_with_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_outer_replica_from_rid_with_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t rid_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t rid_set_default_action_outer_replica_from_rid(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_outer_replica_from_rid_action_spec_t action_spec)')
  print('  EntryHandle_t rid_set_default_action_inner_replica_from_rid(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_inner_replica_from_rid_action_spec_t action_spec)')
  print('  EntryHandle_t rid_set_default_action_inner_replica_from_rid_with_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_inner_replica_from_rid_with_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_fib_lpm_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_fib_lpm_set_default_action_fib_hit_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_fib_lpm_set_default_action_fib_hit_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t egress_port_mapping_set_default_action_egress_port_type_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_port_mapping_set_default_action_egress_port_type_normal(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_port_mapping_set_default_action_egress_port_type_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_set_default_action_terminate_fabric_multicast_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_set_default_action_switch_fabric_multicast_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_set_default_action_terminate_fabric_unicast_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_set_default_action_switch_fabric_unicast_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fabric_ingress_dst_lkp_set_default_action_terminate_cpu_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t compute_other_hashes_set_default_action_computed_one_hash(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t compute_other_hashes_set_default_action_computed_two_hashes(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_bd_map_set_default_action_set_egress_bd_properties(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_bd_map_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_src_rewrite_set_default_action_rewrite_tunnel_ipv4_src(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_tunnel_ipv4_src_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_src_rewrite_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_src_rewrite_set_default_action_rewrite_tunnel_ipv6_src(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_tunnel_ipv6_src_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_fib_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_fib_set_default_action_fib_hit_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_fib_set_default_action_fib_hit_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ingress_port_mapping_set_default_action_set_ifindex(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_ifindex_action_spec_t action_spec)')
  print('  EntryHandle_t compute_non_ip_hashes_set_default_action_compute_lkp_non_ip_hash(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_src_vtep_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_src_vtep_set_default_action_src_vtep_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_src_vtep_hit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_dest_vtep_set_default_action_set_tunnel_termination_flag(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_dest_vtep_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ingress_bd_stats_set_default_action_update_ingress_bd_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_vlan_xlate_set_default_action_set_egress_packet_vlan_untagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_vlan_xlate_set_default_action_set_egress_packet_vlan_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_egress_packet_vlan_tagged_action_spec_t action_spec)')
  print('  EntryHandle_t egress_vlan_xlate_set_default_action_set_egress_packet_vlan_double_tagged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_egress_packet_vlan_double_tagged_action_spec_t action_spec)')
  print('  EntryHandle_t validate_mpls_packet_set_default_action_set_valid_mpls_label2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_mpls_packet_set_default_action_set_valid_mpls_label3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_mpls_packet_set_default_action_set_valid_mpls_label1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_fib_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_fib_set_default_action_fib_hit_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fib_hit_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_fib_set_default_action_fib_hit_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fib_hit_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t validate_outer_ipv6_packet_set_default_action_set_malformed_outer_ipv6_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_malformed_outer_ipv6_packet_action_spec_t action_spec)')
  print('  EntryHandle_t validate_outer_ipv6_packet_set_default_action_set_valid_outer_ipv6_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv6_ipv4_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv4_genv_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv4_gre_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv6_vxlan_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_mpls_ip_push1_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_mpls_ethernet_push3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv6_gre_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_mpls_ethernet_push1_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv4_ipv4_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv4_nvgre_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv6_erspan_t3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_mpls_ethernet_push2_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv6_nvgre_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_mpls_ip_push3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv4_ipv6_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv6_ipv6_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv4_vxlan_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv6_genv_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_ipv4_erspan_t3_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_fabric_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_rewrite_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_encap_process_outer_set_default_action_mpls_ip_push2_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t storm_control_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t storm_control_set_default_action_set_storm_control_meter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_storm_control_meter_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_decap_process_inner_set_default_action_decap_inner_udp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_inner_set_default_action_decap_inner_icmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_inner_set_default_action_decap_inner_unknown(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_inner_set_default_action_decap_inner_tcp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t drop_stats_set_default_action_drop_stats_update(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_urpf_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_urpf_set_default_action_ipv6_urpf_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_urpf_hit_action_spec_t action_spec)')
  print('  EntryHandle_t dmac_set_default_action_dmac_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t dmac_set_default_action_dmac_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t dmac_set_default_action_dmac_drop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t dmac_set_default_action_dmac_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t dmac_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t dmac_set_default_action_dmac_multicast_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_multicast_hit_action_spec_t action_spec)')
  print('  EntryHandle_t dmac_set_default_action_dmac_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_dmac_hit_action_spec_t action_spec)')
  print('  EntryHandle_t urpf_bd_set_default_action_urpf_bd_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t urpf_bd_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_racl_set_default_action_racl_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_racl_set_default_action_racl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_racl_set_default_action_racl_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_racl_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv6_racl_set_default_action_racl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_log_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_racl_set_default_action_racl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i12(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i13(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i10(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i11(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i14(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i15(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i8(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i9(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i0(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i5(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0003_set_default_action_int_set_header_0003_i7(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t compute_ipv4_hashes_set_default_action_compute_lkp_ipv4_hash(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t nexthop_set_default_action_set_nexthop_details(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_nexthop_details_action_spec_t action_spec)')
  print('  EntryHandle_t nexthop_set_default_action_set_nexthop_details_for_post_routed_flood(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_nexthop_details_for_post_routed_flood_action_spec_t action_spec)')
  print('  EntryHandle_t nexthop_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_outer_ipv4_packet_set_default_action_set_malformed_outer_ipv4_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_malformed_outer_ipv4_packet_action_spec_t action_spec)')
  print('  EntryHandle_t validate_outer_ipv4_packet_set_default_action_set_valid_outer_ipv4_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_rewrite_set_default_action_fabric_multicast_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_multicast_rewrite_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_set_default_action_cpu_rx_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_rewrite_set_default_action_set_tunnel_rewrite_details(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_tunnel_rewrite_details_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_set_default_action_set_mpls_rewrite_push1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mpls_rewrite_push1_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_set_default_action_set_mpls_rewrite_push3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mpls_rewrite_push3_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_set_default_action_set_mpls_rewrite_push2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mpls_rewrite_push2_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_rewrite_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_rewrite_set_default_action_fabric_unicast_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_ipv6_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunneled_packet_over_fabric_set_default_action_terminate_inner_ipv4_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_non_ip_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunneled_packet_over_fabric_set_default_action_terminate_inner_ipv6_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_ipv4_over_fabric(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_lag_set_default_action_set_egress_ifindex(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_egress_ifindex_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_urpf_lpm_set_default_action_ipv6_urpf_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv6_urpf_hit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv6_urpf_lpm_set_default_action_urpf_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_packet_set_default_action_set_unicast_and_ipv6_src_is_link_local(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_packet_set_default_action_set_unicast(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_packet_set_default_action_set_malformed_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_malformed_packet_action_spec_t action_spec)')
  print('  EntryHandle_t validate_packet_set_default_action_set_multicast_and_ipv6_src_is_link_local(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_packet_set_default_action_set_broadcast(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_packet_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t validate_packet_set_default_action_set_multicast(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i12(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i13(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i10(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i11(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i14(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i15(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i8(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i9(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i0(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i5(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0407_set_default_action_int_set_header_0407_i7(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t rmac_set_default_action_rmac_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t rmac_set_default_action_rmac_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_ipv4_icmp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_ipv4_unknown_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_non_ip_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_ipv6_tcp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_ipv6_unknown_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_ipv4_tcp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_ipv4_udp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_ipv6_icmp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_encap_process_inner_set_default_action_inner_ipv6_udp_rewrite(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t replica_type_set_default_action_set_replica_copy_bridged(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t replica_type_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t mac_rewrite_set_default_action_rewrite_ipv6_unicast_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_ipv6_unicast_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_set_default_action_rewrite_ipv4_multicast_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_ipv4_multicast_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_set_default_action_rewrite_mpls_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_mpls_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_set_default_action_rewrite_ipv6_multicast_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_ipv6_multicast_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_set_default_action_rewrite_ipv4_unicast_mac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_ipv4_unicast_mac_action_spec_t action_spec)')
  print('  EntryHandle_t mac_rewrite_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t mirror_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t mirror_set_default_action_set_mirror_nhop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mirror_nhop_action_spec_t action_spec)')
  print('  EntryHandle_t mirror_set_default_action_set_mirror_bd(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_mirror_bd_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_genv_inner_non_ip(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_non_ip(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_non_ip(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_ip_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop3(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop1(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_ip_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_genv_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_decap_process_outer_set_default_action_decap_genv_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t system_acl_set_default_action_drop_packet(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t system_acl_set_default_action_redirect_to_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_redirect_to_cpu_action_spec_t action_spec)')
  print('  EntryHandle_t system_acl_set_default_action_congestion_mirror_set(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t system_acl_set_default_action_negative_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t system_acl_set_default_action_drop_packet_with_reason(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_drop_packet_with_reason_action_spec_t action_spec)')
  print('  EntryHandle_t system_acl_set_default_action_copy_to_cpu(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_copy_to_cpu_action_spec_t action_spec)')
  print('  EntryHandle_t system_acl_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_dmac_rewrite_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_dmac_rewrite_set_default_action_rewrite_tunnel_dmac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_tunnel_dmac_action_spec_t action_spec)')
  print('  EntryHandle_t compute_ipv6_hashes_set_default_action_compute_lkp_ipv6_hash(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t bd_flood_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t bd_flood_set_default_action_set_bd_flood_mc_index(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_bd_flood_mc_index_action_spec_t action_spec)')
  print('  EntryHandle_t egress_vni_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t egress_vni_set_default_action_set_egress_tunnel_vni(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_egress_tunnel_vni_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_set_default_action_terminate_tunnel_inner_non_ip(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_tunnel_inner_non_ip_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_set_default_action_terminate_tunnel_inner_ethernet_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_tunnel_inner_ethernet_ipv6_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_set_default_action_terminate_tunnel_inner_ethernet_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_tunnel_inner_ethernet_ipv4_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_set_default_action_terminate_tunnel_inner_ipv4(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_tunnel_inner_ipv4_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_set_default_action_terminate_tunnel_inner_ipv6(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_tunnel_inner_ipv6_action_spec_t action_spec)')
  print('  EntryHandle_t tunnel_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t acl_stats_set_default_action_acl_stats_update(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_urpf_lpm_set_default_action_ipv4_urpf_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_urpf_hit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_urpf_lpm_set_default_action_urpf_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_1215_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t mpls_set_default_action_forward_mpls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_forward_mpls_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_set_default_action_terminate_vpls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_vpls_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_set_default_action_terminate_eompls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_eompls_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_set_default_action_terminate_ipv4_over_mpls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_ipv4_over_mpls_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_set_default_action_terminate_pw(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_pw_action_spec_t action_spec)')
  print('  EntryHandle_t mpls_set_default_action_terminate_ipv6_over_mpls(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_terminate_ipv6_over_mpls_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_dest_vtep_set_default_action_set_tunnel_termination_flag(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_dest_vtep_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fabric_ingress_src_lkp_set_default_action_set_ingress_ifindex_properties(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t fabric_ingress_src_lkp_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_insert_set_default_action_int_transit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_int_transit_action_spec_t action_spec)')
  print('  EntryHandle_t int_insert_set_default_action_int_reset(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_smac_rewrite_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t tunnel_smac_rewrite_set_default_action_rewrite_tunnel_smac(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_rewrite_tunnel_smac_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_urpf_set_default_action_ipv4_urpf_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ipv4_urpf_hit_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_urpf_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_meta_header_update_set_default_action_int_update_total_hop_cnt(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_meta_header_update_set_default_action_int_set_e_bit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipsg_permit_special_set_default_action_ipsg_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_racl_set_default_action_racl_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_racl_set_default_action_racl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_racl_set_default_action_racl_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_racl_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipv4_racl_set_default_action_racl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_log_action_spec_t action_spec)')
  print('  EntryHandle_t ipv4_racl_set_default_action_racl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_racl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_set_default_action_acl_dod_en(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ip_acl_set_default_action_acl_log(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_log_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_set_default_action_acl_mirror(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_mirror_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_set_default_action_acl_deny(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_deny_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_set_default_action_acl_permit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_permit_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_set_default_action_acl_redirect_nexthop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_redirect_nexthop_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_set_default_action_acl_redirect_ecmp(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_acl_redirect_ecmp_action_spec_t action_spec)')
  print('  EntryHandle_t ip_acl_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t outer_rmac_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t outer_rmac_set_default_action_outer_rmac_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t int_inst_0811_set_default_action_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  EntryHandle_t ipsg_set_default_action_on_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  MemberHandle_t lag_action_profile_add_member_with_set_lag_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 lag_action_profile_modify_member_with_set_lag_miss(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  MemberHandle_t lag_action_profile_add_member_with_set_lag_port(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_lag_port_action_spec_t action_spec)')
  print('  i32 lag_action_profile_modify_member_with_set_lag_port(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr, dc_set_lag_port_action_spec_t action_spec)')
  print('  MemberHandle_t lag_action_profile_add_member_with_set_lag_remote_port(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_lag_remote_port_action_spec_t action_spec)')
  print('  i32 lag_action_profile_modify_member_with_set_lag_remote_port(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr, dc_set_lag_remote_port_action_spec_t action_spec)')
  print('  i32 lag_action_profile_del_member(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  GroupHandle_t lag_action_profile_create_group(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i16 max_grp_size)')
  print('  i32 lag_action_profile_del_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp)')
  print('  i32 lag_action_profile_add_member_to_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 lag_action_profile_del_member_from_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 lag_action_profile_deactivate_group_member(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 lag_action_profile_reactivate_group_member(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  MemberHandle_t ecmp_action_profile_add_member_with_set_ecmp_nexthop_details_for_post_routed_flood(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_ecmp_nexthop_details_for_post_routed_flood_action_spec_t action_spec)')
  print('  i32 ecmp_action_profile_modify_member_with_set_ecmp_nexthop_details_for_post_routed_flood(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr, dc_set_ecmp_nexthop_details_for_post_routed_flood_action_spec_t action_spec)')
  print('  MemberHandle_t ecmp_action_profile_add_member_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 ecmp_action_profile_modify_member_with_nop(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  MemberHandle_t ecmp_action_profile_add_member_with_set_ecmp_nexthop_details(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_ecmp_nexthop_details_action_spec_t action_spec)')
  print('  i32 ecmp_action_profile_modify_member_with_set_ecmp_nexthop_details(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr, dc_set_ecmp_nexthop_details_action_spec_t action_spec)')
  print('  i32 ecmp_action_profile_del_member(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  GroupHandle_t ecmp_action_profile_create_group(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i16 max_grp_size)')
  print('  i32 ecmp_action_profile_del_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp)')
  print('  i32 ecmp_action_profile_add_member_to_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 ecmp_action_profile_del_member_from_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 ecmp_action_profile_deactivate_group_member(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 ecmp_action_profile_reactivate_group_member(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  MemberHandle_t bd_action_profile_add_member_with_port_vlan_mapping_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 bd_action_profile_modify_member_with_port_vlan_mapping_miss(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  MemberHandle_t bd_action_profile_add_member_with_set_bd(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_bd_action_spec_t action_spec)')
  print('  i32 bd_action_profile_modify_member_with_set_bd(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr, dc_set_bd_action_spec_t action_spec)')
  print('  i32 bd_action_profile_del_member(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  MemberHandle_t fabric_lag_action_profile_add_member_with_set_fabric_lag_port(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_set_fabric_lag_port_action_spec_t action_spec)')
  print('  i32 fabric_lag_action_profile_modify_member_with_set_fabric_lag_port(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr, dc_set_fabric_lag_port_action_spec_t action_spec)')
  print('  MemberHandle_t fabric_lag_action_profile_add_member_with_set_fabric_multicast(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 fabric_lag_action_profile_modify_member_with_set_fabric_multicast(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  MemberHandle_t fabric_lag_action_profile_add_member_with_nop(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 fabric_lag_action_profile_modify_member_with_nop(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  i32 fabric_lag_action_profile_del_member(SessionHandle_t sess_hdl, byte dev_id, MemberHandle_t mbr)')
  print('  GroupHandle_t fabric_lag_action_profile_create_group(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i16 max_grp_size)')
  print('  i32 fabric_lag_action_profile_del_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp)')
  print('  i32 fabric_lag_action_profile_add_member_to_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 fabric_lag_action_profile_del_member_from_group(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 fabric_lag_action_profile_deactivate_group_member(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  i32 fabric_lag_action_profile_reactivate_group_member(SessionHandle_t sess_hdl, byte dev_id, GroupHandle_t grp, MemberHandle_t mbr)')
  print('  EntryHandle_t lag_group_add_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_lag_group_match_spec_t match_spec, MemberHandle_t mbr)')
  print('  EntryHandle_t lag_group_add_entry_with_selector(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_lag_group_match_spec_t match_spec, GroupHandle_t grp)')
  print('  EntryHandle_t ecmp_group_add_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ecmp_group_match_spec_t match_spec, MemberHandle_t mbr)')
  print('  EntryHandle_t ecmp_group_add_entry_with_selector(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_ecmp_group_match_spec_t match_spec, GroupHandle_t grp)')
  print('  EntryHandle_t port_vlan_mapping_add_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_port_vlan_mapping_match_spec_t match_spec, MemberHandle_t mbr)')
  print('  EntryHandle_t fabric_lag_add_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_lag_match_spec_t match_spec, MemberHandle_t mbr)')
  print('  EntryHandle_t fabric_lag_add_entry_with_selector(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, dc_fabric_lag_match_spec_t match_spec, GroupHandle_t grp)')
  print('  EntryHandle_t lag_group_set_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, MemberHandle_t mbr)')
  print('  EntryHandle_t lag_group_set_default_entry_with_selector(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, GroupHandle_t grp)')
  print('  EntryHandle_t ecmp_group_set_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, MemberHandle_t mbr)')
  print('  EntryHandle_t ecmp_group_set_default_entry_with_selector(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, GroupHandle_t grp)')
  print('  EntryHandle_t port_vlan_mapping_set_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, MemberHandle_t mbr)')
  print('  EntryHandle_t fabric_lag_set_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, MemberHandle_t mbr)')
  print('  EntryHandle_t fabric_lag_set_default_entry_with_selector(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, GroupHandle_t grp)')
  print('  i32 clean_all(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 tables_clean_all(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  dc_counter_value_t counter_read_drop_stats_2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, dc_counter_flags_t flags)')
  print('  i32 counter_write_drop_stats_2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, dc_counter_value_t counter_value)')
  print('  dc_counter_value_t counter_read_acl_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, dc_counter_flags_t flags)')
  print('  i32 counter_write_acl_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, dc_counter_value_t counter_value)')
  print('  dc_counter_value_t counter_read_ingress_bd_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, dc_counter_flags_t flags)')
  print('  i32 counter_write_ingress_bd_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, dc_counter_value_t counter_value)')
  print('  dc_counter_value_t counter_read_drop_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, dc_counter_flags_t flags)')
  print('  i32 counter_write_drop_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, dc_counter_value_t counter_value)')
  print('  i32 counter_hw_sync_drop_stats_2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 counter_hw_sync_acl_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 counter_hw_sync_ingress_bd_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 counter_hw_sync_drop_stats(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
  print('  i32 meter_configure_storm_control_meter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 index, i32 cir_kbps, i32 cburst_kbits, i32 pir_kbps, i32 pburst_kbits)')
  print('  i32 mirroring_mapping_add(i32 mirror_id, i32 egress_port)')
  print('  i32 mirroring_mapping_delete(i32 mirror_id)')
  print('  i32 mirroring_mapping_get_egress_port(i32 mirror_id)')
  print('  void set_learning_timeout(SessionHandle_t sess_hdl, byte dev_id, i32 msecs)')
  print('  void mac_learn_digest_register(SessionHandle_t sess_hdl, byte dev_id)')
  print('  void mac_learn_digest_deregister(SessionHandle_t sess_hdl, byte dev_id)')
  print('  dc_mac_learn_digest_digest_msg_t mac_learn_digest_get_digest(SessionHandle_t sess_hdl)')
  print('  void mac_learn_digest_digest_notify_ack(SessionHandle_t sess_hdl, i64 msg_ptr)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = dc.Client(protocol)
transport.open()

if cmd == 'spanning_tree_table_add_with_set_stp_state':
  if len(args) != 4:
    print('spanning_tree_table_add_with_set_stp_state requires 4 args')
    sys.exit(1)
  pp.pprint(client.spanning_tree_table_add_with_set_stp_state(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_int_set_header_0_bos':
  if len(args) != 4:
    print('int_bos_table_add_with_int_set_header_0_bos requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_int_set_header_0_bos(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_int_set_header_6_bos':
  if len(args) != 4:
    print('int_bos_table_add_with_int_set_header_6_bos requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_int_set_header_6_bos(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_int_set_header_3_bos':
  if len(args) != 4:
    print('int_bos_table_add_with_int_set_header_3_bos requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_int_set_header_3_bos(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_int_set_header_4_bos':
  if len(args) != 4:
    print('int_bos_table_add_with_int_set_header_4_bos requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_int_set_header_4_bos(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_int_set_header_1_bos':
  if len(args) != 4:
    print('int_bos_table_add_with_int_set_header_1_bos requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_int_set_header_1_bos(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_int_set_header_7_bos':
  if len(args) != 4:
    print('int_bos_table_add_with_int_set_header_7_bos requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_int_set_header_7_bos(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_int_set_header_2_bos':
  if len(args) != 4:
    print('int_bos_table_add_with_int_set_header_2_bos requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_int_set_header_2_bos(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_nop':
  if len(args) != 4:
    print('int_bos_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_add_with_int_set_header_5_bos':
  if len(args) != 4:
    print('int_bos_table_add_with_int_set_header_5_bos requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_add_with_int_set_header_5_bos(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_dst_rewrite_table_add_with_rewrite_tunnel_ipv6_dst':
  if len(args) != 4:
    print('tunnel_dst_rewrite_table_add_with_rewrite_tunnel_ipv6_dst requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_table_add_with_rewrite_tunnel_ipv6_dst(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_dst_rewrite_table_add_with_rewrite_tunnel_ipv4_dst':
  if len(args) != 4:
    print('tunnel_dst_rewrite_table_add_with_rewrite_tunnel_ipv4_dst requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_table_add_with_rewrite_tunnel_ipv4_dst(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_dst_rewrite_table_add_with_nop':
  if len(args) != 3:
    print('tunnel_dst_rewrite_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_double_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_double_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_qinq_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_qinq_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_qinq_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_untagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_untagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_untagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_malformed_outer_ethernet_packet':
  if len(args) != 5:
    print('validate_outer_ethernet_table_add_with_malformed_outer_ethernet_packet requires 5 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_malformed_outer_ethernet_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_qinq_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_qinq_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_qinq_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_untagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_untagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_untagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_double_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_double_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_single_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_single_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_multicast_packet_single_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_untagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_untagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_untagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_qinq_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_qinq_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_qinq_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_single_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_single_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_single_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_single_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_single_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_unicast_packet_single_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_double_tagged':
  if len(args) != 4:
    print('validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_double_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_add_with_set_valid_outer_broadcast_packet_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'qos_table_add_with_apply_tc_marking':
  if len(args) != 5:
    print('qos_table_add_with_apply_tc_marking requires 5 args')
    sys.exit(1)
  pp.pprint(client.qos_table_add_with_apply_tc_marking(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'qos_table_add_with_apply_cos_marking':
  if len(args) != 5:
    print('qos_table_add_with_apply_cos_marking requires 5 args')
    sys.exit(1)
  pp.pprint(client.qos_table_add_with_apply_cos_marking(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'qos_table_add_with_nop':
  if len(args) != 4:
    print('qos_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.qos_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'qos_table_add_with_apply_dscp_marking':
  if len(args) != 5:
    print('qos_table_add_with_apply_dscp_marking requires 5 args')
    sys.exit(1)
  pp.pprint(client.qos_table_add_with_apply_dscp_marking(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_fib_lpm_table_add_with_on_miss':
  if len(args) != 3:
    print('ipv6_fib_lpm_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_lpm_table_add_with_fib_hit_ecmp':
  if len(args) != 4:
    print('ipv6_fib_lpm_table_add_with_fib_hit_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_table_add_with_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_fib_lpm_table_add_with_fib_hit_nexthop':
  if len(args) != 4:
    print('ipv6_fib_lpm_table_add_with_fib_hit_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_table_add_with_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_acl_table_add_with_egress_mirror':
  if len(args) != 5:
    print('egress_acl_table_add_with_egress_mirror requires 5 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_add_with_egress_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'egress_acl_table_add_with_nop':
  if len(args) != 4:
    print('egress_acl_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_acl_table_add_with_egress_redirect_to_cpu':
  if len(args) != 5:
    print('egress_acl_table_add_with_egress_redirect_to_cpu requires 5 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_add_with_egress_redirect_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'egress_acl_table_add_with_egress_mirror_drop':
  if len(args) != 5:
    print('egress_acl_table_add_with_egress_mirror_drop requires 5 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_add_with_egress_mirror_drop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'rewrite_table_add_with_set_mpls_swap_push_rewrite_l3':
  if len(args) != 4:
    print('rewrite_table_add_with_set_mpls_swap_push_rewrite_l3 requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_set_mpls_swap_push_rewrite_l3(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_add_with_set_mpls_swap_push_rewrite_l2':
  if len(args) != 4:
    print('rewrite_table_add_with_set_mpls_swap_push_rewrite_l2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_set_mpls_swap_push_rewrite_l2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_add_with_set_mpls_push_rewrite_l2':
  if len(args) != 4:
    print('rewrite_table_add_with_set_mpls_push_rewrite_l2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_set_mpls_push_rewrite_l2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_add_with_set_mpls_push_rewrite_l3':
  if len(args) != 4:
    print('rewrite_table_add_with_set_mpls_push_rewrite_l3 requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_set_mpls_push_rewrite_l3(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_add_with_set_l3_rewrite':
  if len(args) != 4:
    print('rewrite_table_add_with_set_l3_rewrite requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_set_l3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_add_with_set_l2_rewrite':
  if len(args) != 3:
    print('rewrite_table_add_with_set_l2_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_set_l2_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_table_add_with_nop':
  if len(args) != 3:
    print('rewrite_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_table_add_with_set_l2_rewrite_with_tunnel':
  if len(args) != 4:
    print('rewrite_table_add_with_set_l2_rewrite_with_tunnel requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_set_l2_rewrite_with_tunnel(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_add_with_set_l3_rewrite_with_tunnel':
  if len(args) != 4:
    print('rewrite_table_add_with_set_l3_rewrite_with_tunnel requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_add_with_set_l3_rewrite_with_tunnel(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_acl_table_add_with_acl_log':
  if len(args) != 5:
    print('ipv6_acl_table_add_with_acl_log requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_add_with_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_acl_table_add_with_acl_mirror':
  if len(args) != 5:
    print('ipv6_acl_table_add_with_acl_mirror requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_add_with_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_acl_table_add_with_acl_deny':
  if len(args) != 5:
    print('ipv6_acl_table_add_with_acl_deny requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_add_with_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_acl_table_add_with_acl_permit':
  if len(args) != 5:
    print('ipv6_acl_table_add_with_acl_permit requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_add_with_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_acl_table_add_with_acl_redirect_nexthop':
  if len(args) != 5:
    print('ipv6_acl_table_add_with_acl_redirect_nexthop requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_add_with_acl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_acl_table_add_with_acl_redirect_ecmp':
  if len(args) != 5:
    print('ipv6_acl_table_add_with_acl_redirect_ecmp requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_add_with_acl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_acl_table_add_with_nop':
  if len(args) != 4:
    print('ipv6_acl_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fwd_result_table_add_with_set_fib_redirect_action':
  if len(args) != 4:
    print('fwd_result_table_add_with_set_fib_redirect_action requires 4 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_add_with_set_fib_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fwd_result_table_add_with_set_racl_redirect_action':
  if len(args) != 4:
    print('fwd_result_table_add_with_set_racl_redirect_action requires 4 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_add_with_set_racl_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fwd_result_table_add_with_set_cpu_redirect_action':
  if len(args) != 4:
    print('fwd_result_table_add_with_set_cpu_redirect_action requires 4 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_add_with_set_cpu_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fwd_result_table_add_with_set_l2_redirect_action':
  if len(args) != 4:
    print('fwd_result_table_add_with_set_l2_redirect_action requires 4 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_add_with_set_l2_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fwd_result_table_add_with_set_acl_redirect_action':
  if len(args) != 4:
    print('fwd_result_table_add_with_set_acl_redirect_action requires 4 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_add_with_set_acl_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fwd_result_table_add_with_nop':
  if len(args) != 4:
    print('fwd_result_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'learn_notify_table_add_with_nop':
  if len(args) != 4:
    print('learn_notify_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.learn_notify_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'learn_notify_table_add_with_generate_learn_notify':
  if len(args) != 4:
    print('learn_notify_table_add_with_generate_learn_notify requires 4 args')
    sys.exit(1)
  pp.pprint(client.learn_notify_table_add_with_generate_learn_notify(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_acl_table_add_with_acl_log':
  if len(args) != 5:
    print('mac_acl_table_add_with_acl_log requires 5 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_add_with_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'mac_acl_table_add_with_acl_deny':
  if len(args) != 5:
    print('mac_acl_table_add_with_acl_deny requires 5 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_add_with_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'mac_acl_table_add_with_acl_mirror':
  if len(args) != 5:
    print('mac_acl_table_add_with_acl_mirror requires 5 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_add_with_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'mac_acl_table_add_with_nop':
  if len(args) != 4:
    print('mac_acl_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_acl_table_add_with_acl_permit':
  if len(args) != 5:
    print('mac_acl_table_add_with_acl_permit requires 5 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_add_with_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'smac_table_add_with_smac_hit':
  if len(args) != 4:
    print('smac_table_add_with_smac_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.smac_table_add_with_smac_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'smac_table_add_with_nop':
  if len(args) != 3:
    print('smac_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.smac_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'smac_table_add_with_smac_miss':
  if len(args) != 3:
    print('smac_table_add_with_smac_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.smac_table_add_with_smac_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_outer_encap_table_add_with_nop':
  if len(args) != 4:
    print('int_outer_encap_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_outer_encap_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_outer_encap_table_add_with_int_update_vxlan_gpe_ipv4':
  if len(args) != 4:
    print('int_outer_encap_table_add_with_int_update_vxlan_gpe_ipv4 requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_outer_encap_table_add_with_int_update_vxlan_gpe_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_src_vtep_table_add_with_on_miss':
  if len(args) != 3:
    print('ipv6_src_vtep_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_src_vtep_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_src_vtep_table_add_with_src_vtep_hit':
  if len(args) != 4:
    print('ipv6_src_vtep_table_add_with_src_vtep_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_src_vtep_table_add_with_src_vtep_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_filter_table_add_with_set_egress_filter_drop':
  if len(args) != 2:
    print('egress_filter_table_add_with_set_egress_filter_drop requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_filter_table_add_with_set_egress_filter_drop(eval(args[0]),eval(args[1]),))

elif cmd == 'vlan_decap_table_add_with_remove_vlan_double_tagged':
  if len(args) != 3:
    print('vlan_decap_table_add_with_remove_vlan_double_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_table_add_with_remove_vlan_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'vlan_decap_table_add_with_nop':
  if len(args) != 3:
    print('vlan_decap_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'vlan_decap_table_add_with_remove_vlan_single_tagged':
  if len(args) != 3:
    print('vlan_decap_table_add_with_remove_vlan_single_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_table_add_with_remove_vlan_single_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rid_table_add_with_outer_replica_from_rid_with_nexthop':
  if len(args) != 4:
    print('rid_table_add_with_outer_replica_from_rid_with_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.rid_table_add_with_outer_replica_from_rid_with_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rid_table_add_with_nop':
  if len(args) != 3:
    print('rid_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.rid_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rid_table_add_with_outer_replica_from_rid':
  if len(args) != 4:
    print('rid_table_add_with_outer_replica_from_rid requires 4 args')
    sys.exit(1)
  pp.pprint(client.rid_table_add_with_outer_replica_from_rid(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rid_table_add_with_inner_replica_from_rid':
  if len(args) != 4:
    print('rid_table_add_with_inner_replica_from_rid requires 4 args')
    sys.exit(1)
  pp.pprint(client.rid_table_add_with_inner_replica_from_rid(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rid_table_add_with_inner_replica_from_rid_with_nexthop':
  if len(args) != 4:
    print('rid_table_add_with_inner_replica_from_rid_with_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.rid_table_add_with_inner_replica_from_rid_with_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_fib_lpm_table_add_with_on_miss':
  if len(args) != 3:
    print('ipv4_fib_lpm_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_lpm_table_add_with_fib_hit_ecmp':
  if len(args) != 4:
    print('ipv4_fib_lpm_table_add_with_fib_hit_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_table_add_with_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_fib_lpm_table_add_with_fib_hit_nexthop':
  if len(args) != 4:
    print('ipv4_fib_lpm_table_add_with_fib_hit_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_table_add_with_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_port_mapping_table_add_with_egress_port_type_cpu':
  if len(args) != 3:
    print('egress_port_mapping_table_add_with_egress_port_type_cpu requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_table_add_with_egress_port_type_cpu(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_port_mapping_table_add_with_egress_port_type_normal':
  if len(args) != 3:
    print('egress_port_mapping_table_add_with_egress_port_type_normal requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_table_add_with_egress_port_type_normal(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_port_mapping_table_add_with_egress_port_type_fabric':
  if len(args) != 3:
    print('egress_port_mapping_table_add_with_egress_port_type_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_table_add_with_egress_port_type_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_add_with_terminate_fabric_multicast_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_add_with_terminate_fabric_multicast_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_add_with_terminate_fabric_multicast_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_add_with_switch_fabric_multicast_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_add_with_switch_fabric_multicast_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_add_with_switch_fabric_multicast_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_add_with_terminate_fabric_unicast_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_add_with_terminate_fabric_unicast_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_add_with_terminate_fabric_unicast_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_add_with_switch_fabric_unicast_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_add_with_switch_fabric_unicast_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_add_with_switch_fabric_unicast_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_add_with_nop':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_add_with_terminate_cpu_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_add_with_terminate_cpu_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_add_with_terminate_cpu_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_other_hashes_table_add_with_computed_one_hash':
  if len(args) != 3:
    print('compute_other_hashes_table_add_with_computed_one_hash requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_other_hashes_table_add_with_computed_one_hash(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_other_hashes_table_add_with_computed_two_hashes':
  if len(args) != 3:
    print('compute_other_hashes_table_add_with_computed_two_hashes requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_other_hashes_table_add_with_computed_two_hashes(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_bd_map_table_add_with_set_egress_bd_properties':
  if len(args) != 3:
    print('egress_bd_map_table_add_with_set_egress_bd_properties requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_bd_map_table_add_with_set_egress_bd_properties(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_bd_map_table_add_with_nop':
  if len(args) != 3:
    print('egress_bd_map_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_bd_map_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_src_rewrite_table_add_with_rewrite_tunnel_ipv4_src':
  if len(args) != 4:
    print('tunnel_src_rewrite_table_add_with_rewrite_tunnel_ipv4_src requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_table_add_with_rewrite_tunnel_ipv4_src(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_src_rewrite_table_add_with_nop':
  if len(args) != 3:
    print('tunnel_src_rewrite_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_src_rewrite_table_add_with_rewrite_tunnel_ipv6_src':
  if len(args) != 4:
    print('tunnel_src_rewrite_table_add_with_rewrite_tunnel_ipv6_src requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_table_add_with_rewrite_tunnel_ipv6_src(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_fib_table_add_with_on_miss':
  if len(args) != 3:
    print('ipv4_fib_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_table_add_with_fib_hit_ecmp':
  if len(args) != 4:
    print('ipv4_fib_table_add_with_fib_hit_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_table_add_with_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_fib_table_add_with_fib_hit_nexthop':
  if len(args) != 4:
    print('ipv4_fib_table_add_with_fib_hit_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_table_add_with_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ingress_port_mapping_table_add_with_set_ifindex':
  if len(args) != 4:
    print('ingress_port_mapping_table_add_with_set_ifindex requires 4 args')
    sys.exit(1)
  pp.pprint(client.ingress_port_mapping_table_add_with_set_ifindex(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'compute_non_ip_hashes_table_add_with_compute_lkp_non_ip_hash':
  if len(args) != 3:
    print('compute_non_ip_hashes_table_add_with_compute_lkp_non_ip_hash requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_non_ip_hashes_table_add_with_compute_lkp_non_ip_hash(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_src_vtep_table_add_with_on_miss':
  if len(args) != 3:
    print('ipv4_src_vtep_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_src_vtep_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_src_vtep_table_add_with_src_vtep_hit':
  if len(args) != 4:
    print('ipv4_src_vtep_table_add_with_src_vtep_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_src_vtep_table_add_with_src_vtep_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_dest_vtep_table_add_with_set_tunnel_termination_flag':
  if len(args) != 3:
    print('ipv6_dest_vtep_table_add_with_set_tunnel_termination_flag requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_dest_vtep_table_add_with_set_tunnel_termination_flag(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_dest_vtep_table_add_with_nop':
  if len(args) != 3:
    print('ipv6_dest_vtep_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_dest_vtep_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ingress_bd_stats_table_add_with_update_ingress_bd_stats':
  if len(args) != 2:
    print('ingress_bd_stats_table_add_with_update_ingress_bd_stats requires 2 args')
    sys.exit(1)
  pp.pprint(client.ingress_bd_stats_table_add_with_update_ingress_bd_stats(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_vlan_xlate_table_add_with_set_egress_packet_vlan_untagged':
  if len(args) != 3:
    print('egress_vlan_xlate_table_add_with_set_egress_packet_vlan_untagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_table_add_with_set_egress_packet_vlan_untagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vlan_xlate_table_add_with_set_egress_packet_vlan_tagged':
  if len(args) != 4:
    print('egress_vlan_xlate_table_add_with_set_egress_packet_vlan_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_table_add_with_set_egress_packet_vlan_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_vlan_xlate_table_add_with_set_egress_packet_vlan_double_tagged':
  if len(args) != 4:
    print('egress_vlan_xlate_table_add_with_set_egress_packet_vlan_double_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_table_add_with_set_egress_packet_vlan_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_mpls_packet_table_add_with_set_valid_mpls_label2':
  if len(args) != 4:
    print('validate_mpls_packet_table_add_with_set_valid_mpls_label2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_table_add_with_set_valid_mpls_label2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_mpls_packet_table_add_with_set_valid_mpls_label3':
  if len(args) != 4:
    print('validate_mpls_packet_table_add_with_set_valid_mpls_label3 requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_table_add_with_set_valid_mpls_label3(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_mpls_packet_table_add_with_set_valid_mpls_label1':
  if len(args) != 4:
    print('validate_mpls_packet_table_add_with_set_valid_mpls_label1 requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_table_add_with_set_valid_mpls_label1(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_fib_table_add_with_on_miss':
  if len(args) != 3:
    print('ipv6_fib_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_table_add_with_fib_hit_ecmp':
  if len(args) != 4:
    print('ipv6_fib_table_add_with_fib_hit_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_table_add_with_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_fib_table_add_with_fib_hit_nexthop':
  if len(args) != 4:
    print('ipv6_fib_table_add_with_fib_hit_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_table_add_with_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ipv6_packet_table_add_with_set_malformed_outer_ipv6_packet':
  if len(args) != 5:
    print('validate_outer_ipv6_packet_table_add_with_set_malformed_outer_ipv6_packet requires 5 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv6_packet_table_add_with_set_malformed_outer_ipv6_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'validate_outer_ipv6_packet_table_add_with_set_valid_outer_ipv6_packet':
  if len(args) != 4:
    print('validate_outer_ipv6_packet_table_add_with_set_valid_outer_ipv6_packet requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv6_packet_table_add_with_set_valid_outer_ipv6_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv6_ipv4_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv6_ipv4_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv6_ipv4_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv4_genv_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv4_genv_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv4_genv_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv4_gre_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv4_gre_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv4_gre_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv6_vxlan_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv6_vxlan_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv6_vxlan_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_mpls_ip_push1_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_mpls_ip_push1_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_mpls_ip_push1_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_mpls_ethernet_push3_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_mpls_ethernet_push3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_mpls_ethernet_push3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv6_gre_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv6_gre_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv6_gre_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_mpls_ethernet_push1_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_mpls_ethernet_push1_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_mpls_ethernet_push1_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv4_ipv4_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv4_ipv4_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv4_ipv4_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv4_nvgre_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv4_nvgre_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv4_nvgre_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv6_erspan_t3_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv6_erspan_t3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv6_erspan_t3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_mpls_ethernet_push2_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_mpls_ethernet_push2_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_mpls_ethernet_push2_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv6_nvgre_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv6_nvgre_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv6_nvgre_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_nop':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_mpls_ip_push3_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_mpls_ip_push3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_mpls_ip_push3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv4_ipv6_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv4_ipv6_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv4_ipv6_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv6_ipv6_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv6_ipv6_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv6_ipv6_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv4_vxlan_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv4_vxlan_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv4_vxlan_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv6_genv_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv6_genv_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv6_genv_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_ipv4_erspan_t3_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_ipv4_erspan_t3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_ipv4_erspan_t3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_fabric_rewrite':
  if len(args) != 4:
    print('tunnel_encap_process_outer_table_add_with_fabric_rewrite requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_fabric_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_encap_process_outer_table_add_with_mpls_ip_push2_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_add_with_mpls_ip_push2_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_add_with_mpls_ip_push2_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'storm_control_table_add_with_nop':
  if len(args) != 4:
    print('storm_control_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.storm_control_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'storm_control_table_add_with_set_storm_control_meter':
  if len(args) != 5:
    print('storm_control_table_add_with_set_storm_control_meter requires 5 args')
    sys.exit(1)
  pp.pprint(client.storm_control_table_add_with_set_storm_control_meter(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'tunnel_decap_process_inner_table_add_with_decap_inner_udp':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_add_with_decap_inner_udp requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_add_with_decap_inner_udp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_inner_table_add_with_decap_inner_icmp':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_add_with_decap_inner_icmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_add_with_decap_inner_icmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_inner_table_add_with_decap_inner_unknown':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_add_with_decap_inner_unknown requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_add_with_decap_inner_unknown(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_inner_table_add_with_decap_inner_tcp':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_add_with_decap_inner_tcp requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_add_with_decap_inner_tcp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'drop_stats_table_add_with_drop_stats_update':
  if len(args) != 2:
    print('drop_stats_table_add_with_drop_stats_update requires 2 args')
    sys.exit(1)
  pp.pprint(client.drop_stats_table_add_with_drop_stats_update(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_urpf_table_add_with_on_miss':
  if len(args) != 3:
    print('ipv6_urpf_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_urpf_table_add_with_ipv6_urpf_hit':
  if len(args) != 4:
    print('ipv6_urpf_table_add_with_ipv6_urpf_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_table_add_with_ipv6_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'dmac_table_add_with_dmac_miss':
  if len(args) != 4:
    print('dmac_table_add_with_dmac_miss requires 4 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_add_with_dmac_miss(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'dmac_table_add_with_dmac_redirect_ecmp':
  if len(args) != 5:
    print('dmac_table_add_with_dmac_redirect_ecmp requires 5 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_add_with_dmac_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'dmac_table_add_with_dmac_drop':
  if len(args) != 4:
    print('dmac_table_add_with_dmac_drop requires 4 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_add_with_dmac_drop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'dmac_table_add_with_dmac_redirect_nexthop':
  if len(args) != 5:
    print('dmac_table_add_with_dmac_redirect_nexthop requires 5 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_add_with_dmac_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'dmac_table_add_with_nop':
  if len(args) != 4:
    print('dmac_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'dmac_table_add_with_dmac_multicast_hit':
  if len(args) != 5:
    print('dmac_table_add_with_dmac_multicast_hit requires 5 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_add_with_dmac_multicast_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'dmac_table_add_with_dmac_hit':
  if len(args) != 5:
    print('dmac_table_add_with_dmac_hit requires 5 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_add_with_dmac_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'urpf_bd_table_add_with_urpf_bd_miss':
  if len(args) != 3:
    print('urpf_bd_table_add_with_urpf_bd_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.urpf_bd_table_add_with_urpf_bd_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'urpf_bd_table_add_with_nop':
  if len(args) != 3:
    print('urpf_bd_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.urpf_bd_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_racl_table_add_with_racl_redirect_nexthop':
  if len(args) != 5:
    print('ipv6_racl_table_add_with_racl_redirect_nexthop requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_add_with_racl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_racl_table_add_with_racl_deny':
  if len(args) != 5:
    print('ipv6_racl_table_add_with_racl_deny requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_add_with_racl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_racl_table_add_with_racl_redirect_ecmp':
  if len(args) != 5:
    print('ipv6_racl_table_add_with_racl_redirect_ecmp requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_add_with_racl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_racl_table_add_with_nop':
  if len(args) != 4:
    print('ipv6_racl_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_racl_table_add_with_racl_log':
  if len(args) != 5:
    print('ipv6_racl_table_add_with_racl_log requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_add_with_racl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv6_racl_table_add_with_racl_permit':
  if len(args) != 5:
    print('ipv6_racl_table_add_with_racl_permit requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_add_with_racl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i12':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i12 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i12(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i13':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i13 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i13(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i10':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i10 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i10(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i11':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i11 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i11(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i14':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i14 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i14(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i15':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i15 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i15(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i8':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i8 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i8(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i9':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i9 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i9(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i0':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i0 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i0(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i1':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i2':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i3':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i4':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i5':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i5 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i5(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i6':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_add_with_int_set_header_0003_i7':
  if len(args) != 3:
    print('int_inst_0003_table_add_with_int_set_header_0003_i7 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_add_with_int_set_header_0003_i7(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_ipv4_hashes_table_add_with_compute_lkp_ipv4_hash':
  if len(args) != 3:
    print('compute_ipv4_hashes_table_add_with_compute_lkp_ipv4_hash requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_ipv4_hashes_table_add_with_compute_lkp_ipv4_hash(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'nexthop_table_add_with_set_nexthop_details':
  if len(args) != 4:
    print('nexthop_table_add_with_set_nexthop_details requires 4 args')
    sys.exit(1)
  pp.pprint(client.nexthop_table_add_with_set_nexthop_details(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'nexthop_table_add_with_set_nexthop_details_for_post_routed_flood':
  if len(args) != 4:
    print('nexthop_table_add_with_set_nexthop_details_for_post_routed_flood requires 4 args')
    sys.exit(1)
  pp.pprint(client.nexthop_table_add_with_set_nexthop_details_for_post_routed_flood(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'nexthop_table_add_with_nop':
  if len(args) != 3:
    print('nexthop_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.nexthop_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ipv4_packet_table_add_with_set_malformed_outer_ipv4_packet':
  if len(args) != 5:
    print('validate_outer_ipv4_packet_table_add_with_set_malformed_outer_ipv4_packet requires 5 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv4_packet_table_add_with_set_malformed_outer_ipv4_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'validate_outer_ipv4_packet_table_add_with_set_valid_outer_ipv4_packet':
  if len(args) != 4:
    print('validate_outer_ipv4_packet_table_add_with_set_valid_outer_ipv4_packet requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv4_packet_table_add_with_set_valid_outer_ipv4_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_add_with_fabric_multicast_rewrite':
  if len(args) != 4:
    print('tunnel_rewrite_table_add_with_fabric_multicast_rewrite requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_add_with_fabric_multicast_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_add_with_cpu_rx_rewrite':
  if len(args) != 3:
    print('tunnel_rewrite_table_add_with_cpu_rx_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_add_with_cpu_rx_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_table_add_with_set_tunnel_rewrite_details':
  if len(args) != 4:
    print('tunnel_rewrite_table_add_with_set_tunnel_rewrite_details requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_add_with_set_tunnel_rewrite_details(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_add_with_set_mpls_rewrite_push1':
  if len(args) != 4:
    print('tunnel_rewrite_table_add_with_set_mpls_rewrite_push1 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_add_with_set_mpls_rewrite_push1(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_add_with_set_mpls_rewrite_push3':
  if len(args) != 4:
    print('tunnel_rewrite_table_add_with_set_mpls_rewrite_push3 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_add_with_set_mpls_rewrite_push3(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_add_with_set_mpls_rewrite_push2':
  if len(args) != 4:
    print('tunnel_rewrite_table_add_with_set_mpls_rewrite_push2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_add_with_set_mpls_rewrite_push2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_add_with_nop':
  if len(args) != 3:
    print('tunnel_rewrite_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_table_add_with_fabric_unicast_rewrite':
  if len(args) != 3:
    print('tunnel_rewrite_table_add_with_fabric_unicast_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_add_with_fabric_unicast_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_ipv6_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_ipv6_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_ipv6_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_add_with_terminate_inner_ipv4_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_add_with_terminate_inner_ipv4_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_add_with_terminate_inner_ipv4_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_non_ip_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_non_ip_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_non_ip_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_add_with_terminate_inner_ipv6_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_add_with_terminate_inner_ipv6_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_add_with_terminate_inner_ipv6_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_ipv4_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_ipv4_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_add_with_terminate_inner_ethernet_ipv4_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_lag_table_add_with_set_egress_ifindex':
  if len(args) != 4:
    print('egress_lag_table_add_with_set_egress_ifindex requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_lag_table_add_with_set_egress_ifindex(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_urpf_lpm_table_add_with_ipv6_urpf_hit':
  if len(args) != 4:
    print('ipv6_urpf_lpm_table_add_with_ipv6_urpf_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_lpm_table_add_with_ipv6_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_urpf_lpm_table_add_with_urpf_miss':
  if len(args) != 3:
    print('ipv6_urpf_lpm_table_add_with_urpf_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_lpm_table_add_with_urpf_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_table_add_with_set_unicast_and_ipv6_src_is_link_local':
  if len(args) != 4:
    print('validate_packet_table_add_with_set_unicast_and_ipv6_src_is_link_local requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_add_with_set_unicast_and_ipv6_src_is_link_local(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_packet_table_add_with_set_unicast':
  if len(args) != 4:
    print('validate_packet_table_add_with_set_unicast requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_add_with_set_unicast(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_packet_table_add_with_set_malformed_packet':
  if len(args) != 5:
    print('validate_packet_table_add_with_set_malformed_packet requires 5 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_add_with_set_malformed_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'validate_packet_table_add_with_set_multicast_and_ipv6_src_is_link_local':
  if len(args) != 4:
    print('validate_packet_table_add_with_set_multicast_and_ipv6_src_is_link_local requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_add_with_set_multicast_and_ipv6_src_is_link_local(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_packet_table_add_with_set_broadcast':
  if len(args) != 4:
    print('validate_packet_table_add_with_set_broadcast requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_add_with_set_broadcast(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_packet_table_add_with_nop':
  if len(args) != 4:
    print('validate_packet_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_packet_table_add_with_set_multicast':
  if len(args) != 4:
    print('validate_packet_table_add_with_set_multicast requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_add_with_set_multicast(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i12':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i12 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i12(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i13':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i13 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i13(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i10':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i10 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i10(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i11':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i11 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i11(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i14':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i14 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i14(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i15':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i15 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i15(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i8':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i8 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i8(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i9':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i9 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i9(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i0':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i0 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i0(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i1':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i2':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i3':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i4':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i5':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i5 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i5(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i6':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_add_with_int_set_header_0407_i7':
  if len(args) != 3:
    print('int_inst_0407_table_add_with_int_set_header_0407_i7 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_add_with_int_set_header_0407_i7(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rmac_table_add_with_rmac_hit':
  if len(args) != 3:
    print('rmac_table_add_with_rmac_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.rmac_table_add_with_rmac_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rmac_table_add_with_rmac_miss':
  if len(args) != 3:
    print('rmac_table_add_with_rmac_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.rmac_table_add_with_rmac_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_ipv4_icmp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_ipv4_icmp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_ipv4_icmp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_ipv4_unknown_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_ipv4_unknown_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_ipv4_unknown_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_non_ip_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_non_ip_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_non_ip_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_ipv6_tcp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_ipv6_tcp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_ipv6_tcp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_ipv6_unknown_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_ipv6_unknown_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_ipv6_unknown_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_ipv4_tcp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_ipv4_tcp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_ipv4_tcp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_ipv4_udp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_ipv4_udp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_ipv4_udp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_ipv6_icmp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_ipv6_icmp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_ipv6_icmp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_add_with_inner_ipv6_udp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_add_with_inner_ipv6_udp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_add_with_inner_ipv6_udp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'replica_type_table_add_with_set_replica_copy_bridged':
  if len(args) != 4:
    print('replica_type_table_add_with_set_replica_copy_bridged requires 4 args')
    sys.exit(1)
  pp.pprint(client.replica_type_table_add_with_set_replica_copy_bridged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'replica_type_table_add_with_nop':
  if len(args) != 4:
    print('replica_type_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.replica_type_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_add_with_rewrite_ipv6_unicast_mac':
  if len(args) != 4:
    print('mac_rewrite_table_add_with_rewrite_ipv6_unicast_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_add_with_rewrite_ipv6_unicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_add_with_rewrite_ipv4_multicast_mac':
  if len(args) != 4:
    print('mac_rewrite_table_add_with_rewrite_ipv4_multicast_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_add_with_rewrite_ipv4_multicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_add_with_rewrite_mpls_mac':
  if len(args) != 4:
    print('mac_rewrite_table_add_with_rewrite_mpls_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_add_with_rewrite_mpls_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_add_with_rewrite_ipv6_multicast_mac':
  if len(args) != 4:
    print('mac_rewrite_table_add_with_rewrite_ipv6_multicast_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_add_with_rewrite_ipv6_multicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_add_with_rewrite_ipv4_unicast_mac':
  if len(args) != 4:
    print('mac_rewrite_table_add_with_rewrite_ipv4_unicast_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_add_with_rewrite_ipv4_unicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_add_with_nop':
  if len(args) != 3:
    print('mac_rewrite_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mirror_table_add_with_nop':
  if len(args) != 3:
    print('mirror_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.mirror_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mirror_table_add_with_set_mirror_nhop':
  if len(args) != 4:
    print('mirror_table_add_with_set_mirror_nhop requires 4 args')
    sys.exit(1)
  pp.pprint(client.mirror_table_add_with_set_mirror_nhop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mirror_table_add_with_set_mirror_bd':
  if len(args) != 4:
    print('mirror_table_add_with_set_mirror_bd requires 4 args')
    sys.exit(1)
  pp.pprint(client.mirror_table_add_with_set_mirror_bd(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_ipv4':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_ipv6':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_genv_inner_non_ip':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_genv_inner_non_ip requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_genv_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_ipv4':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_ipv6':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_non_ip':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_non_ip requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_vxlan_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv4_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_non_ip':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_non_ip requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_nvgre_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_non_ip_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_ip_inner_ipv4':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_ip_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_ip_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv6_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ethernet_ipv6_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_mpls_inner_ipv4_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_ip_inner_ipv6':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_ip_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_ip_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_genv_inner_ipv6':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_genv_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_genv_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_add_with_decap_genv_inner_ipv4':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_add_with_decap_genv_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_add_with_decap_genv_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_table_add_with_drop_packet':
  if len(args) != 4:
    print('system_acl_table_add_with_drop_packet requires 4 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_add_with_drop_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'system_acl_table_add_with_redirect_to_cpu':
  if len(args) != 5:
    print('system_acl_table_add_with_redirect_to_cpu requires 5 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_add_with_redirect_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'system_acl_table_add_with_congestion_mirror_set':
  if len(args) != 4:
    print('system_acl_table_add_with_congestion_mirror_set requires 4 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_add_with_congestion_mirror_set(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'system_acl_table_add_with_negative_mirror':
  if len(args) != 4:
    print('system_acl_table_add_with_negative_mirror requires 4 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_add_with_negative_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'system_acl_table_add_with_drop_packet_with_reason':
  if len(args) != 5:
    print('system_acl_table_add_with_drop_packet_with_reason requires 5 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_add_with_drop_packet_with_reason(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'system_acl_table_add_with_copy_to_cpu':
  if len(args) != 5:
    print('system_acl_table_add_with_copy_to_cpu requires 5 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_add_with_copy_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'system_acl_table_add_with_nop':
  if len(args) != 4:
    print('system_acl_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_dmac_rewrite_table_add_with_nop':
  if len(args) != 3:
    print('tunnel_dmac_rewrite_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dmac_rewrite_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_dmac_rewrite_table_add_with_rewrite_tunnel_dmac':
  if len(args) != 4:
    print('tunnel_dmac_rewrite_table_add_with_rewrite_tunnel_dmac requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dmac_rewrite_table_add_with_rewrite_tunnel_dmac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'compute_ipv6_hashes_table_add_with_compute_lkp_ipv6_hash':
  if len(args) != 3:
    print('compute_ipv6_hashes_table_add_with_compute_lkp_ipv6_hash requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_ipv6_hashes_table_add_with_compute_lkp_ipv6_hash(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bd_flood_table_add_with_nop':
  if len(args) != 3:
    print('bd_flood_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.bd_flood_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bd_flood_table_add_with_set_bd_flood_mc_index':
  if len(args) != 4:
    print('bd_flood_table_add_with_set_bd_flood_mc_index requires 4 args')
    sys.exit(1)
  pp.pprint(client.bd_flood_table_add_with_set_bd_flood_mc_index(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_vni_table_add_with_nop':
  if len(args) != 3:
    print('egress_vni_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vni_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vni_table_add_with_set_egress_tunnel_vni':
  if len(args) != 4:
    print('egress_vni_table_add_with_set_egress_tunnel_vni requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_vni_table_add_with_set_egress_tunnel_vni(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_add_with_terminate_tunnel_inner_non_ip':
  if len(args) != 4:
    print('tunnel_table_add_with_terminate_tunnel_inner_non_ip requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_add_with_terminate_tunnel_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_add_with_terminate_tunnel_inner_ethernet_ipv6':
  if len(args) != 4:
    print('tunnel_table_add_with_terminate_tunnel_inner_ethernet_ipv6 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_add_with_terminate_tunnel_inner_ethernet_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_add_with_terminate_tunnel_inner_ethernet_ipv4':
  if len(args) != 4:
    print('tunnel_table_add_with_terminate_tunnel_inner_ethernet_ipv4 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_add_with_terminate_tunnel_inner_ethernet_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_add_with_terminate_tunnel_inner_ipv4':
  if len(args) != 4:
    print('tunnel_table_add_with_terminate_tunnel_inner_ipv4 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_add_with_terminate_tunnel_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_add_with_terminate_tunnel_inner_ipv6':
  if len(args) != 4:
    print('tunnel_table_add_with_terminate_tunnel_inner_ipv6 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_add_with_terminate_tunnel_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_add_with_nop':
  if len(args) != 3:
    print('tunnel_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'acl_stats_table_add_with_acl_stats_update':
  if len(args) != 3:
    print('acl_stats_table_add_with_acl_stats_update requires 3 args')
    sys.exit(1)
  pp.pprint(client.acl_stats_table_add_with_acl_stats_update(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_urpf_lpm_table_add_with_ipv4_urpf_hit':
  if len(args) != 4:
    print('ipv4_urpf_lpm_table_add_with_ipv4_urpf_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_lpm_table_add_with_ipv4_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_urpf_lpm_table_add_with_urpf_miss':
  if len(args) != 3:
    print('ipv4_urpf_lpm_table_add_with_urpf_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_lpm_table_add_with_urpf_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_1215_table_add_with_nop':
  if len(args) != 3:
    print('int_inst_1215_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_1215_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mpls_table_add_with_forward_mpls':
  if len(args) != 4:
    print('mpls_table_add_with_forward_mpls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_add_with_forward_mpls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_add_with_terminate_vpls':
  if len(args) != 4:
    print('mpls_table_add_with_terminate_vpls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_add_with_terminate_vpls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_add_with_terminate_eompls':
  if len(args) != 4:
    print('mpls_table_add_with_terminate_eompls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_add_with_terminate_eompls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_add_with_terminate_ipv4_over_mpls':
  if len(args) != 4:
    print('mpls_table_add_with_terminate_ipv4_over_mpls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_add_with_terminate_ipv4_over_mpls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_add_with_terminate_pw':
  if len(args) != 4:
    print('mpls_table_add_with_terminate_pw requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_add_with_terminate_pw(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_add_with_terminate_ipv6_over_mpls':
  if len(args) != 4:
    print('mpls_table_add_with_terminate_ipv6_over_mpls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_add_with_terminate_ipv6_over_mpls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_dest_vtep_table_add_with_set_tunnel_termination_flag':
  if len(args) != 3:
    print('ipv4_dest_vtep_table_add_with_set_tunnel_termination_flag requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_dest_vtep_table_add_with_set_tunnel_termination_flag(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_dest_vtep_table_add_with_nop':
  if len(args) != 3:
    print('ipv4_dest_vtep_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_dest_vtep_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_src_lkp_table_add_with_set_ingress_ifindex_properties':
  if len(args) != 3:
    print('fabric_ingress_src_lkp_table_add_with_set_ingress_ifindex_properties requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_src_lkp_table_add_with_set_ingress_ifindex_properties(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_src_lkp_table_add_with_nop':
  if len(args) != 3:
    print('fabric_ingress_src_lkp_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_src_lkp_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_insert_table_add_with_int_transit':
  if len(args) != 5:
    print('int_insert_table_add_with_int_transit requires 5 args')
    sys.exit(1)
  pp.pprint(client.int_insert_table_add_with_int_transit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'int_insert_table_add_with_int_reset':
  if len(args) != 4:
    print('int_insert_table_add_with_int_reset requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_insert_table_add_with_int_reset(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_smac_rewrite_table_add_with_nop':
  if len(args) != 3:
    print('tunnel_smac_rewrite_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_smac_rewrite_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_smac_rewrite_table_add_with_rewrite_tunnel_smac':
  if len(args) != 4:
    print('tunnel_smac_rewrite_table_add_with_rewrite_tunnel_smac requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_smac_rewrite_table_add_with_rewrite_tunnel_smac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_urpf_table_add_with_ipv4_urpf_hit':
  if len(args) != 4:
    print('ipv4_urpf_table_add_with_ipv4_urpf_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_table_add_with_ipv4_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_urpf_table_add_with_on_miss':
  if len(args) != 3:
    print('ipv4_urpf_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_meta_header_update_table_add_with_int_update_total_hop_cnt':
  if len(args) != 4:
    print('int_meta_header_update_table_add_with_int_update_total_hop_cnt requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_meta_header_update_table_add_with_int_update_total_hop_cnt(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_meta_header_update_table_add_with_int_set_e_bit':
  if len(args) != 4:
    print('int_meta_header_update_table_add_with_int_set_e_bit requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_meta_header_update_table_add_with_int_set_e_bit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipsg_permit_special_table_add_with_ipsg_miss':
  if len(args) != 4:
    print('ipsg_permit_special_table_add_with_ipsg_miss requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipsg_permit_special_table_add_with_ipsg_miss(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_racl_table_add_with_racl_redirect_nexthop':
  if len(args) != 5:
    print('ipv4_racl_table_add_with_racl_redirect_nexthop requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_add_with_racl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv4_racl_table_add_with_racl_deny':
  if len(args) != 5:
    print('ipv4_racl_table_add_with_racl_deny requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_add_with_racl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv4_racl_table_add_with_racl_redirect_ecmp':
  if len(args) != 5:
    print('ipv4_racl_table_add_with_racl_redirect_ecmp requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_add_with_racl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv4_racl_table_add_with_nop':
  if len(args) != 4:
    print('ipv4_racl_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_racl_table_add_with_racl_log':
  if len(args) != 5:
    print('ipv4_racl_table_add_with_racl_log requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_add_with_racl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ipv4_racl_table_add_with_racl_permit':
  if len(args) != 5:
    print('ipv4_racl_table_add_with_racl_permit requires 5 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_add_with_racl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ip_acl_table_add_with_acl_dod_en':
  if len(args) != 4:
    print('ip_acl_table_add_with_acl_dod_en requires 4 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_add_with_acl_dod_en(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ip_acl_table_add_with_acl_log':
  if len(args) != 5:
    print('ip_acl_table_add_with_acl_log requires 5 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_add_with_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ip_acl_table_add_with_acl_mirror':
  if len(args) != 5:
    print('ip_acl_table_add_with_acl_mirror requires 5 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_add_with_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ip_acl_table_add_with_acl_deny':
  if len(args) != 5:
    print('ip_acl_table_add_with_acl_deny requires 5 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_add_with_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ip_acl_table_add_with_acl_permit':
  if len(args) != 5:
    print('ip_acl_table_add_with_acl_permit requires 5 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_add_with_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ip_acl_table_add_with_acl_redirect_nexthop':
  if len(args) != 5:
    print('ip_acl_table_add_with_acl_redirect_nexthop requires 5 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_add_with_acl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ip_acl_table_add_with_acl_redirect_ecmp':
  if len(args) != 5:
    print('ip_acl_table_add_with_acl_redirect_ecmp requires 5 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_add_with_acl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'ip_acl_table_add_with_nop':
  if len(args) != 4:
    print('ip_acl_table_add_with_nop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'outer_rmac_table_add_with_on_miss':
  if len(args) != 3:
    print('outer_rmac_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.outer_rmac_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'outer_rmac_table_add_with_outer_rmac_hit':
  if len(args) != 3:
    print('outer_rmac_table_add_with_outer_rmac_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.outer_rmac_table_add_with_outer_rmac_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0811_table_add_with_nop':
  if len(args) != 3:
    print('int_inst_0811_table_add_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0811_table_add_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipsg_table_add_with_on_miss':
  if len(args) != 3:
    print('ipsg_table_add_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipsg_table_add_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'spanning_tree_table_modify_with_set_stp_state':
  if len(args) != 4:
    print('spanning_tree_table_modify_with_set_stp_state requires 4 args')
    sys.exit(1)
  pp.pprint(client.spanning_tree_table_modify_with_set_stp_state(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_bos_table_modify_with_int_set_header_0_bos':
  if len(args) != 3:
    print('int_bos_table_modify_with_int_set_header_0_bos requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_int_set_header_0_bos(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_modify_with_int_set_header_6_bos':
  if len(args) != 3:
    print('int_bos_table_modify_with_int_set_header_6_bos requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_int_set_header_6_bos(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_modify_with_int_set_header_3_bos':
  if len(args) != 3:
    print('int_bos_table_modify_with_int_set_header_3_bos requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_int_set_header_3_bos(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_modify_with_int_set_header_4_bos':
  if len(args) != 3:
    print('int_bos_table_modify_with_int_set_header_4_bos requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_int_set_header_4_bos(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_modify_with_int_set_header_1_bos':
  if len(args) != 3:
    print('int_bos_table_modify_with_int_set_header_1_bos requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_int_set_header_1_bos(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_modify_with_int_set_header_7_bos':
  if len(args) != 3:
    print('int_bos_table_modify_with_int_set_header_7_bos requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_int_set_header_7_bos(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_modify_with_int_set_header_2_bos':
  if len(args) != 3:
    print('int_bos_table_modify_with_int_set_header_2_bos requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_int_set_header_2_bos(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_modify_with_nop':
  if len(args) != 3:
    print('int_bos_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_modify_with_int_set_header_5_bos':
  if len(args) != 3:
    print('int_bos_table_modify_with_int_set_header_5_bos requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_modify_with_int_set_header_5_bos(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_dst_rewrite_table_modify_with_rewrite_tunnel_ipv6_dst':
  if len(args) != 4:
    print('tunnel_dst_rewrite_table_modify_with_rewrite_tunnel_ipv6_dst requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_table_modify_with_rewrite_tunnel_ipv6_dst(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_dst_rewrite_table_modify_with_rewrite_tunnel_ipv4_dst':
  if len(args) != 4:
    print('tunnel_dst_rewrite_table_modify_with_rewrite_tunnel_ipv4_dst requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_table_modify_with_rewrite_tunnel_ipv4_dst(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_dst_rewrite_table_modify_with_nop':
  if len(args) != 3:
    print('tunnel_dst_rewrite_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_double_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_double_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_qinq_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_qinq_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_qinq_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_untagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_untagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_untagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_malformed_outer_ethernet_packet':
  if len(args) != 4:
    print('validate_outer_ethernet_table_modify_with_malformed_outer_ethernet_packet requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_malformed_outer_ethernet_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_qinq_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_qinq_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_qinq_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_untagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_untagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_untagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_double_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_double_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_single_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_single_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_multicast_packet_single_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_untagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_untagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_untagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_qinq_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_qinq_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_qinq_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_single_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_single_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_single_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_single_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_single_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_unicast_packet_single_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_double_tagged':
  if len(args) != 3:
    print('validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_double_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_modify_with_set_valid_outer_broadcast_packet_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'qos_table_modify_with_apply_tc_marking':
  if len(args) != 4:
    print('qos_table_modify_with_apply_tc_marking requires 4 args')
    sys.exit(1)
  pp.pprint(client.qos_table_modify_with_apply_tc_marking(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'qos_table_modify_with_apply_cos_marking':
  if len(args) != 4:
    print('qos_table_modify_with_apply_cos_marking requires 4 args')
    sys.exit(1)
  pp.pprint(client.qos_table_modify_with_apply_cos_marking(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'qos_table_modify_with_nop':
  if len(args) != 3:
    print('qos_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.qos_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'qos_table_modify_with_apply_dscp_marking':
  if len(args) != 4:
    print('qos_table_modify_with_apply_dscp_marking requires 4 args')
    sys.exit(1)
  pp.pprint(client.qos_table_modify_with_apply_dscp_marking(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_fib_lpm_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipv6_fib_lpm_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_lpm_table_modify_with_fib_hit_ecmp':
  if len(args) != 4:
    print('ipv6_fib_lpm_table_modify_with_fib_hit_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_table_modify_with_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_fib_lpm_table_modify_with_fib_hit_nexthop':
  if len(args) != 4:
    print('ipv6_fib_lpm_table_modify_with_fib_hit_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_table_modify_with_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_acl_table_modify_with_egress_mirror':
  if len(args) != 4:
    print('egress_acl_table_modify_with_egress_mirror requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_modify_with_egress_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_acl_table_modify_with_nop':
  if len(args) != 3:
    print('egress_acl_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_acl_table_modify_with_egress_redirect_to_cpu':
  if len(args) != 4:
    print('egress_acl_table_modify_with_egress_redirect_to_cpu requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_modify_with_egress_redirect_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_acl_table_modify_with_egress_mirror_drop':
  if len(args) != 4:
    print('egress_acl_table_modify_with_egress_mirror_drop requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_modify_with_egress_mirror_drop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_modify_with_set_mpls_swap_push_rewrite_l3':
  if len(args) != 4:
    print('rewrite_table_modify_with_set_mpls_swap_push_rewrite_l3 requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_set_mpls_swap_push_rewrite_l3(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_modify_with_set_mpls_swap_push_rewrite_l2':
  if len(args) != 4:
    print('rewrite_table_modify_with_set_mpls_swap_push_rewrite_l2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_set_mpls_swap_push_rewrite_l2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_modify_with_set_mpls_push_rewrite_l2':
  if len(args) != 4:
    print('rewrite_table_modify_with_set_mpls_push_rewrite_l2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_set_mpls_push_rewrite_l2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_modify_with_set_mpls_push_rewrite_l3':
  if len(args) != 4:
    print('rewrite_table_modify_with_set_mpls_push_rewrite_l3 requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_set_mpls_push_rewrite_l3(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_modify_with_set_l3_rewrite':
  if len(args) != 4:
    print('rewrite_table_modify_with_set_l3_rewrite requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_set_l3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_modify_with_set_l2_rewrite':
  if len(args) != 3:
    print('rewrite_table_modify_with_set_l2_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_set_l2_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_table_modify_with_nop':
  if len(args) != 3:
    print('rewrite_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_table_modify_with_set_l2_rewrite_with_tunnel':
  if len(args) != 4:
    print('rewrite_table_modify_with_set_l2_rewrite_with_tunnel requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_set_l2_rewrite_with_tunnel(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rewrite_table_modify_with_set_l3_rewrite_with_tunnel':
  if len(args) != 4:
    print('rewrite_table_modify_with_set_l3_rewrite_with_tunnel requires 4 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_modify_with_set_l3_rewrite_with_tunnel(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_acl_table_modify_with_acl_log':
  if len(args) != 4:
    print('ipv6_acl_table_modify_with_acl_log requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_modify_with_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_acl_table_modify_with_acl_mirror':
  if len(args) != 4:
    print('ipv6_acl_table_modify_with_acl_mirror requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_modify_with_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_acl_table_modify_with_acl_deny':
  if len(args) != 4:
    print('ipv6_acl_table_modify_with_acl_deny requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_modify_with_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_acl_table_modify_with_acl_permit':
  if len(args) != 4:
    print('ipv6_acl_table_modify_with_acl_permit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_modify_with_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_acl_table_modify_with_acl_redirect_nexthop':
  if len(args) != 4:
    print('ipv6_acl_table_modify_with_acl_redirect_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_modify_with_acl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_acl_table_modify_with_acl_redirect_ecmp':
  if len(args) != 4:
    print('ipv6_acl_table_modify_with_acl_redirect_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_modify_with_acl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_acl_table_modify_with_nop':
  if len(args) != 3:
    print('ipv6_acl_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fwd_result_table_modify_with_set_fib_redirect_action':
  if len(args) != 3:
    print('fwd_result_table_modify_with_set_fib_redirect_action requires 3 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_modify_with_set_fib_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fwd_result_table_modify_with_set_racl_redirect_action':
  if len(args) != 3:
    print('fwd_result_table_modify_with_set_racl_redirect_action requires 3 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_modify_with_set_racl_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fwd_result_table_modify_with_set_cpu_redirect_action':
  if len(args) != 3:
    print('fwd_result_table_modify_with_set_cpu_redirect_action requires 3 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_modify_with_set_cpu_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fwd_result_table_modify_with_set_l2_redirect_action':
  if len(args) != 3:
    print('fwd_result_table_modify_with_set_l2_redirect_action requires 3 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_modify_with_set_l2_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fwd_result_table_modify_with_set_acl_redirect_action':
  if len(args) != 3:
    print('fwd_result_table_modify_with_set_acl_redirect_action requires 3 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_modify_with_set_acl_redirect_action(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fwd_result_table_modify_with_nop':
  if len(args) != 3:
    print('fwd_result_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'learn_notify_table_modify_with_nop':
  if len(args) != 3:
    print('learn_notify_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.learn_notify_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'learn_notify_table_modify_with_generate_learn_notify':
  if len(args) != 3:
    print('learn_notify_table_modify_with_generate_learn_notify requires 3 args')
    sys.exit(1)
  pp.pprint(client.learn_notify_table_modify_with_generate_learn_notify(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_acl_table_modify_with_acl_log':
  if len(args) != 4:
    print('mac_acl_table_modify_with_acl_log requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_modify_with_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_acl_table_modify_with_acl_deny':
  if len(args) != 4:
    print('mac_acl_table_modify_with_acl_deny requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_modify_with_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_acl_table_modify_with_acl_mirror':
  if len(args) != 4:
    print('mac_acl_table_modify_with_acl_mirror requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_modify_with_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_acl_table_modify_with_nop':
  if len(args) != 3:
    print('mac_acl_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_acl_table_modify_with_acl_permit':
  if len(args) != 4:
    print('mac_acl_table_modify_with_acl_permit requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_modify_with_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'smac_table_modify_with_smac_hit':
  if len(args) != 4:
    print('smac_table_modify_with_smac_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.smac_table_modify_with_smac_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'smac_table_modify_with_nop':
  if len(args) != 3:
    print('smac_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.smac_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'smac_table_modify_with_smac_miss':
  if len(args) != 3:
    print('smac_table_modify_with_smac_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.smac_table_modify_with_smac_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_outer_encap_table_modify_with_nop':
  if len(args) != 3:
    print('int_outer_encap_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_outer_encap_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_outer_encap_table_modify_with_int_update_vxlan_gpe_ipv4':
  if len(args) != 3:
    print('int_outer_encap_table_modify_with_int_update_vxlan_gpe_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_outer_encap_table_modify_with_int_update_vxlan_gpe_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_src_vtep_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipv6_src_vtep_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_src_vtep_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_src_vtep_table_modify_with_src_vtep_hit':
  if len(args) != 4:
    print('ipv6_src_vtep_table_modify_with_src_vtep_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_src_vtep_table_modify_with_src_vtep_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_filter_table_modify_with_set_egress_filter_drop':
  if len(args) != 3:
    print('egress_filter_table_modify_with_set_egress_filter_drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_filter_table_modify_with_set_egress_filter_drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'vlan_decap_table_modify_with_remove_vlan_double_tagged':
  if len(args) != 3:
    print('vlan_decap_table_modify_with_remove_vlan_double_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_table_modify_with_remove_vlan_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'vlan_decap_table_modify_with_nop':
  if len(args) != 3:
    print('vlan_decap_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'vlan_decap_table_modify_with_remove_vlan_single_tagged':
  if len(args) != 3:
    print('vlan_decap_table_modify_with_remove_vlan_single_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_table_modify_with_remove_vlan_single_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rid_table_modify_with_outer_replica_from_rid_with_nexthop':
  if len(args) != 4:
    print('rid_table_modify_with_outer_replica_from_rid_with_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.rid_table_modify_with_outer_replica_from_rid_with_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rid_table_modify_with_nop':
  if len(args) != 3:
    print('rid_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.rid_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rid_table_modify_with_outer_replica_from_rid':
  if len(args) != 4:
    print('rid_table_modify_with_outer_replica_from_rid requires 4 args')
    sys.exit(1)
  pp.pprint(client.rid_table_modify_with_outer_replica_from_rid(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rid_table_modify_with_inner_replica_from_rid':
  if len(args) != 4:
    print('rid_table_modify_with_inner_replica_from_rid requires 4 args')
    sys.exit(1)
  pp.pprint(client.rid_table_modify_with_inner_replica_from_rid(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'rid_table_modify_with_inner_replica_from_rid_with_nexthop':
  if len(args) != 4:
    print('rid_table_modify_with_inner_replica_from_rid_with_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.rid_table_modify_with_inner_replica_from_rid_with_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_fib_lpm_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipv4_fib_lpm_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_lpm_table_modify_with_fib_hit_ecmp':
  if len(args) != 4:
    print('ipv4_fib_lpm_table_modify_with_fib_hit_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_table_modify_with_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_fib_lpm_table_modify_with_fib_hit_nexthop':
  if len(args) != 4:
    print('ipv4_fib_lpm_table_modify_with_fib_hit_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_table_modify_with_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_port_mapping_table_modify_with_egress_port_type_cpu':
  if len(args) != 3:
    print('egress_port_mapping_table_modify_with_egress_port_type_cpu requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_table_modify_with_egress_port_type_cpu(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_port_mapping_table_modify_with_egress_port_type_normal':
  if len(args) != 3:
    print('egress_port_mapping_table_modify_with_egress_port_type_normal requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_table_modify_with_egress_port_type_normal(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_port_mapping_table_modify_with_egress_port_type_fabric':
  if len(args) != 3:
    print('egress_port_mapping_table_modify_with_egress_port_type_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_table_modify_with_egress_port_type_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_modify_with_terminate_fabric_multicast_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_modify_with_terminate_fabric_multicast_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_modify_with_terminate_fabric_multicast_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_modify_with_switch_fabric_multicast_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_modify_with_switch_fabric_multicast_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_modify_with_switch_fabric_multicast_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_modify_with_terminate_fabric_unicast_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_modify_with_terminate_fabric_unicast_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_modify_with_terminate_fabric_unicast_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_modify_with_switch_fabric_unicast_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_modify_with_switch_fabric_unicast_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_modify_with_switch_fabric_unicast_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_modify_with_nop':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_modify_with_terminate_cpu_packet':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_modify_with_terminate_cpu_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_modify_with_terminate_cpu_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_other_hashes_table_modify_with_computed_one_hash':
  if len(args) != 3:
    print('compute_other_hashes_table_modify_with_computed_one_hash requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_other_hashes_table_modify_with_computed_one_hash(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_other_hashes_table_modify_with_computed_two_hashes':
  if len(args) != 3:
    print('compute_other_hashes_table_modify_with_computed_two_hashes requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_other_hashes_table_modify_with_computed_two_hashes(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_bd_map_table_modify_with_set_egress_bd_properties':
  if len(args) != 3:
    print('egress_bd_map_table_modify_with_set_egress_bd_properties requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_bd_map_table_modify_with_set_egress_bd_properties(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_bd_map_table_modify_with_nop':
  if len(args) != 3:
    print('egress_bd_map_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_bd_map_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_src_rewrite_table_modify_with_rewrite_tunnel_ipv4_src':
  if len(args) != 4:
    print('tunnel_src_rewrite_table_modify_with_rewrite_tunnel_ipv4_src requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_table_modify_with_rewrite_tunnel_ipv4_src(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_src_rewrite_table_modify_with_nop':
  if len(args) != 3:
    print('tunnel_src_rewrite_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_src_rewrite_table_modify_with_rewrite_tunnel_ipv6_src':
  if len(args) != 4:
    print('tunnel_src_rewrite_table_modify_with_rewrite_tunnel_ipv6_src requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_table_modify_with_rewrite_tunnel_ipv6_src(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_fib_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipv4_fib_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_table_modify_with_fib_hit_ecmp':
  if len(args) != 4:
    print('ipv4_fib_table_modify_with_fib_hit_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_table_modify_with_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_fib_table_modify_with_fib_hit_nexthop':
  if len(args) != 4:
    print('ipv4_fib_table_modify_with_fib_hit_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_table_modify_with_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ingress_port_mapping_table_modify_with_set_ifindex':
  if len(args) != 4:
    print('ingress_port_mapping_table_modify_with_set_ifindex requires 4 args')
    sys.exit(1)
  pp.pprint(client.ingress_port_mapping_table_modify_with_set_ifindex(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'compute_non_ip_hashes_table_modify_with_compute_lkp_non_ip_hash':
  if len(args) != 3:
    print('compute_non_ip_hashes_table_modify_with_compute_lkp_non_ip_hash requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_non_ip_hashes_table_modify_with_compute_lkp_non_ip_hash(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_src_vtep_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipv4_src_vtep_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_src_vtep_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_src_vtep_table_modify_with_src_vtep_hit':
  if len(args) != 4:
    print('ipv4_src_vtep_table_modify_with_src_vtep_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_src_vtep_table_modify_with_src_vtep_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_dest_vtep_table_modify_with_set_tunnel_termination_flag':
  if len(args) != 3:
    print('ipv6_dest_vtep_table_modify_with_set_tunnel_termination_flag requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_dest_vtep_table_modify_with_set_tunnel_termination_flag(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_dest_vtep_table_modify_with_nop':
  if len(args) != 3:
    print('ipv6_dest_vtep_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_dest_vtep_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ingress_bd_stats_table_modify_with_update_ingress_bd_stats':
  if len(args) != 3:
    print('ingress_bd_stats_table_modify_with_update_ingress_bd_stats requires 3 args')
    sys.exit(1)
  pp.pprint(client.ingress_bd_stats_table_modify_with_update_ingress_bd_stats(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_untagged':
  if len(args) != 3:
    print('egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_untagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_untagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_tagged':
  if len(args) != 4:
    print('egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_double_tagged':
  if len(args) != 4:
    print('egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_double_tagged requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_table_modify_with_set_egress_packet_vlan_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_mpls_packet_table_modify_with_set_valid_mpls_label2':
  if len(args) != 3:
    print('validate_mpls_packet_table_modify_with_set_valid_mpls_label2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_table_modify_with_set_valid_mpls_label2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_mpls_packet_table_modify_with_set_valid_mpls_label3':
  if len(args) != 3:
    print('validate_mpls_packet_table_modify_with_set_valid_mpls_label3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_table_modify_with_set_valid_mpls_label3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_mpls_packet_table_modify_with_set_valid_mpls_label1':
  if len(args) != 3:
    print('validate_mpls_packet_table_modify_with_set_valid_mpls_label1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_table_modify_with_set_valid_mpls_label1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipv6_fib_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_table_modify_with_fib_hit_ecmp':
  if len(args) != 4:
    print('ipv6_fib_table_modify_with_fib_hit_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_table_modify_with_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_fib_table_modify_with_fib_hit_nexthop':
  if len(args) != 4:
    print('ipv6_fib_table_modify_with_fib_hit_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_table_modify_with_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ipv6_packet_table_modify_with_set_malformed_outer_ipv6_packet':
  if len(args) != 4:
    print('validate_outer_ipv6_packet_table_modify_with_set_malformed_outer_ipv6_packet requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv6_packet_table_modify_with_set_malformed_outer_ipv6_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ipv6_packet_table_modify_with_set_valid_outer_ipv6_packet':
  if len(args) != 3:
    print('validate_outer_ipv6_packet_table_modify_with_set_valid_outer_ipv6_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv6_packet_table_modify_with_set_valid_outer_ipv6_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv6_ipv4_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv6_ipv4_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv6_ipv4_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv4_genv_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv4_genv_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv4_genv_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv4_gre_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv4_gre_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv4_gre_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv6_vxlan_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv6_vxlan_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv6_vxlan_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_mpls_ip_push1_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_mpls_ip_push1_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_mpls_ip_push1_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push3_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv6_gre_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv6_gre_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv6_gre_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push1_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push1_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push1_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv4_ipv4_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv4_ipv4_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv4_ipv4_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv4_nvgre_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv4_nvgre_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv4_nvgre_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv6_erspan_t3_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv6_erspan_t3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv6_erspan_t3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push2_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push2_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_mpls_ethernet_push2_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv6_nvgre_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv6_nvgre_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv6_nvgre_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_nop':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_mpls_ip_push3_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_mpls_ip_push3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_mpls_ip_push3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv4_ipv6_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv4_ipv6_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv4_ipv6_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv6_ipv6_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv6_ipv6_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv6_ipv6_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv4_vxlan_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv4_vxlan_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv4_vxlan_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv6_genv_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv6_genv_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv6_genv_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_ipv4_erspan_t3_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_ipv4_erspan_t3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_ipv4_erspan_t3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_fabric_rewrite':
  if len(args) != 4:
    print('tunnel_encap_process_outer_table_modify_with_fabric_rewrite requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_fabric_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_encap_process_outer_table_modify_with_mpls_ip_push2_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_modify_with_mpls_ip_push2_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_modify_with_mpls_ip_push2_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'storm_control_table_modify_with_nop':
  if len(args) != 3:
    print('storm_control_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.storm_control_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'storm_control_table_modify_with_set_storm_control_meter':
  if len(args) != 4:
    print('storm_control_table_modify_with_set_storm_control_meter requires 4 args')
    sys.exit(1)
  pp.pprint(client.storm_control_table_modify_with_set_storm_control_meter(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_decap_process_inner_table_modify_with_decap_inner_udp':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_modify_with_decap_inner_udp requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_modify_with_decap_inner_udp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_inner_table_modify_with_decap_inner_icmp':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_modify_with_decap_inner_icmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_modify_with_decap_inner_icmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_inner_table_modify_with_decap_inner_unknown':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_modify_with_decap_inner_unknown requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_modify_with_decap_inner_unknown(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_inner_table_modify_with_decap_inner_tcp':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_modify_with_decap_inner_tcp requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_modify_with_decap_inner_tcp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'drop_stats_table_modify_with_drop_stats_update':
  if len(args) != 3:
    print('drop_stats_table_modify_with_drop_stats_update requires 3 args')
    sys.exit(1)
  pp.pprint(client.drop_stats_table_modify_with_drop_stats_update(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_urpf_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipv6_urpf_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_urpf_table_modify_with_ipv6_urpf_hit':
  if len(args) != 4:
    print('ipv6_urpf_table_modify_with_ipv6_urpf_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_table_modify_with_ipv6_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'dmac_table_modify_with_dmac_miss':
  if len(args) != 3:
    print('dmac_table_modify_with_dmac_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_modify_with_dmac_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'dmac_table_modify_with_dmac_redirect_ecmp':
  if len(args) != 4:
    print('dmac_table_modify_with_dmac_redirect_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_modify_with_dmac_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'dmac_table_modify_with_dmac_drop':
  if len(args) != 3:
    print('dmac_table_modify_with_dmac_drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_modify_with_dmac_drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'dmac_table_modify_with_dmac_redirect_nexthop':
  if len(args) != 4:
    print('dmac_table_modify_with_dmac_redirect_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_modify_with_dmac_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'dmac_table_modify_with_nop':
  if len(args) != 3:
    print('dmac_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'dmac_table_modify_with_dmac_multicast_hit':
  if len(args) != 4:
    print('dmac_table_modify_with_dmac_multicast_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_modify_with_dmac_multicast_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'dmac_table_modify_with_dmac_hit':
  if len(args) != 4:
    print('dmac_table_modify_with_dmac_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_modify_with_dmac_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'urpf_bd_table_modify_with_urpf_bd_miss':
  if len(args) != 3:
    print('urpf_bd_table_modify_with_urpf_bd_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.urpf_bd_table_modify_with_urpf_bd_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'urpf_bd_table_modify_with_nop':
  if len(args) != 3:
    print('urpf_bd_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.urpf_bd_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_racl_table_modify_with_racl_redirect_nexthop':
  if len(args) != 4:
    print('ipv6_racl_table_modify_with_racl_redirect_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_modify_with_racl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_racl_table_modify_with_racl_deny':
  if len(args) != 4:
    print('ipv6_racl_table_modify_with_racl_deny requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_modify_with_racl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_racl_table_modify_with_racl_redirect_ecmp':
  if len(args) != 4:
    print('ipv6_racl_table_modify_with_racl_redirect_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_modify_with_racl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_racl_table_modify_with_nop':
  if len(args) != 3:
    print('ipv6_racl_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_racl_table_modify_with_racl_log':
  if len(args) != 4:
    print('ipv6_racl_table_modify_with_racl_log requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_modify_with_racl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_racl_table_modify_with_racl_permit':
  if len(args) != 4:
    print('ipv6_racl_table_modify_with_racl_permit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_modify_with_racl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i12':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i12 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i12(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i13':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i13 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i13(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i10':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i10 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i10(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i11':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i11 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i11(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i14':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i14 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i14(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i15':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i15 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i15(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i8':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i8 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i8(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i9':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i9 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i9(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i0':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i0 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i0(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i1':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i2':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i3':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i4':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i5':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i5 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i5(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i6':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_modify_with_int_set_header_0003_i7':
  if len(args) != 3:
    print('int_inst_0003_table_modify_with_int_set_header_0003_i7 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_modify_with_int_set_header_0003_i7(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_ipv4_hashes_table_modify_with_compute_lkp_ipv4_hash':
  if len(args) != 3:
    print('compute_ipv4_hashes_table_modify_with_compute_lkp_ipv4_hash requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_ipv4_hashes_table_modify_with_compute_lkp_ipv4_hash(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'nexthop_table_modify_with_set_nexthop_details':
  if len(args) != 4:
    print('nexthop_table_modify_with_set_nexthop_details requires 4 args')
    sys.exit(1)
  pp.pprint(client.nexthop_table_modify_with_set_nexthop_details(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'nexthop_table_modify_with_set_nexthop_details_for_post_routed_flood':
  if len(args) != 4:
    print('nexthop_table_modify_with_set_nexthop_details_for_post_routed_flood requires 4 args')
    sys.exit(1)
  pp.pprint(client.nexthop_table_modify_with_set_nexthop_details_for_post_routed_flood(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'nexthop_table_modify_with_nop':
  if len(args) != 3:
    print('nexthop_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.nexthop_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ipv4_packet_table_modify_with_set_malformed_outer_ipv4_packet':
  if len(args) != 4:
    print('validate_outer_ipv4_packet_table_modify_with_set_malformed_outer_ipv4_packet requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv4_packet_table_modify_with_set_malformed_outer_ipv4_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_outer_ipv4_packet_table_modify_with_set_valid_outer_ipv4_packet':
  if len(args) != 3:
    print('validate_outer_ipv4_packet_table_modify_with_set_valid_outer_ipv4_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv4_packet_table_modify_with_set_valid_outer_ipv4_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_table_modify_with_fabric_multicast_rewrite':
  if len(args) != 4:
    print('tunnel_rewrite_table_modify_with_fabric_multicast_rewrite requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_modify_with_fabric_multicast_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_modify_with_cpu_rx_rewrite':
  if len(args) != 3:
    print('tunnel_rewrite_table_modify_with_cpu_rx_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_modify_with_cpu_rx_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_table_modify_with_set_tunnel_rewrite_details':
  if len(args) != 4:
    print('tunnel_rewrite_table_modify_with_set_tunnel_rewrite_details requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_modify_with_set_tunnel_rewrite_details(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_modify_with_set_mpls_rewrite_push1':
  if len(args) != 4:
    print('tunnel_rewrite_table_modify_with_set_mpls_rewrite_push1 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_modify_with_set_mpls_rewrite_push1(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_modify_with_set_mpls_rewrite_push3':
  if len(args) != 4:
    print('tunnel_rewrite_table_modify_with_set_mpls_rewrite_push3 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_modify_with_set_mpls_rewrite_push3(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_modify_with_set_mpls_rewrite_push2':
  if len(args) != 4:
    print('tunnel_rewrite_table_modify_with_set_mpls_rewrite_push2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_modify_with_set_mpls_rewrite_push2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_rewrite_table_modify_with_nop':
  if len(args) != 3:
    print('tunnel_rewrite_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_table_modify_with_fabric_unicast_rewrite':
  if len(args) != 3:
    print('tunnel_rewrite_table_modify_with_fabric_unicast_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_modify_with_fabric_unicast_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_ipv6_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_ipv6_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_ipv6_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_modify_with_terminate_inner_ipv4_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_modify_with_terminate_inner_ipv4_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_modify_with_terminate_inner_ipv4_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_non_ip_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_non_ip_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_non_ip_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_modify_with_terminate_inner_ipv6_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_modify_with_terminate_inner_ipv6_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_modify_with_terminate_inner_ipv6_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_ipv4_over_fabric':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_ipv4_over_fabric requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_modify_with_terminate_inner_ethernet_ipv4_over_fabric(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_lag_table_modify_with_set_egress_ifindex':
  if len(args) != 4:
    print('egress_lag_table_modify_with_set_egress_ifindex requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_lag_table_modify_with_set_egress_ifindex(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_urpf_lpm_table_modify_with_ipv6_urpf_hit':
  if len(args) != 4:
    print('ipv6_urpf_lpm_table_modify_with_ipv6_urpf_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_lpm_table_modify_with_ipv6_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv6_urpf_lpm_table_modify_with_urpf_miss':
  if len(args) != 3:
    print('ipv6_urpf_lpm_table_modify_with_urpf_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_lpm_table_modify_with_urpf_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_table_modify_with_set_unicast_and_ipv6_src_is_link_local':
  if len(args) != 3:
    print('validate_packet_table_modify_with_set_unicast_and_ipv6_src_is_link_local requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_modify_with_set_unicast_and_ipv6_src_is_link_local(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_table_modify_with_set_unicast':
  if len(args) != 3:
    print('validate_packet_table_modify_with_set_unicast requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_modify_with_set_unicast(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_table_modify_with_set_malformed_packet':
  if len(args) != 4:
    print('validate_packet_table_modify_with_set_malformed_packet requires 4 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_modify_with_set_malformed_packet(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'validate_packet_table_modify_with_set_multicast_and_ipv6_src_is_link_local':
  if len(args) != 3:
    print('validate_packet_table_modify_with_set_multicast_and_ipv6_src_is_link_local requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_modify_with_set_multicast_and_ipv6_src_is_link_local(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_table_modify_with_set_broadcast':
  if len(args) != 3:
    print('validate_packet_table_modify_with_set_broadcast requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_modify_with_set_broadcast(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_table_modify_with_nop':
  if len(args) != 3:
    print('validate_packet_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_table_modify_with_set_multicast':
  if len(args) != 3:
    print('validate_packet_table_modify_with_set_multicast requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_modify_with_set_multicast(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i12':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i12 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i12(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i13':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i13 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i13(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i10':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i10 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i10(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i11':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i11 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i11(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i14':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i14 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i14(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i15':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i15 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i15(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i8':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i8 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i8(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i9':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i9 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i9(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i0':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i0 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i0(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i1':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i2':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i3':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i4':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i5':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i5 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i5(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i6':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_modify_with_int_set_header_0407_i7':
  if len(args) != 3:
    print('int_inst_0407_table_modify_with_int_set_header_0407_i7 requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_modify_with_int_set_header_0407_i7(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rmac_table_modify_with_rmac_hit':
  if len(args) != 3:
    print('rmac_table_modify_with_rmac_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.rmac_table_modify_with_rmac_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rmac_table_modify_with_rmac_miss':
  if len(args) != 3:
    print('rmac_table_modify_with_rmac_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.rmac_table_modify_with_rmac_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_ipv4_icmp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_ipv4_icmp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_ipv4_icmp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_ipv4_unknown_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_ipv4_unknown_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_ipv4_unknown_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_non_ip_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_non_ip_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_non_ip_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_ipv6_tcp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_ipv6_tcp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_ipv6_tcp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_ipv6_unknown_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_ipv6_unknown_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_ipv6_unknown_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_ipv4_tcp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_ipv4_tcp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_ipv4_tcp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_ipv4_udp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_ipv4_udp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_ipv4_udp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_ipv6_icmp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_ipv6_icmp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_ipv6_icmp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_modify_with_inner_ipv6_udp_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_modify_with_inner_ipv6_udp_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_modify_with_inner_ipv6_udp_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'replica_type_table_modify_with_set_replica_copy_bridged':
  if len(args) != 3:
    print('replica_type_table_modify_with_set_replica_copy_bridged requires 3 args')
    sys.exit(1)
  pp.pprint(client.replica_type_table_modify_with_set_replica_copy_bridged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'replica_type_table_modify_with_nop':
  if len(args) != 3:
    print('replica_type_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.replica_type_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_rewrite_table_modify_with_rewrite_ipv6_unicast_mac':
  if len(args) != 4:
    print('mac_rewrite_table_modify_with_rewrite_ipv6_unicast_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_modify_with_rewrite_ipv6_unicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_modify_with_rewrite_ipv4_multicast_mac':
  if len(args) != 4:
    print('mac_rewrite_table_modify_with_rewrite_ipv4_multicast_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_modify_with_rewrite_ipv4_multicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_modify_with_rewrite_mpls_mac':
  if len(args) != 4:
    print('mac_rewrite_table_modify_with_rewrite_mpls_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_modify_with_rewrite_mpls_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_modify_with_rewrite_ipv6_multicast_mac':
  if len(args) != 4:
    print('mac_rewrite_table_modify_with_rewrite_ipv6_multicast_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_modify_with_rewrite_ipv6_multicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_modify_with_rewrite_ipv4_unicast_mac':
  if len(args) != 4:
    print('mac_rewrite_table_modify_with_rewrite_ipv4_unicast_mac requires 4 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_modify_with_rewrite_ipv4_unicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mac_rewrite_table_modify_with_nop':
  if len(args) != 3:
    print('mac_rewrite_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mirror_table_modify_with_nop':
  if len(args) != 3:
    print('mirror_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.mirror_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mirror_table_modify_with_set_mirror_nhop':
  if len(args) != 4:
    print('mirror_table_modify_with_set_mirror_nhop requires 4 args')
    sys.exit(1)
  pp.pprint(client.mirror_table_modify_with_set_mirror_nhop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mirror_table_modify_with_set_mirror_bd':
  if len(args) != 4:
    print('mirror_table_modify_with_set_mirror_bd requires 4 args')
    sys.exit(1)
  pp.pprint(client.mirror_table_modify_with_set_mirror_bd(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_ipv4':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_ipv6':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_genv_inner_non_ip':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_genv_inner_non_ip requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_genv_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_ipv4':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_ipv6':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_non_ip':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_non_ip requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_vxlan_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv4_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_non_ip':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_non_ip requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_nvgre_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_non_ip_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_ip_inner_ipv4':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_ip_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_ip_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv6_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ethernet_ipv6_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop3':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop2':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop1':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_mpls_inner_ipv4_pop1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_ip_inner_ipv6':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_ip_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_ip_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_genv_inner_ipv6':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_genv_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_genv_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_modify_with_decap_genv_inner_ipv4':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_modify_with_decap_genv_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_modify_with_decap_genv_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_table_modify_with_drop_packet':
  if len(args) != 3:
    print('system_acl_table_modify_with_drop_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_modify_with_drop_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_table_modify_with_redirect_to_cpu':
  if len(args) != 4:
    print('system_acl_table_modify_with_redirect_to_cpu requires 4 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_modify_with_redirect_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'system_acl_table_modify_with_congestion_mirror_set':
  if len(args) != 3:
    print('system_acl_table_modify_with_congestion_mirror_set requires 3 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_modify_with_congestion_mirror_set(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_table_modify_with_negative_mirror':
  if len(args) != 3:
    print('system_acl_table_modify_with_negative_mirror requires 3 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_modify_with_negative_mirror(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_table_modify_with_drop_packet_with_reason':
  if len(args) != 4:
    print('system_acl_table_modify_with_drop_packet_with_reason requires 4 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_modify_with_drop_packet_with_reason(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'system_acl_table_modify_with_copy_to_cpu':
  if len(args) != 4:
    print('system_acl_table_modify_with_copy_to_cpu requires 4 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_modify_with_copy_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'system_acl_table_modify_with_nop':
  if len(args) != 3:
    print('system_acl_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_dmac_rewrite_table_modify_with_nop':
  if len(args) != 3:
    print('tunnel_dmac_rewrite_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dmac_rewrite_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_dmac_rewrite_table_modify_with_rewrite_tunnel_dmac':
  if len(args) != 4:
    print('tunnel_dmac_rewrite_table_modify_with_rewrite_tunnel_dmac requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dmac_rewrite_table_modify_with_rewrite_tunnel_dmac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'compute_ipv6_hashes_table_modify_with_compute_lkp_ipv6_hash':
  if len(args) != 3:
    print('compute_ipv6_hashes_table_modify_with_compute_lkp_ipv6_hash requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_ipv6_hashes_table_modify_with_compute_lkp_ipv6_hash(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bd_flood_table_modify_with_nop':
  if len(args) != 3:
    print('bd_flood_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.bd_flood_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bd_flood_table_modify_with_set_bd_flood_mc_index':
  if len(args) != 4:
    print('bd_flood_table_modify_with_set_bd_flood_mc_index requires 4 args')
    sys.exit(1)
  pp.pprint(client.bd_flood_table_modify_with_set_bd_flood_mc_index(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'egress_vni_table_modify_with_nop':
  if len(args) != 3:
    print('egress_vni_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vni_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vni_table_modify_with_set_egress_tunnel_vni':
  if len(args) != 4:
    print('egress_vni_table_modify_with_set_egress_tunnel_vni requires 4 args')
    sys.exit(1)
  pp.pprint(client.egress_vni_table_modify_with_set_egress_tunnel_vni(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_modify_with_terminate_tunnel_inner_non_ip':
  if len(args) != 4:
    print('tunnel_table_modify_with_terminate_tunnel_inner_non_ip requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_modify_with_terminate_tunnel_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_modify_with_terminate_tunnel_inner_ethernet_ipv6':
  if len(args) != 4:
    print('tunnel_table_modify_with_terminate_tunnel_inner_ethernet_ipv6 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_modify_with_terminate_tunnel_inner_ethernet_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_modify_with_terminate_tunnel_inner_ethernet_ipv4':
  if len(args) != 4:
    print('tunnel_table_modify_with_terminate_tunnel_inner_ethernet_ipv4 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_modify_with_terminate_tunnel_inner_ethernet_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_modify_with_terminate_tunnel_inner_ipv4':
  if len(args) != 4:
    print('tunnel_table_modify_with_terminate_tunnel_inner_ipv4 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_modify_with_terminate_tunnel_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_modify_with_terminate_tunnel_inner_ipv6':
  if len(args) != 4:
    print('tunnel_table_modify_with_terminate_tunnel_inner_ipv6 requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_modify_with_terminate_tunnel_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'tunnel_table_modify_with_nop':
  if len(args) != 3:
    print('tunnel_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'acl_stats_table_modify_with_acl_stats_update':
  if len(args) != 3:
    print('acl_stats_table_modify_with_acl_stats_update requires 3 args')
    sys.exit(1)
  pp.pprint(client.acl_stats_table_modify_with_acl_stats_update(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_urpf_lpm_table_modify_with_ipv4_urpf_hit':
  if len(args) != 4:
    print('ipv4_urpf_lpm_table_modify_with_ipv4_urpf_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_lpm_table_modify_with_ipv4_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_urpf_lpm_table_modify_with_urpf_miss':
  if len(args) != 3:
    print('ipv4_urpf_lpm_table_modify_with_urpf_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_lpm_table_modify_with_urpf_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_1215_table_modify_with_nop':
  if len(args) != 3:
    print('int_inst_1215_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_1215_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mpls_table_modify_with_forward_mpls':
  if len(args) != 4:
    print('mpls_table_modify_with_forward_mpls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_modify_with_forward_mpls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_modify_with_terminate_vpls':
  if len(args) != 4:
    print('mpls_table_modify_with_terminate_vpls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_modify_with_terminate_vpls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_modify_with_terminate_eompls':
  if len(args) != 4:
    print('mpls_table_modify_with_terminate_eompls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_modify_with_terminate_eompls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_modify_with_terminate_ipv4_over_mpls':
  if len(args) != 4:
    print('mpls_table_modify_with_terminate_ipv4_over_mpls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_modify_with_terminate_ipv4_over_mpls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_modify_with_terminate_pw':
  if len(args) != 4:
    print('mpls_table_modify_with_terminate_pw requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_modify_with_terminate_pw(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'mpls_table_modify_with_terminate_ipv6_over_mpls':
  if len(args) != 4:
    print('mpls_table_modify_with_terminate_ipv6_over_mpls requires 4 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_modify_with_terminate_ipv6_over_mpls(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_dest_vtep_table_modify_with_set_tunnel_termination_flag':
  if len(args) != 3:
    print('ipv4_dest_vtep_table_modify_with_set_tunnel_termination_flag requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_dest_vtep_table_modify_with_set_tunnel_termination_flag(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_dest_vtep_table_modify_with_nop':
  if len(args) != 3:
    print('ipv4_dest_vtep_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_dest_vtep_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_src_lkp_table_modify_with_set_ingress_ifindex_properties':
  if len(args) != 3:
    print('fabric_ingress_src_lkp_table_modify_with_set_ingress_ifindex_properties requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_src_lkp_table_modify_with_set_ingress_ifindex_properties(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_src_lkp_table_modify_with_nop':
  if len(args) != 3:
    print('fabric_ingress_src_lkp_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_src_lkp_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_insert_table_modify_with_int_transit':
  if len(args) != 4:
    print('int_insert_table_modify_with_int_transit requires 4 args')
    sys.exit(1)
  pp.pprint(client.int_insert_table_modify_with_int_transit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'int_insert_table_modify_with_int_reset':
  if len(args) != 3:
    print('int_insert_table_modify_with_int_reset requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_insert_table_modify_with_int_reset(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_smac_rewrite_table_modify_with_nop':
  if len(args) != 3:
    print('tunnel_smac_rewrite_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_smac_rewrite_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_smac_rewrite_table_modify_with_rewrite_tunnel_smac':
  if len(args) != 4:
    print('tunnel_smac_rewrite_table_modify_with_rewrite_tunnel_smac requires 4 args')
    sys.exit(1)
  pp.pprint(client.tunnel_smac_rewrite_table_modify_with_rewrite_tunnel_smac(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_urpf_table_modify_with_ipv4_urpf_hit':
  if len(args) != 4:
    print('ipv4_urpf_table_modify_with_ipv4_urpf_hit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_table_modify_with_ipv4_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_urpf_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipv4_urpf_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_meta_header_update_table_modify_with_int_update_total_hop_cnt':
  if len(args) != 3:
    print('int_meta_header_update_table_modify_with_int_update_total_hop_cnt requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_meta_header_update_table_modify_with_int_update_total_hop_cnt(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_meta_header_update_table_modify_with_int_set_e_bit':
  if len(args) != 3:
    print('int_meta_header_update_table_modify_with_int_set_e_bit requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_meta_header_update_table_modify_with_int_set_e_bit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipsg_permit_special_table_modify_with_ipsg_miss':
  if len(args) != 3:
    print('ipsg_permit_special_table_modify_with_ipsg_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipsg_permit_special_table_modify_with_ipsg_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_racl_table_modify_with_racl_redirect_nexthop':
  if len(args) != 4:
    print('ipv4_racl_table_modify_with_racl_redirect_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_modify_with_racl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_racl_table_modify_with_racl_deny':
  if len(args) != 4:
    print('ipv4_racl_table_modify_with_racl_deny requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_modify_with_racl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_racl_table_modify_with_racl_redirect_ecmp':
  if len(args) != 4:
    print('ipv4_racl_table_modify_with_racl_redirect_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_modify_with_racl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_racl_table_modify_with_nop':
  if len(args) != 3:
    print('ipv4_racl_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_racl_table_modify_with_racl_log':
  if len(args) != 4:
    print('ipv4_racl_table_modify_with_racl_log requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_modify_with_racl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ipv4_racl_table_modify_with_racl_permit':
  if len(args) != 4:
    print('ipv4_racl_table_modify_with_racl_permit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_modify_with_racl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ip_acl_table_modify_with_acl_dod_en':
  if len(args) != 3:
    print('ip_acl_table_modify_with_acl_dod_en requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_modify_with_acl_dod_en(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_table_modify_with_acl_log':
  if len(args) != 4:
    print('ip_acl_table_modify_with_acl_log requires 4 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_modify_with_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ip_acl_table_modify_with_acl_mirror':
  if len(args) != 4:
    print('ip_acl_table_modify_with_acl_mirror requires 4 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_modify_with_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ip_acl_table_modify_with_acl_deny':
  if len(args) != 4:
    print('ip_acl_table_modify_with_acl_deny requires 4 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_modify_with_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ip_acl_table_modify_with_acl_permit':
  if len(args) != 4:
    print('ip_acl_table_modify_with_acl_permit requires 4 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_modify_with_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ip_acl_table_modify_with_acl_redirect_nexthop':
  if len(args) != 4:
    print('ip_acl_table_modify_with_acl_redirect_nexthop requires 4 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_modify_with_acl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ip_acl_table_modify_with_acl_redirect_ecmp':
  if len(args) != 4:
    print('ip_acl_table_modify_with_acl_redirect_ecmp requires 4 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_modify_with_acl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ip_acl_table_modify_with_nop':
  if len(args) != 3:
    print('ip_acl_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'outer_rmac_table_modify_with_on_miss':
  if len(args) != 3:
    print('outer_rmac_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.outer_rmac_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'outer_rmac_table_modify_with_outer_rmac_hit':
  if len(args) != 3:
    print('outer_rmac_table_modify_with_outer_rmac_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.outer_rmac_table_modify_with_outer_rmac_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0811_table_modify_with_nop':
  if len(args) != 3:
    print('int_inst_0811_table_modify_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0811_table_modify_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipsg_table_modify_with_on_miss':
  if len(args) != 3:
    print('ipsg_table_modify_with_on_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipsg_table_modify_with_on_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'spanning_tree_table_delete':
  if len(args) != 3:
    print('spanning_tree_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.spanning_tree_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_table_delete':
  if len(args) != 3:
    print('int_bos_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_bos_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_dst_rewrite_table_delete':
  if len(args) != 3:
    print('tunnel_dst_rewrite_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_table_delete':
  if len(args) != 3:
    print('validate_outer_ethernet_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'qos_table_delete':
  if len(args) != 3:
    print('qos_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.qos_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_lpm_table_delete':
  if len(args) != 3:
    print('ipv6_fib_lpm_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_acl_table_delete':
  if len(args) != 3:
    print('egress_acl_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_table_delete':
  if len(args) != 3:
    print('rewrite_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_acl_table_delete':
  if len(args) != 3:
    print('ipv6_acl_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fwd_result_table_delete':
  if len(args) != 3:
    print('fwd_result_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'lag_group_table_delete':
  if len(args) != 3:
    print('lag_group_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_group_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'learn_notify_table_delete':
  if len(args) != 3:
    print('learn_notify_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.learn_notify_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_acl_table_delete':
  if len(args) != 3:
    print('mac_acl_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'smac_table_delete':
  if len(args) != 3:
    print('smac_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.smac_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_outer_encap_table_delete':
  if len(args) != 3:
    print('int_outer_encap_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_outer_encap_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_src_vtep_table_delete':
  if len(args) != 3:
    print('ipv6_src_vtep_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_src_vtep_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_filter_table_delete':
  if len(args) != 3:
    print('egress_filter_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_filter_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'vlan_decap_table_delete':
  if len(args) != 3:
    print('vlan_decap_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rid_table_delete':
  if len(args) != 3:
    print('rid_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.rid_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_lpm_table_delete':
  if len(args) != 3:
    print('ipv4_fib_lpm_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_port_mapping_table_delete':
  if len(args) != 3:
    print('egress_port_mapping_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_group_table_delete':
  if len(args) != 3:
    print('ecmp_group_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_group_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_dst_lkp_table_delete':
  if len(args) != 3:
    print('fabric_ingress_dst_lkp_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_other_hashes_table_delete':
  if len(args) != 3:
    print('compute_other_hashes_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_other_hashes_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_bd_map_table_delete':
  if len(args) != 3:
    print('egress_bd_map_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_bd_map_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_src_rewrite_table_delete':
  if len(args) != 3:
    print('tunnel_src_rewrite_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_table_delete':
  if len(args) != 3:
    print('ipv4_fib_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ingress_port_mapping_table_delete':
  if len(args) != 3:
    print('ingress_port_mapping_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ingress_port_mapping_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_non_ip_hashes_table_delete':
  if len(args) != 3:
    print('compute_non_ip_hashes_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_non_ip_hashes_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_src_vtep_table_delete':
  if len(args) != 3:
    print('ipv4_src_vtep_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_src_vtep_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_dest_vtep_table_delete':
  if len(args) != 3:
    print('ipv6_dest_vtep_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_dest_vtep_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ingress_bd_stats_table_delete':
  if len(args) != 3:
    print('ingress_bd_stats_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ingress_bd_stats_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vlan_xlate_table_delete':
  if len(args) != 3:
    print('egress_vlan_xlate_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_mpls_packet_table_delete':
  if len(args) != 3:
    print('validate_mpls_packet_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_table_delete':
  if len(args) != 3:
    print('ipv6_fib_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ipv6_packet_table_delete':
  if len(args) != 3:
    print('validate_outer_ipv6_packet_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv6_packet_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_table_delete':
  if len(args) != 3:
    print('tunnel_encap_process_outer_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'storm_control_table_delete':
  if len(args) != 3:
    print('storm_control_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.storm_control_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_inner_table_delete':
  if len(args) != 3:
    print('tunnel_decap_process_inner_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'drop_stats_table_delete':
  if len(args) != 3:
    print('drop_stats_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.drop_stats_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_urpf_table_delete':
  if len(args) != 3:
    print('ipv6_urpf_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'dmac_table_delete':
  if len(args) != 3:
    print('dmac_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.dmac_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'urpf_bd_table_delete':
  if len(args) != 3:
    print('urpf_bd_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.urpf_bd_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_racl_table_delete':
  if len(args) != 3:
    print('ipv6_racl_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_table_delete':
  if len(args) != 3:
    print('int_inst_0003_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_ipv4_hashes_table_delete':
  if len(args) != 3:
    print('compute_ipv4_hashes_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_ipv4_hashes_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'nexthop_table_delete':
  if len(args) != 3:
    print('nexthop_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.nexthop_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ipv4_packet_table_delete':
  if len(args) != 3:
    print('validate_outer_ipv4_packet_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv4_packet_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_table_delete':
  if len(args) != 3:
    print('tunnel_rewrite_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunneled_packet_over_fabric_table_delete':
  if len(args) != 3:
    print('tunneled_packet_over_fabric_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_lag_table_delete':
  if len(args) != 3:
    print('egress_lag_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_lag_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_urpf_lpm_table_delete':
  if len(args) != 3:
    print('ipv6_urpf_lpm_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_lpm_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_table_delete':
  if len(args) != 3:
    print('validate_packet_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0407_table_delete':
  if len(args) != 3:
    print('int_inst_0407_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'port_vlan_mapping_table_delete':
  if len(args) != 3:
    print('port_vlan_mapping_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.port_vlan_mapping_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rmac_table_delete':
  if len(args) != 3:
    print('rmac_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.rmac_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_inner_table_delete':
  if len(args) != 3:
    print('tunnel_encap_process_inner_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'replica_type_table_delete':
  if len(args) != 3:
    print('replica_type_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.replica_type_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_rewrite_table_delete':
  if len(args) != 3:
    print('mac_rewrite_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mirror_table_delete':
  if len(args) != 3:
    print('mirror_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.mirror_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_table_delete':
  if len(args) != 3:
    print('tunnel_decap_process_outer_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_table_delete':
  if len(args) != 3:
    print('system_acl_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.system_acl_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_dmac_rewrite_table_delete':
  if len(args) != 3:
    print('tunnel_dmac_rewrite_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dmac_rewrite_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_ipv6_hashes_table_delete':
  if len(args) != 3:
    print('compute_ipv6_hashes_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.compute_ipv6_hashes_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bd_flood_table_delete':
  if len(args) != 3:
    print('bd_flood_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.bd_flood_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vni_table_delete':
  if len(args) != 3:
    print('egress_vni_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vni_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_table_delete':
  if len(args) != 3:
    print('tunnel_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'acl_stats_table_delete':
  if len(args) != 3:
    print('acl_stats_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.acl_stats_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_urpf_lpm_table_delete':
  if len(args) != 3:
    print('ipv4_urpf_lpm_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_lpm_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_1215_table_delete':
  if len(args) != 3:
    print('int_inst_1215_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_1215_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mpls_table_delete':
  if len(args) != 3:
    print('mpls_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.mpls_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_dest_vtep_table_delete':
  if len(args) != 3:
    print('ipv4_dest_vtep_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_dest_vtep_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_ingress_src_lkp_table_delete':
  if len(args) != 3:
    print('fabric_ingress_src_lkp_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_src_lkp_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_insert_table_delete':
  if len(args) != 3:
    print('int_insert_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_insert_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_smac_rewrite_table_delete':
  if len(args) != 3:
    print('tunnel_smac_rewrite_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_smac_rewrite_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_urpf_table_delete':
  if len(args) != 3:
    print('ipv4_urpf_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_table_delete':
  if len(args) != 3:
    print('fabric_lag_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_meta_header_update_table_delete':
  if len(args) != 3:
    print('int_meta_header_update_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_meta_header_update_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipsg_permit_special_table_delete':
  if len(args) != 3:
    print('ipsg_permit_special_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipsg_permit_special_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_racl_table_delete':
  if len(args) != 3:
    print('ipv4_racl_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_table_delete':
  if len(args) != 3:
    print('ip_acl_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'outer_rmac_table_delete':
  if len(args) != 3:
    print('outer_rmac_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.outer_rmac_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0811_table_delete':
  if len(args) != 3:
    print('int_inst_0811_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0811_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipsg_table_delete':
  if len(args) != 3:
    print('ipsg_table_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipsg_table_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'spanning_tree_set_default_action_set_stp_state':
  if len(args) != 3:
    print('spanning_tree_set_default_action_set_stp_state requires 3 args')
    sys.exit(1)
  pp.pprint(client.spanning_tree_set_default_action_set_stp_state(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_bos_set_default_action_int_set_header_0_bos':
  if len(args) != 2:
    print('int_bos_set_default_action_int_set_header_0_bos requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_int_set_header_0_bos(eval(args[0]),eval(args[1]),))

elif cmd == 'int_bos_set_default_action_int_set_header_6_bos':
  if len(args) != 2:
    print('int_bos_set_default_action_int_set_header_6_bos requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_int_set_header_6_bos(eval(args[0]),eval(args[1]),))

elif cmd == 'int_bos_set_default_action_int_set_header_3_bos':
  if len(args) != 2:
    print('int_bos_set_default_action_int_set_header_3_bos requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_int_set_header_3_bos(eval(args[0]),eval(args[1]),))

elif cmd == 'int_bos_set_default_action_int_set_header_4_bos':
  if len(args) != 2:
    print('int_bos_set_default_action_int_set_header_4_bos requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_int_set_header_4_bos(eval(args[0]),eval(args[1]),))

elif cmd == 'int_bos_set_default_action_int_set_header_1_bos':
  if len(args) != 2:
    print('int_bos_set_default_action_int_set_header_1_bos requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_int_set_header_1_bos(eval(args[0]),eval(args[1]),))

elif cmd == 'int_bos_set_default_action_int_set_header_7_bos':
  if len(args) != 2:
    print('int_bos_set_default_action_int_set_header_7_bos requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_int_set_header_7_bos(eval(args[0]),eval(args[1]),))

elif cmd == 'int_bos_set_default_action_int_set_header_2_bos':
  if len(args) != 2:
    print('int_bos_set_default_action_int_set_header_2_bos requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_int_set_header_2_bos(eval(args[0]),eval(args[1]),))

elif cmd == 'int_bos_set_default_action_nop':
  if len(args) != 2:
    print('int_bos_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'int_bos_set_default_action_int_set_header_5_bos':
  if len(args) != 2:
    print('int_bos_set_default_action_int_set_header_5_bos requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_bos_set_default_action_int_set_header_5_bos(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_dst_rewrite_set_default_action_rewrite_tunnel_ipv6_dst':
  if len(args) != 3:
    print('tunnel_dst_rewrite_set_default_action_rewrite_tunnel_ipv6_dst requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_set_default_action_rewrite_tunnel_ipv6_dst(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_dst_rewrite_set_default_action_rewrite_tunnel_ipv4_dst':
  if len(args) != 3:
    print('tunnel_dst_rewrite_set_default_action_rewrite_tunnel_ipv4_dst requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_set_default_action_rewrite_tunnel_ipv4_dst(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_dst_rewrite_set_default_action_nop':
  if len(args) != 2:
    print('tunnel_dst_rewrite_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dst_rewrite_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_double_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_double_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_double_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_qinq_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_qinq_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_qinq_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_untagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_untagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_untagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_malformed_outer_ethernet_packet':
  if len(args) != 3:
    print('validate_outer_ethernet_set_default_action_malformed_outer_ethernet_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_malformed_outer_ethernet_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_qinq_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_qinq_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_qinq_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_untagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_untagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_untagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_double_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_double_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_double_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_single_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_single_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_multicast_packet_single_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_untagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_untagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_untagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_qinq_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_qinq_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_qinq_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_single_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_single_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_single_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_single_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_single_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_unicast_packet_single_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_double_tagged':
  if len(args) != 2:
    print('validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_double_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ethernet_set_default_action_set_valid_outer_broadcast_packet_double_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'qos_set_default_action_apply_tc_marking':
  if len(args) != 3:
    print('qos_set_default_action_apply_tc_marking requires 3 args')
    sys.exit(1)
  pp.pprint(client.qos_set_default_action_apply_tc_marking(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'qos_set_default_action_apply_cos_marking':
  if len(args) != 3:
    print('qos_set_default_action_apply_cos_marking requires 3 args')
    sys.exit(1)
  pp.pprint(client.qos_set_default_action_apply_cos_marking(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'qos_set_default_action_nop':
  if len(args) != 2:
    print('qos_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.qos_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'qos_set_default_action_apply_dscp_marking':
  if len(args) != 3:
    print('qos_set_default_action_apply_dscp_marking requires 3 args')
    sys.exit(1)
  pp.pprint(client.qos_set_default_action_apply_dscp_marking(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_lpm_set_default_action_on_miss':
  if len(args) != 2:
    print('ipv6_fib_lpm_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_fib_lpm_set_default_action_fib_hit_ecmp':
  if len(args) != 3:
    print('ipv6_fib_lpm_set_default_action_fib_hit_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_set_default_action_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_lpm_set_default_action_fib_hit_nexthop':
  if len(args) != 3:
    print('ipv6_fib_lpm_set_default_action_fib_hit_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_lpm_set_default_action_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_acl_set_default_action_egress_mirror':
  if len(args) != 3:
    print('egress_acl_set_default_action_egress_mirror requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_set_default_action_egress_mirror(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_acl_set_default_action_nop':
  if len(args) != 2:
    print('egress_acl_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_acl_set_default_action_egress_redirect_to_cpu':
  if len(args) != 3:
    print('egress_acl_set_default_action_egress_redirect_to_cpu requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_set_default_action_egress_redirect_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_acl_set_default_action_egress_mirror_drop':
  if len(args) != 3:
    print('egress_acl_set_default_action_egress_mirror_drop requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_acl_set_default_action_egress_mirror_drop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_set_default_action_set_mpls_swap_push_rewrite_l3':
  if len(args) != 3:
    print('rewrite_set_default_action_set_mpls_swap_push_rewrite_l3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_set_mpls_swap_push_rewrite_l3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_set_default_action_set_mpls_swap_push_rewrite_l2':
  if len(args) != 3:
    print('rewrite_set_default_action_set_mpls_swap_push_rewrite_l2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_set_mpls_swap_push_rewrite_l2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_set_default_action_set_mpls_push_rewrite_l2':
  if len(args) != 3:
    print('rewrite_set_default_action_set_mpls_push_rewrite_l2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_set_mpls_push_rewrite_l2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_set_default_action_set_mpls_push_rewrite_l3':
  if len(args) != 3:
    print('rewrite_set_default_action_set_mpls_push_rewrite_l3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_set_mpls_push_rewrite_l3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_set_default_action_set_l3_rewrite':
  if len(args) != 3:
    print('rewrite_set_default_action_set_l3_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_set_l3_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_set_default_action_set_l2_rewrite':
  if len(args) != 2:
    print('rewrite_set_default_action_set_l2_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_set_l2_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'rewrite_set_default_action_nop':
  if len(args) != 2:
    print('rewrite_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'rewrite_set_default_action_set_l2_rewrite_with_tunnel':
  if len(args) != 3:
    print('rewrite_set_default_action_set_l2_rewrite_with_tunnel requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_set_l2_rewrite_with_tunnel(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewrite_set_default_action_set_l3_rewrite_with_tunnel':
  if len(args) != 3:
    print('rewrite_set_default_action_set_l3_rewrite_with_tunnel requires 3 args')
    sys.exit(1)
  pp.pprint(client.rewrite_set_default_action_set_l3_rewrite_with_tunnel(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_acl_set_default_action_acl_log':
  if len(args) != 3:
    print('ipv6_acl_set_default_action_acl_log requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_set_default_action_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_acl_set_default_action_acl_mirror':
  if len(args) != 3:
    print('ipv6_acl_set_default_action_acl_mirror requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_set_default_action_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_acl_set_default_action_acl_deny':
  if len(args) != 3:
    print('ipv6_acl_set_default_action_acl_deny requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_set_default_action_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_acl_set_default_action_acl_permit':
  if len(args) != 3:
    print('ipv6_acl_set_default_action_acl_permit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_set_default_action_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_acl_set_default_action_acl_redirect_nexthop':
  if len(args) != 3:
    print('ipv6_acl_set_default_action_acl_redirect_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_set_default_action_acl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_acl_set_default_action_acl_redirect_ecmp':
  if len(args) != 3:
    print('ipv6_acl_set_default_action_acl_redirect_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_set_default_action_acl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_acl_set_default_action_nop':
  if len(args) != 2:
    print('ipv6_acl_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_acl_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'fwd_result_set_default_action_set_fib_redirect_action':
  if len(args) != 2:
    print('fwd_result_set_default_action_set_fib_redirect_action requires 2 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_set_default_action_set_fib_redirect_action(eval(args[0]),eval(args[1]),))

elif cmd == 'fwd_result_set_default_action_set_racl_redirect_action':
  if len(args) != 2:
    print('fwd_result_set_default_action_set_racl_redirect_action requires 2 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_set_default_action_set_racl_redirect_action(eval(args[0]),eval(args[1]),))

elif cmd == 'fwd_result_set_default_action_set_cpu_redirect_action':
  if len(args) != 2:
    print('fwd_result_set_default_action_set_cpu_redirect_action requires 2 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_set_default_action_set_cpu_redirect_action(eval(args[0]),eval(args[1]),))

elif cmd == 'fwd_result_set_default_action_set_l2_redirect_action':
  if len(args) != 2:
    print('fwd_result_set_default_action_set_l2_redirect_action requires 2 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_set_default_action_set_l2_redirect_action(eval(args[0]),eval(args[1]),))

elif cmd == 'fwd_result_set_default_action_set_acl_redirect_action':
  if len(args) != 2:
    print('fwd_result_set_default_action_set_acl_redirect_action requires 2 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_set_default_action_set_acl_redirect_action(eval(args[0]),eval(args[1]),))

elif cmd == 'fwd_result_set_default_action_nop':
  if len(args) != 2:
    print('fwd_result_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.fwd_result_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'learn_notify_set_default_action_nop':
  if len(args) != 2:
    print('learn_notify_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.learn_notify_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'learn_notify_set_default_action_generate_learn_notify':
  if len(args) != 2:
    print('learn_notify_set_default_action_generate_learn_notify requires 2 args')
    sys.exit(1)
  pp.pprint(client.learn_notify_set_default_action_generate_learn_notify(eval(args[0]),eval(args[1]),))

elif cmd == 'mac_acl_set_default_action_acl_log':
  if len(args) != 3:
    print('mac_acl_set_default_action_acl_log requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_set_default_action_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_acl_set_default_action_acl_deny':
  if len(args) != 3:
    print('mac_acl_set_default_action_acl_deny requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_set_default_action_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_acl_set_default_action_acl_mirror':
  if len(args) != 3:
    print('mac_acl_set_default_action_acl_mirror requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_set_default_action_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_acl_set_default_action_nop':
  if len(args) != 2:
    print('mac_acl_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'mac_acl_set_default_action_acl_permit':
  if len(args) != 3:
    print('mac_acl_set_default_action_acl_permit requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_acl_set_default_action_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'smac_set_default_action_smac_hit':
  if len(args) != 3:
    print('smac_set_default_action_smac_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.smac_set_default_action_smac_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'smac_set_default_action_nop':
  if len(args) != 2:
    print('smac_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.smac_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'smac_set_default_action_smac_miss':
  if len(args) != 2:
    print('smac_set_default_action_smac_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.smac_set_default_action_smac_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'int_outer_encap_set_default_action_nop':
  if len(args) != 2:
    print('int_outer_encap_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_outer_encap_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'int_outer_encap_set_default_action_int_update_vxlan_gpe_ipv4':
  if len(args) != 2:
    print('int_outer_encap_set_default_action_int_update_vxlan_gpe_ipv4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_outer_encap_set_default_action_int_update_vxlan_gpe_ipv4(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_src_vtep_set_default_action_on_miss':
  if len(args) != 2:
    print('ipv6_src_vtep_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_src_vtep_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_src_vtep_set_default_action_src_vtep_hit':
  if len(args) != 3:
    print('ipv6_src_vtep_set_default_action_src_vtep_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_src_vtep_set_default_action_src_vtep_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_filter_set_default_action_set_egress_filter_drop':
  if len(args) != 2:
    print('egress_filter_set_default_action_set_egress_filter_drop requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_filter_set_default_action_set_egress_filter_drop(eval(args[0]),eval(args[1]),))

elif cmd == 'vlan_decap_set_default_action_remove_vlan_double_tagged':
  if len(args) != 2:
    print('vlan_decap_set_default_action_remove_vlan_double_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_set_default_action_remove_vlan_double_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'vlan_decap_set_default_action_nop':
  if len(args) != 2:
    print('vlan_decap_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'vlan_decap_set_default_action_remove_vlan_single_tagged':
  if len(args) != 2:
    print('vlan_decap_set_default_action_remove_vlan_single_tagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.vlan_decap_set_default_action_remove_vlan_single_tagged(eval(args[0]),eval(args[1]),))

elif cmd == 'rid_set_default_action_outer_replica_from_rid_with_nexthop':
  if len(args) != 3:
    print('rid_set_default_action_outer_replica_from_rid_with_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.rid_set_default_action_outer_replica_from_rid_with_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rid_set_default_action_nop':
  if len(args) != 2:
    print('rid_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.rid_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'rid_set_default_action_outer_replica_from_rid':
  if len(args) != 3:
    print('rid_set_default_action_outer_replica_from_rid requires 3 args')
    sys.exit(1)
  pp.pprint(client.rid_set_default_action_outer_replica_from_rid(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rid_set_default_action_inner_replica_from_rid':
  if len(args) != 3:
    print('rid_set_default_action_inner_replica_from_rid requires 3 args')
    sys.exit(1)
  pp.pprint(client.rid_set_default_action_inner_replica_from_rid(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rid_set_default_action_inner_replica_from_rid_with_nexthop':
  if len(args) != 3:
    print('rid_set_default_action_inner_replica_from_rid_with_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.rid_set_default_action_inner_replica_from_rid_with_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_lpm_set_default_action_on_miss':
  if len(args) != 2:
    print('ipv4_fib_lpm_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_fib_lpm_set_default_action_fib_hit_ecmp':
  if len(args) != 3:
    print('ipv4_fib_lpm_set_default_action_fib_hit_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_set_default_action_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_lpm_set_default_action_fib_hit_nexthop':
  if len(args) != 3:
    print('ipv4_fib_lpm_set_default_action_fib_hit_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_lpm_set_default_action_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_port_mapping_set_default_action_egress_port_type_cpu':
  if len(args) != 2:
    print('egress_port_mapping_set_default_action_egress_port_type_cpu requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_set_default_action_egress_port_type_cpu(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_port_mapping_set_default_action_egress_port_type_normal':
  if len(args) != 2:
    print('egress_port_mapping_set_default_action_egress_port_type_normal requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_set_default_action_egress_port_type_normal(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_port_mapping_set_default_action_egress_port_type_fabric':
  if len(args) != 2:
    print('egress_port_mapping_set_default_action_egress_port_type_fabric requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_port_mapping_set_default_action_egress_port_type_fabric(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_ingress_dst_lkp_set_default_action_terminate_fabric_multicast_packet':
  if len(args) != 2:
    print('fabric_ingress_dst_lkp_set_default_action_terminate_fabric_multicast_packet requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_set_default_action_terminate_fabric_multicast_packet(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_ingress_dst_lkp_set_default_action_switch_fabric_multicast_packet':
  if len(args) != 2:
    print('fabric_ingress_dst_lkp_set_default_action_switch_fabric_multicast_packet requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_set_default_action_switch_fabric_multicast_packet(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_ingress_dst_lkp_set_default_action_terminate_fabric_unicast_packet':
  if len(args) != 2:
    print('fabric_ingress_dst_lkp_set_default_action_terminate_fabric_unicast_packet requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_set_default_action_terminate_fabric_unicast_packet(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_ingress_dst_lkp_set_default_action_switch_fabric_unicast_packet':
  if len(args) != 2:
    print('fabric_ingress_dst_lkp_set_default_action_switch_fabric_unicast_packet requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_set_default_action_switch_fabric_unicast_packet(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_ingress_dst_lkp_set_default_action_nop':
  if len(args) != 2:
    print('fabric_ingress_dst_lkp_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_ingress_dst_lkp_set_default_action_terminate_cpu_packet':
  if len(args) != 2:
    print('fabric_ingress_dst_lkp_set_default_action_terminate_cpu_packet requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_dst_lkp_set_default_action_terminate_cpu_packet(eval(args[0]),eval(args[1]),))

elif cmd == 'compute_other_hashes_set_default_action_computed_one_hash':
  if len(args) != 2:
    print('compute_other_hashes_set_default_action_computed_one_hash requires 2 args')
    sys.exit(1)
  pp.pprint(client.compute_other_hashes_set_default_action_computed_one_hash(eval(args[0]),eval(args[1]),))

elif cmd == 'compute_other_hashes_set_default_action_computed_two_hashes':
  if len(args) != 2:
    print('compute_other_hashes_set_default_action_computed_two_hashes requires 2 args')
    sys.exit(1)
  pp.pprint(client.compute_other_hashes_set_default_action_computed_two_hashes(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_bd_map_set_default_action_set_egress_bd_properties':
  if len(args) != 2:
    print('egress_bd_map_set_default_action_set_egress_bd_properties requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_bd_map_set_default_action_set_egress_bd_properties(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_bd_map_set_default_action_nop':
  if len(args) != 2:
    print('egress_bd_map_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_bd_map_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_src_rewrite_set_default_action_rewrite_tunnel_ipv4_src':
  if len(args) != 3:
    print('tunnel_src_rewrite_set_default_action_rewrite_tunnel_ipv4_src requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_set_default_action_rewrite_tunnel_ipv4_src(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_src_rewrite_set_default_action_nop':
  if len(args) != 2:
    print('tunnel_src_rewrite_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_src_rewrite_set_default_action_rewrite_tunnel_ipv6_src':
  if len(args) != 3:
    print('tunnel_src_rewrite_set_default_action_rewrite_tunnel_ipv6_src requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_src_rewrite_set_default_action_rewrite_tunnel_ipv6_src(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_set_default_action_on_miss':
  if len(args) != 2:
    print('ipv4_fib_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_fib_set_default_action_fib_hit_ecmp':
  if len(args) != 3:
    print('ipv4_fib_set_default_action_fib_hit_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_set_default_action_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_fib_set_default_action_fib_hit_nexthop':
  if len(args) != 3:
    print('ipv4_fib_set_default_action_fib_hit_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_fib_set_default_action_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ingress_port_mapping_set_default_action_set_ifindex':
  if len(args) != 3:
    print('ingress_port_mapping_set_default_action_set_ifindex requires 3 args')
    sys.exit(1)
  pp.pprint(client.ingress_port_mapping_set_default_action_set_ifindex(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_non_ip_hashes_set_default_action_compute_lkp_non_ip_hash':
  if len(args) != 2:
    print('compute_non_ip_hashes_set_default_action_compute_lkp_non_ip_hash requires 2 args')
    sys.exit(1)
  pp.pprint(client.compute_non_ip_hashes_set_default_action_compute_lkp_non_ip_hash(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_src_vtep_set_default_action_on_miss':
  if len(args) != 2:
    print('ipv4_src_vtep_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_src_vtep_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_src_vtep_set_default_action_src_vtep_hit':
  if len(args) != 3:
    print('ipv4_src_vtep_set_default_action_src_vtep_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_src_vtep_set_default_action_src_vtep_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_dest_vtep_set_default_action_set_tunnel_termination_flag':
  if len(args) != 2:
    print('ipv6_dest_vtep_set_default_action_set_tunnel_termination_flag requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_dest_vtep_set_default_action_set_tunnel_termination_flag(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_dest_vtep_set_default_action_nop':
  if len(args) != 2:
    print('ipv6_dest_vtep_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_dest_vtep_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'ingress_bd_stats_set_default_action_update_ingress_bd_stats':
  if len(args) != 2:
    print('ingress_bd_stats_set_default_action_update_ingress_bd_stats requires 2 args')
    sys.exit(1)
  pp.pprint(client.ingress_bd_stats_set_default_action_update_ingress_bd_stats(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_vlan_xlate_set_default_action_set_egress_packet_vlan_untagged':
  if len(args) != 2:
    print('egress_vlan_xlate_set_default_action_set_egress_packet_vlan_untagged requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_set_default_action_set_egress_packet_vlan_untagged(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_vlan_xlate_set_default_action_set_egress_packet_vlan_tagged':
  if len(args) != 3:
    print('egress_vlan_xlate_set_default_action_set_egress_packet_vlan_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_set_default_action_set_egress_packet_vlan_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vlan_xlate_set_default_action_set_egress_packet_vlan_double_tagged':
  if len(args) != 3:
    print('egress_vlan_xlate_set_default_action_set_egress_packet_vlan_double_tagged requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vlan_xlate_set_default_action_set_egress_packet_vlan_double_tagged(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_mpls_packet_set_default_action_set_valid_mpls_label2':
  if len(args) != 2:
    print('validate_mpls_packet_set_default_action_set_valid_mpls_label2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_set_default_action_set_valid_mpls_label2(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_mpls_packet_set_default_action_set_valid_mpls_label3':
  if len(args) != 2:
    print('validate_mpls_packet_set_default_action_set_valid_mpls_label3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_set_default_action_set_valid_mpls_label3(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_mpls_packet_set_default_action_set_valid_mpls_label1':
  if len(args) != 2:
    print('validate_mpls_packet_set_default_action_set_valid_mpls_label1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_mpls_packet_set_default_action_set_valid_mpls_label1(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_fib_set_default_action_on_miss':
  if len(args) != 2:
    print('ipv6_fib_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_fib_set_default_action_fib_hit_ecmp':
  if len(args) != 3:
    print('ipv6_fib_set_default_action_fib_hit_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_set_default_action_fib_hit_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_fib_set_default_action_fib_hit_nexthop':
  if len(args) != 3:
    print('ipv6_fib_set_default_action_fib_hit_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_fib_set_default_action_fib_hit_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ipv6_packet_set_default_action_set_malformed_outer_ipv6_packet':
  if len(args) != 3:
    print('validate_outer_ipv6_packet_set_default_action_set_malformed_outer_ipv6_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv6_packet_set_default_action_set_malformed_outer_ipv6_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ipv6_packet_set_default_action_set_valid_outer_ipv6_packet':
  if len(args) != 2:
    print('validate_outer_ipv6_packet_set_default_action_set_valid_outer_ipv6_packet requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv6_packet_set_default_action_set_valid_outer_ipv6_packet(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv6_ipv4_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv6_ipv4_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv6_ipv4_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv4_genv_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv4_genv_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv4_genv_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv4_gre_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv4_gre_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv4_gre_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv6_vxlan_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv6_vxlan_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv6_vxlan_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_mpls_ip_push1_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_mpls_ip_push1_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_mpls_ip_push1_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_mpls_ethernet_push3_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_mpls_ethernet_push3_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_mpls_ethernet_push3_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv6_gre_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv6_gre_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv6_gre_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_mpls_ethernet_push1_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_mpls_ethernet_push1_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_mpls_ethernet_push1_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv4_ipv4_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv4_ipv4_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv4_ipv4_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv4_nvgre_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv4_nvgre_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv4_nvgre_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv6_erspan_t3_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv6_erspan_t3_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv6_erspan_t3_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_mpls_ethernet_push2_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_mpls_ethernet_push2_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_mpls_ethernet_push2_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv6_nvgre_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv6_nvgre_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv6_nvgre_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_nop':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_mpls_ip_push3_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_mpls_ip_push3_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_mpls_ip_push3_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv4_ipv6_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv4_ipv6_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv4_ipv6_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv6_ipv6_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv6_ipv6_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv6_ipv6_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv4_vxlan_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv4_vxlan_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv4_vxlan_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv6_genv_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv6_genv_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv6_genv_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_ipv4_erspan_t3_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_ipv4_erspan_t3_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_ipv4_erspan_t3_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_fabric_rewrite':
  if len(args) != 3:
    print('tunnel_encap_process_outer_set_default_action_fabric_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_fabric_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_encap_process_outer_set_default_action_mpls_ip_push2_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_outer_set_default_action_mpls_ip_push2_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_outer_set_default_action_mpls_ip_push2_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'storm_control_set_default_action_nop':
  if len(args) != 2:
    print('storm_control_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.storm_control_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'storm_control_set_default_action_set_storm_control_meter':
  if len(args) != 3:
    print('storm_control_set_default_action_set_storm_control_meter requires 3 args')
    sys.exit(1)
  pp.pprint(client.storm_control_set_default_action_set_storm_control_meter(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_inner_set_default_action_decap_inner_udp':
  if len(args) != 2:
    print('tunnel_decap_process_inner_set_default_action_decap_inner_udp requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_set_default_action_decap_inner_udp(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_inner_set_default_action_decap_inner_icmp':
  if len(args) != 2:
    print('tunnel_decap_process_inner_set_default_action_decap_inner_icmp requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_set_default_action_decap_inner_icmp(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_inner_set_default_action_decap_inner_unknown':
  if len(args) != 2:
    print('tunnel_decap_process_inner_set_default_action_decap_inner_unknown requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_set_default_action_decap_inner_unknown(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_inner_set_default_action_decap_inner_tcp':
  if len(args) != 2:
    print('tunnel_decap_process_inner_set_default_action_decap_inner_tcp requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_inner_set_default_action_decap_inner_tcp(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_stats_set_default_action_drop_stats_update':
  if len(args) != 2:
    print('drop_stats_set_default_action_drop_stats_update requires 2 args')
    sys.exit(1)
  pp.pprint(client.drop_stats_set_default_action_drop_stats_update(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_urpf_set_default_action_on_miss':
  if len(args) != 2:
    print('ipv6_urpf_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_urpf_set_default_action_ipv6_urpf_hit':
  if len(args) != 3:
    print('ipv6_urpf_set_default_action_ipv6_urpf_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_set_default_action_ipv6_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'dmac_set_default_action_dmac_miss':
  if len(args) != 2:
    print('dmac_set_default_action_dmac_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.dmac_set_default_action_dmac_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'dmac_set_default_action_dmac_redirect_ecmp':
  if len(args) != 3:
    print('dmac_set_default_action_dmac_redirect_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.dmac_set_default_action_dmac_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'dmac_set_default_action_dmac_drop':
  if len(args) != 2:
    print('dmac_set_default_action_dmac_drop requires 2 args')
    sys.exit(1)
  pp.pprint(client.dmac_set_default_action_dmac_drop(eval(args[0]),eval(args[1]),))

elif cmd == 'dmac_set_default_action_dmac_redirect_nexthop':
  if len(args) != 3:
    print('dmac_set_default_action_dmac_redirect_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.dmac_set_default_action_dmac_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'dmac_set_default_action_nop':
  if len(args) != 2:
    print('dmac_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.dmac_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'dmac_set_default_action_dmac_multicast_hit':
  if len(args) != 3:
    print('dmac_set_default_action_dmac_multicast_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.dmac_set_default_action_dmac_multicast_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'dmac_set_default_action_dmac_hit':
  if len(args) != 3:
    print('dmac_set_default_action_dmac_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.dmac_set_default_action_dmac_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'urpf_bd_set_default_action_urpf_bd_miss':
  if len(args) != 2:
    print('urpf_bd_set_default_action_urpf_bd_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.urpf_bd_set_default_action_urpf_bd_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'urpf_bd_set_default_action_nop':
  if len(args) != 2:
    print('urpf_bd_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.urpf_bd_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_racl_set_default_action_racl_redirect_nexthop':
  if len(args) != 3:
    print('ipv6_racl_set_default_action_racl_redirect_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_set_default_action_racl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_racl_set_default_action_racl_deny':
  if len(args) != 3:
    print('ipv6_racl_set_default_action_racl_deny requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_set_default_action_racl_deny(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_racl_set_default_action_racl_redirect_ecmp':
  if len(args) != 3:
    print('ipv6_racl_set_default_action_racl_redirect_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_set_default_action_racl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_racl_set_default_action_nop':
  if len(args) != 2:
    print('ipv6_racl_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv6_racl_set_default_action_racl_log':
  if len(args) != 3:
    print('ipv6_racl_set_default_action_racl_log requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_set_default_action_racl_log(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_racl_set_default_action_racl_permit':
  if len(args) != 3:
    print('ipv6_racl_set_default_action_racl_permit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_racl_set_default_action_racl_permit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i12':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i12 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i12(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i13':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i13 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i13(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i10':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i10 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i10(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i11':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i11 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i11(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i14':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i14 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i14(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i15':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i15 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i15(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i8':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i8 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i8(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i9':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i9 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i9(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i0':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i0 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i0(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i1':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i1(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i2':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i2(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i3':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i3(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i4':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i4(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i5':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i5 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i5(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i6':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i6 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i6(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0003_set_default_action_int_set_header_0003_i7':
  if len(args) != 2:
    print('int_inst_0003_set_default_action_int_set_header_0003_i7 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0003_set_default_action_int_set_header_0003_i7(eval(args[0]),eval(args[1]),))

elif cmd == 'compute_ipv4_hashes_set_default_action_compute_lkp_ipv4_hash':
  if len(args) != 2:
    print('compute_ipv4_hashes_set_default_action_compute_lkp_ipv4_hash requires 2 args')
    sys.exit(1)
  pp.pprint(client.compute_ipv4_hashes_set_default_action_compute_lkp_ipv4_hash(eval(args[0]),eval(args[1]),))

elif cmd == 'nexthop_set_default_action_set_nexthop_details':
  if len(args) != 3:
    print('nexthop_set_default_action_set_nexthop_details requires 3 args')
    sys.exit(1)
  pp.pprint(client.nexthop_set_default_action_set_nexthop_details(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'nexthop_set_default_action_set_nexthop_details_for_post_routed_flood':
  if len(args) != 3:
    print('nexthop_set_default_action_set_nexthop_details_for_post_routed_flood requires 3 args')
    sys.exit(1)
  pp.pprint(client.nexthop_set_default_action_set_nexthop_details_for_post_routed_flood(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'nexthop_set_default_action_nop':
  if len(args) != 2:
    print('nexthop_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.nexthop_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_outer_ipv4_packet_set_default_action_set_malformed_outer_ipv4_packet':
  if len(args) != 3:
    print('validate_outer_ipv4_packet_set_default_action_set_malformed_outer_ipv4_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv4_packet_set_default_action_set_malformed_outer_ipv4_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_outer_ipv4_packet_set_default_action_set_valid_outer_ipv4_packet':
  if len(args) != 2:
    print('validate_outer_ipv4_packet_set_default_action_set_valid_outer_ipv4_packet requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_outer_ipv4_packet_set_default_action_set_valid_outer_ipv4_packet(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_rewrite_set_default_action_fabric_multicast_rewrite':
  if len(args) != 3:
    print('tunnel_rewrite_set_default_action_fabric_multicast_rewrite requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_set_default_action_fabric_multicast_rewrite(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_set_default_action_cpu_rx_rewrite':
  if len(args) != 2:
    print('tunnel_rewrite_set_default_action_cpu_rx_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_set_default_action_cpu_rx_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_rewrite_set_default_action_set_tunnel_rewrite_details':
  if len(args) != 3:
    print('tunnel_rewrite_set_default_action_set_tunnel_rewrite_details requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_set_default_action_set_tunnel_rewrite_details(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_set_default_action_set_mpls_rewrite_push1':
  if len(args) != 3:
    print('tunnel_rewrite_set_default_action_set_mpls_rewrite_push1 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_set_default_action_set_mpls_rewrite_push1(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_set_default_action_set_mpls_rewrite_push3':
  if len(args) != 3:
    print('tunnel_rewrite_set_default_action_set_mpls_rewrite_push3 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_set_default_action_set_mpls_rewrite_push3(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_set_default_action_set_mpls_rewrite_push2':
  if len(args) != 3:
    print('tunnel_rewrite_set_default_action_set_mpls_rewrite_push2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_set_default_action_set_mpls_rewrite_push2(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_rewrite_set_default_action_nop':
  if len(args) != 2:
    print('tunnel_rewrite_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_rewrite_set_default_action_fabric_unicast_rewrite':
  if len(args) != 2:
    print('tunnel_rewrite_set_default_action_fabric_unicast_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_rewrite_set_default_action_fabric_unicast_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_ipv6_over_fabric':
  if len(args) != 2:
    print('tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_ipv6_over_fabric requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_ipv6_over_fabric(eval(args[0]),eval(args[1]),))

elif cmd == 'tunneled_packet_over_fabric_set_default_action_terminate_inner_ipv4_over_fabric':
  if len(args) != 2:
    print('tunneled_packet_over_fabric_set_default_action_terminate_inner_ipv4_over_fabric requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_set_default_action_terminate_inner_ipv4_over_fabric(eval(args[0]),eval(args[1]),))

elif cmd == 'tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_non_ip_over_fabric':
  if len(args) != 2:
    print('tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_non_ip_over_fabric requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_non_ip_over_fabric(eval(args[0]),eval(args[1]),))

elif cmd == 'tunneled_packet_over_fabric_set_default_action_terminate_inner_ipv6_over_fabric':
  if len(args) != 2:
    print('tunneled_packet_over_fabric_set_default_action_terminate_inner_ipv6_over_fabric requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_set_default_action_terminate_inner_ipv6_over_fabric(eval(args[0]),eval(args[1]),))

elif cmd == 'tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_ipv4_over_fabric':
  if len(args) != 2:
    print('tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_ipv4_over_fabric requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunneled_packet_over_fabric_set_default_action_terminate_inner_ethernet_ipv4_over_fabric(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_lag_set_default_action_set_egress_ifindex':
  if len(args) != 3:
    print('egress_lag_set_default_action_set_egress_ifindex requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_lag_set_default_action_set_egress_ifindex(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_urpf_lpm_set_default_action_ipv6_urpf_hit':
  if len(args) != 3:
    print('ipv6_urpf_lpm_set_default_action_ipv6_urpf_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_lpm_set_default_action_ipv6_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv6_urpf_lpm_set_default_action_urpf_miss':
  if len(args) != 2:
    print('ipv6_urpf_lpm_set_default_action_urpf_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv6_urpf_lpm_set_default_action_urpf_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_packet_set_default_action_set_unicast_and_ipv6_src_is_link_local':
  if len(args) != 2:
    print('validate_packet_set_default_action_set_unicast_and_ipv6_src_is_link_local requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_set_default_action_set_unicast_and_ipv6_src_is_link_local(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_packet_set_default_action_set_unicast':
  if len(args) != 2:
    print('validate_packet_set_default_action_set_unicast requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_set_default_action_set_unicast(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_packet_set_default_action_set_malformed_packet':
  if len(args) != 3:
    print('validate_packet_set_default_action_set_malformed_packet requires 3 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_set_default_action_set_malformed_packet(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'validate_packet_set_default_action_set_multicast_and_ipv6_src_is_link_local':
  if len(args) != 2:
    print('validate_packet_set_default_action_set_multicast_and_ipv6_src_is_link_local requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_set_default_action_set_multicast_and_ipv6_src_is_link_local(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_packet_set_default_action_set_broadcast':
  if len(args) != 2:
    print('validate_packet_set_default_action_set_broadcast requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_set_default_action_set_broadcast(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_packet_set_default_action_nop':
  if len(args) != 2:
    print('validate_packet_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'validate_packet_set_default_action_set_multicast':
  if len(args) != 2:
    print('validate_packet_set_default_action_set_multicast requires 2 args')
    sys.exit(1)
  pp.pprint(client.validate_packet_set_default_action_set_multicast(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i12':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i12 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i12(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i13':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i13 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i13(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i10':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i10 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i10(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i11':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i11 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i11(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i14':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i14 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i14(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i15':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i15 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i15(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i8':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i8 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i8(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i9':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i9 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i9(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i0':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i0 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i0(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i1':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i1(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i2':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i2(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i3':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i3(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i4':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i4(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i5':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i5 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i5(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i6':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i6 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i6(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0407_set_default_action_int_set_header_0407_i7':
  if len(args) != 2:
    print('int_inst_0407_set_default_action_int_set_header_0407_i7 requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0407_set_default_action_int_set_header_0407_i7(eval(args[0]),eval(args[1]),))

elif cmd == 'rmac_set_default_action_rmac_hit':
  if len(args) != 2:
    print('rmac_set_default_action_rmac_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.rmac_set_default_action_rmac_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'rmac_set_default_action_rmac_miss':
  if len(args) != 2:
    print('rmac_set_default_action_rmac_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.rmac_set_default_action_rmac_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_ipv4_icmp_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_ipv4_icmp_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_ipv4_icmp_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_ipv4_unknown_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_ipv4_unknown_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_ipv4_unknown_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_non_ip_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_non_ip_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_non_ip_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_ipv6_tcp_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_ipv6_tcp_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_ipv6_tcp_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_ipv6_unknown_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_ipv6_unknown_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_ipv6_unknown_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_ipv4_tcp_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_ipv4_tcp_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_ipv4_tcp_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_ipv4_udp_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_ipv4_udp_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_ipv4_udp_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_ipv6_icmp_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_ipv6_icmp_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_ipv6_icmp_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_encap_process_inner_set_default_action_inner_ipv6_udp_rewrite':
  if len(args) != 2:
    print('tunnel_encap_process_inner_set_default_action_inner_ipv6_udp_rewrite requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_encap_process_inner_set_default_action_inner_ipv6_udp_rewrite(eval(args[0]),eval(args[1]),))

elif cmd == 'replica_type_set_default_action_set_replica_copy_bridged':
  if len(args) != 2:
    print('replica_type_set_default_action_set_replica_copy_bridged requires 2 args')
    sys.exit(1)
  pp.pprint(client.replica_type_set_default_action_set_replica_copy_bridged(eval(args[0]),eval(args[1]),))

elif cmd == 'replica_type_set_default_action_nop':
  if len(args) != 2:
    print('replica_type_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.replica_type_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'mac_rewrite_set_default_action_rewrite_ipv6_unicast_mac':
  if len(args) != 3:
    print('mac_rewrite_set_default_action_rewrite_ipv6_unicast_mac requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_set_default_action_rewrite_ipv6_unicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_rewrite_set_default_action_rewrite_ipv4_multicast_mac':
  if len(args) != 3:
    print('mac_rewrite_set_default_action_rewrite_ipv4_multicast_mac requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_set_default_action_rewrite_ipv4_multicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_rewrite_set_default_action_rewrite_mpls_mac':
  if len(args) != 3:
    print('mac_rewrite_set_default_action_rewrite_mpls_mac requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_set_default_action_rewrite_mpls_mac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_rewrite_set_default_action_rewrite_ipv6_multicast_mac':
  if len(args) != 3:
    print('mac_rewrite_set_default_action_rewrite_ipv6_multicast_mac requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_set_default_action_rewrite_ipv6_multicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_rewrite_set_default_action_rewrite_ipv4_unicast_mac':
  if len(args) != 3:
    print('mac_rewrite_set_default_action_rewrite_ipv4_unicast_mac requires 3 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_set_default_action_rewrite_ipv4_unicast_mac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_rewrite_set_default_action_nop':
  if len(args) != 2:
    print('mac_rewrite_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.mac_rewrite_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'mirror_set_default_action_nop':
  if len(args) != 2:
    print('mirror_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.mirror_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'mirror_set_default_action_set_mirror_nhop':
  if len(args) != 3:
    print('mirror_set_default_action_set_mirror_nhop requires 3 args')
    sys.exit(1)
  pp.pprint(client.mirror_set_default_action_set_mirror_nhop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mirror_set_default_action_set_mirror_bd':
  if len(args) != 3:
    print('mirror_set_default_action_set_mirror_bd requires 3 args')
    sys.exit(1)
  pp.pprint(client.mirror_set_default_action_set_mirror_bd(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_ipv4':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_ipv4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_ipv4(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_ipv6':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_ipv6 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_ipv6(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_genv_inner_non_ip':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_genv_inner_non_ip requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_genv_inner_non_ip(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_ipv4':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_ipv4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_ipv4(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_ipv6':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_ipv6 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_ipv6(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_non_ip':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_non_ip requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_vxlan_inner_non_ip(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop2':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop2(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop3':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop3(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop1':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv4_pop1(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_non_ip':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_non_ip requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_nvgre_inner_non_ip(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop2':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop2(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop3':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop3(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop1':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_non_ip_pop1(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_ip_inner_ipv4':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_ip_inner_ipv4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_ip_inner_ipv4(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop1':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop1(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop3':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop3(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop2':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv6_pop2(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop1':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop1(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop2':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop2(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop3':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ethernet_ipv6_pop3(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop3':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop3 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop3(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop2':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop2(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop1':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop1 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_mpls_inner_ipv4_pop1(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_ip_inner_ipv6':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_ip_inner_ipv6 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_ip_inner_ipv6(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_genv_inner_ipv6':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_genv_inner_ipv6 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_genv_inner_ipv6(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_decap_process_outer_set_default_action_decap_genv_inner_ipv4':
  if len(args) != 2:
    print('tunnel_decap_process_outer_set_default_action_decap_genv_inner_ipv4 requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_decap_process_outer_set_default_action_decap_genv_inner_ipv4(eval(args[0]),eval(args[1]),))

elif cmd == 'system_acl_set_default_action_drop_packet':
  if len(args) != 2:
    print('system_acl_set_default_action_drop_packet requires 2 args')
    sys.exit(1)
  pp.pprint(client.system_acl_set_default_action_drop_packet(eval(args[0]),eval(args[1]),))

elif cmd == 'system_acl_set_default_action_redirect_to_cpu':
  if len(args) != 3:
    print('system_acl_set_default_action_redirect_to_cpu requires 3 args')
    sys.exit(1)
  pp.pprint(client.system_acl_set_default_action_redirect_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_set_default_action_congestion_mirror_set':
  if len(args) != 2:
    print('system_acl_set_default_action_congestion_mirror_set requires 2 args')
    sys.exit(1)
  pp.pprint(client.system_acl_set_default_action_congestion_mirror_set(eval(args[0]),eval(args[1]),))

elif cmd == 'system_acl_set_default_action_negative_mirror':
  if len(args) != 2:
    print('system_acl_set_default_action_negative_mirror requires 2 args')
    sys.exit(1)
  pp.pprint(client.system_acl_set_default_action_negative_mirror(eval(args[0]),eval(args[1]),))

elif cmd == 'system_acl_set_default_action_drop_packet_with_reason':
  if len(args) != 3:
    print('system_acl_set_default_action_drop_packet_with_reason requires 3 args')
    sys.exit(1)
  pp.pprint(client.system_acl_set_default_action_drop_packet_with_reason(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_set_default_action_copy_to_cpu':
  if len(args) != 3:
    print('system_acl_set_default_action_copy_to_cpu requires 3 args')
    sys.exit(1)
  pp.pprint(client.system_acl_set_default_action_copy_to_cpu(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'system_acl_set_default_action_nop':
  if len(args) != 2:
    print('system_acl_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.system_acl_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_dmac_rewrite_set_default_action_nop':
  if len(args) != 2:
    print('tunnel_dmac_rewrite_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dmac_rewrite_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_dmac_rewrite_set_default_action_rewrite_tunnel_dmac':
  if len(args) != 3:
    print('tunnel_dmac_rewrite_set_default_action_rewrite_tunnel_dmac requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_dmac_rewrite_set_default_action_rewrite_tunnel_dmac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compute_ipv6_hashes_set_default_action_compute_lkp_ipv6_hash':
  if len(args) != 2:
    print('compute_ipv6_hashes_set_default_action_compute_lkp_ipv6_hash requires 2 args')
    sys.exit(1)
  pp.pprint(client.compute_ipv6_hashes_set_default_action_compute_lkp_ipv6_hash(eval(args[0]),eval(args[1]),))

elif cmd == 'bd_flood_set_default_action_nop':
  if len(args) != 2:
    print('bd_flood_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.bd_flood_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'bd_flood_set_default_action_set_bd_flood_mc_index':
  if len(args) != 3:
    print('bd_flood_set_default_action_set_bd_flood_mc_index requires 3 args')
    sys.exit(1)
  pp.pprint(client.bd_flood_set_default_action_set_bd_flood_mc_index(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'egress_vni_set_default_action_nop':
  if len(args) != 2:
    print('egress_vni_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.egress_vni_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'egress_vni_set_default_action_set_egress_tunnel_vni':
  if len(args) != 3:
    print('egress_vni_set_default_action_set_egress_tunnel_vni requires 3 args')
    sys.exit(1)
  pp.pprint(client.egress_vni_set_default_action_set_egress_tunnel_vni(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_set_default_action_terminate_tunnel_inner_non_ip':
  if len(args) != 3:
    print('tunnel_set_default_action_terminate_tunnel_inner_non_ip requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_set_default_action_terminate_tunnel_inner_non_ip(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_set_default_action_terminate_tunnel_inner_ethernet_ipv6':
  if len(args) != 3:
    print('tunnel_set_default_action_terminate_tunnel_inner_ethernet_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_set_default_action_terminate_tunnel_inner_ethernet_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_set_default_action_terminate_tunnel_inner_ethernet_ipv4':
  if len(args) != 3:
    print('tunnel_set_default_action_terminate_tunnel_inner_ethernet_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_set_default_action_terminate_tunnel_inner_ethernet_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_set_default_action_terminate_tunnel_inner_ipv4':
  if len(args) != 3:
    print('tunnel_set_default_action_terminate_tunnel_inner_ipv4 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_set_default_action_terminate_tunnel_inner_ipv4(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_set_default_action_terminate_tunnel_inner_ipv6':
  if len(args) != 3:
    print('tunnel_set_default_action_terminate_tunnel_inner_ipv6 requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_set_default_action_terminate_tunnel_inner_ipv6(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'tunnel_set_default_action_nop':
  if len(args) != 2:
    print('tunnel_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'acl_stats_set_default_action_acl_stats_update':
  if len(args) != 2:
    print('acl_stats_set_default_action_acl_stats_update requires 2 args')
    sys.exit(1)
  pp.pprint(client.acl_stats_set_default_action_acl_stats_update(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_urpf_lpm_set_default_action_ipv4_urpf_hit':
  if len(args) != 3:
    print('ipv4_urpf_lpm_set_default_action_ipv4_urpf_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_lpm_set_default_action_ipv4_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_urpf_lpm_set_default_action_urpf_miss':
  if len(args) != 2:
    print('ipv4_urpf_lpm_set_default_action_urpf_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_lpm_set_default_action_urpf_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_1215_set_default_action_nop':
  if len(args) != 2:
    print('int_inst_1215_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_1215_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'mpls_set_default_action_forward_mpls':
  if len(args) != 3:
    print('mpls_set_default_action_forward_mpls requires 3 args')
    sys.exit(1)
  pp.pprint(client.mpls_set_default_action_forward_mpls(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mpls_set_default_action_terminate_vpls':
  if len(args) != 3:
    print('mpls_set_default_action_terminate_vpls requires 3 args')
    sys.exit(1)
  pp.pprint(client.mpls_set_default_action_terminate_vpls(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mpls_set_default_action_terminate_eompls':
  if len(args) != 3:
    print('mpls_set_default_action_terminate_eompls requires 3 args')
    sys.exit(1)
  pp.pprint(client.mpls_set_default_action_terminate_eompls(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mpls_set_default_action_terminate_ipv4_over_mpls':
  if len(args) != 3:
    print('mpls_set_default_action_terminate_ipv4_over_mpls requires 3 args')
    sys.exit(1)
  pp.pprint(client.mpls_set_default_action_terminate_ipv4_over_mpls(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mpls_set_default_action_terminate_pw':
  if len(args) != 3:
    print('mpls_set_default_action_terminate_pw requires 3 args')
    sys.exit(1)
  pp.pprint(client.mpls_set_default_action_terminate_pw(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mpls_set_default_action_terminate_ipv6_over_mpls':
  if len(args) != 3:
    print('mpls_set_default_action_terminate_ipv6_over_mpls requires 3 args')
    sys.exit(1)
  pp.pprint(client.mpls_set_default_action_terminate_ipv6_over_mpls(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_dest_vtep_set_default_action_set_tunnel_termination_flag':
  if len(args) != 2:
    print('ipv4_dest_vtep_set_default_action_set_tunnel_termination_flag requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_dest_vtep_set_default_action_set_tunnel_termination_flag(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_dest_vtep_set_default_action_nop':
  if len(args) != 2:
    print('ipv4_dest_vtep_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_dest_vtep_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_ingress_src_lkp_set_default_action_set_ingress_ifindex_properties':
  if len(args) != 2:
    print('fabric_ingress_src_lkp_set_default_action_set_ingress_ifindex_properties requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_src_lkp_set_default_action_set_ingress_ifindex_properties(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_ingress_src_lkp_set_default_action_nop':
  if len(args) != 2:
    print('fabric_ingress_src_lkp_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_ingress_src_lkp_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'int_insert_set_default_action_int_transit':
  if len(args) != 3:
    print('int_insert_set_default_action_int_transit requires 3 args')
    sys.exit(1)
  pp.pprint(client.int_insert_set_default_action_int_transit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'int_insert_set_default_action_int_reset':
  if len(args) != 2:
    print('int_insert_set_default_action_int_reset requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_insert_set_default_action_int_reset(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_smac_rewrite_set_default_action_nop':
  if len(args) != 2:
    print('tunnel_smac_rewrite_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.tunnel_smac_rewrite_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'tunnel_smac_rewrite_set_default_action_rewrite_tunnel_smac':
  if len(args) != 3:
    print('tunnel_smac_rewrite_set_default_action_rewrite_tunnel_smac requires 3 args')
    sys.exit(1)
  pp.pprint(client.tunnel_smac_rewrite_set_default_action_rewrite_tunnel_smac(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_urpf_set_default_action_ipv4_urpf_hit':
  if len(args) != 3:
    print('ipv4_urpf_set_default_action_ipv4_urpf_hit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_set_default_action_ipv4_urpf_hit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_urpf_set_default_action_on_miss':
  if len(args) != 2:
    print('ipv4_urpf_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_urpf_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'int_meta_header_update_set_default_action_int_update_total_hop_cnt':
  if len(args) != 2:
    print('int_meta_header_update_set_default_action_int_update_total_hop_cnt requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_meta_header_update_set_default_action_int_update_total_hop_cnt(eval(args[0]),eval(args[1]),))

elif cmd == 'int_meta_header_update_set_default_action_int_set_e_bit':
  if len(args) != 2:
    print('int_meta_header_update_set_default_action_int_set_e_bit requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_meta_header_update_set_default_action_int_set_e_bit(eval(args[0]),eval(args[1]),))

elif cmd == 'ipsg_permit_special_set_default_action_ipsg_miss':
  if len(args) != 2:
    print('ipsg_permit_special_set_default_action_ipsg_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipsg_permit_special_set_default_action_ipsg_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_racl_set_default_action_racl_redirect_nexthop':
  if len(args) != 3:
    print('ipv4_racl_set_default_action_racl_redirect_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_set_default_action_racl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_racl_set_default_action_racl_deny':
  if len(args) != 3:
    print('ipv4_racl_set_default_action_racl_deny requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_set_default_action_racl_deny(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_racl_set_default_action_racl_redirect_ecmp':
  if len(args) != 3:
    print('ipv4_racl_set_default_action_racl_redirect_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_set_default_action_racl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_racl_set_default_action_nop':
  if len(args) != 2:
    print('ipv4_racl_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'ipv4_racl_set_default_action_racl_log':
  if len(args) != 3:
    print('ipv4_racl_set_default_action_racl_log requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_set_default_action_racl_log(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ipv4_racl_set_default_action_racl_permit':
  if len(args) != 3:
    print('ipv4_racl_set_default_action_racl_permit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ipv4_racl_set_default_action_racl_permit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_set_default_action_acl_dod_en':
  if len(args) != 2:
    print('ip_acl_set_default_action_acl_dod_en requires 2 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_set_default_action_acl_dod_en(eval(args[0]),eval(args[1]),))

elif cmd == 'ip_acl_set_default_action_acl_log':
  if len(args) != 3:
    print('ip_acl_set_default_action_acl_log requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_set_default_action_acl_log(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_set_default_action_acl_mirror':
  if len(args) != 3:
    print('ip_acl_set_default_action_acl_mirror requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_set_default_action_acl_mirror(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_set_default_action_acl_deny':
  if len(args) != 3:
    print('ip_acl_set_default_action_acl_deny requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_set_default_action_acl_deny(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_set_default_action_acl_permit':
  if len(args) != 3:
    print('ip_acl_set_default_action_acl_permit requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_set_default_action_acl_permit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_set_default_action_acl_redirect_nexthop':
  if len(args) != 3:
    print('ip_acl_set_default_action_acl_redirect_nexthop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_set_default_action_acl_redirect_nexthop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_set_default_action_acl_redirect_ecmp':
  if len(args) != 3:
    print('ip_acl_set_default_action_acl_redirect_ecmp requires 3 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_set_default_action_acl_redirect_ecmp(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ip_acl_set_default_action_nop':
  if len(args) != 2:
    print('ip_acl_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.ip_acl_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'outer_rmac_set_default_action_on_miss':
  if len(args) != 2:
    print('outer_rmac_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.outer_rmac_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'outer_rmac_set_default_action_outer_rmac_hit':
  if len(args) != 2:
    print('outer_rmac_set_default_action_outer_rmac_hit requires 2 args')
    sys.exit(1)
  pp.pprint(client.outer_rmac_set_default_action_outer_rmac_hit(eval(args[0]),eval(args[1]),))

elif cmd == 'int_inst_0811_set_default_action_nop':
  if len(args) != 2:
    print('int_inst_0811_set_default_action_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.int_inst_0811_set_default_action_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'ipsg_set_default_action_on_miss':
  if len(args) != 2:
    print('ipsg_set_default_action_on_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.ipsg_set_default_action_on_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'lag_action_profile_add_member_with_set_lag_miss':
  if len(args) != 2:
    print('lag_action_profile_add_member_with_set_lag_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_add_member_with_set_lag_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'lag_action_profile_modify_member_with_set_lag_miss':
  if len(args) != 3:
    print('lag_action_profile_modify_member_with_set_lag_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_modify_member_with_set_lag_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'lag_action_profile_add_member_with_set_lag_port':
  if len(args) != 3:
    print('lag_action_profile_add_member_with_set_lag_port requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_add_member_with_set_lag_port(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'lag_action_profile_modify_member_with_set_lag_port':
  if len(args) != 4:
    print('lag_action_profile_modify_member_with_set_lag_port requires 4 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_modify_member_with_set_lag_port(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'lag_action_profile_add_member_with_set_lag_remote_port':
  if len(args) != 3:
    print('lag_action_profile_add_member_with_set_lag_remote_port requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_add_member_with_set_lag_remote_port(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'lag_action_profile_modify_member_with_set_lag_remote_port':
  if len(args) != 4:
    print('lag_action_profile_modify_member_with_set_lag_remote_port requires 4 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_modify_member_with_set_lag_remote_port(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'lag_action_profile_del_member':
  if len(args) != 3:
    print('lag_action_profile_del_member requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_del_member(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'lag_action_profile_create_group':
  if len(args) != 3:
    print('lag_action_profile_create_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_create_group(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'lag_action_profile_del_group':
  if len(args) != 3:
    print('lag_action_profile_del_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_del_group(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'lag_action_profile_add_member_to_group':
  if len(args) != 4:
    print('lag_action_profile_add_member_to_group requires 4 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_add_member_to_group(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'lag_action_profile_del_member_from_group':
  if len(args) != 4:
    print('lag_action_profile_del_member_from_group requires 4 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_del_member_from_group(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'lag_action_profile_deactivate_group_member':
  if len(args) != 4:
    print('lag_action_profile_deactivate_group_member requires 4 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_deactivate_group_member(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'lag_action_profile_reactivate_group_member':
  if len(args) != 4:
    print('lag_action_profile_reactivate_group_member requires 4 args')
    sys.exit(1)
  pp.pprint(client.lag_action_profile_reactivate_group_member(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ecmp_action_profile_add_member_with_set_ecmp_nexthop_details_for_post_routed_flood':
  if len(args) != 3:
    print('ecmp_action_profile_add_member_with_set_ecmp_nexthop_details_for_post_routed_flood requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_add_member_with_set_ecmp_nexthop_details_for_post_routed_flood(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_action_profile_modify_member_with_set_ecmp_nexthop_details_for_post_routed_flood':
  if len(args) != 4:
    print('ecmp_action_profile_modify_member_with_set_ecmp_nexthop_details_for_post_routed_flood requires 4 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_modify_member_with_set_ecmp_nexthop_details_for_post_routed_flood(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ecmp_action_profile_add_member_with_nop':
  if len(args) != 2:
    print('ecmp_action_profile_add_member_with_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_add_member_with_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'ecmp_action_profile_modify_member_with_nop':
  if len(args) != 3:
    print('ecmp_action_profile_modify_member_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_modify_member_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_action_profile_add_member_with_set_ecmp_nexthop_details':
  if len(args) != 3:
    print('ecmp_action_profile_add_member_with_set_ecmp_nexthop_details requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_add_member_with_set_ecmp_nexthop_details(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_action_profile_modify_member_with_set_ecmp_nexthop_details':
  if len(args) != 4:
    print('ecmp_action_profile_modify_member_with_set_ecmp_nexthop_details requires 4 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_modify_member_with_set_ecmp_nexthop_details(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ecmp_action_profile_del_member':
  if len(args) != 3:
    print('ecmp_action_profile_del_member requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_del_member(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_action_profile_create_group':
  if len(args) != 3:
    print('ecmp_action_profile_create_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_create_group(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_action_profile_del_group':
  if len(args) != 3:
    print('ecmp_action_profile_del_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_del_group(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_action_profile_add_member_to_group':
  if len(args) != 4:
    print('ecmp_action_profile_add_member_to_group requires 4 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_add_member_to_group(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ecmp_action_profile_del_member_from_group':
  if len(args) != 4:
    print('ecmp_action_profile_del_member_from_group requires 4 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_del_member_from_group(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ecmp_action_profile_deactivate_group_member':
  if len(args) != 4:
    print('ecmp_action_profile_deactivate_group_member requires 4 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_deactivate_group_member(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ecmp_action_profile_reactivate_group_member':
  if len(args) != 4:
    print('ecmp_action_profile_reactivate_group_member requires 4 args')
    sys.exit(1)
  pp.pprint(client.ecmp_action_profile_reactivate_group_member(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'bd_action_profile_add_member_with_port_vlan_mapping_miss':
  if len(args) != 2:
    print('bd_action_profile_add_member_with_port_vlan_mapping_miss requires 2 args')
    sys.exit(1)
  pp.pprint(client.bd_action_profile_add_member_with_port_vlan_mapping_miss(eval(args[0]),eval(args[1]),))

elif cmd == 'bd_action_profile_modify_member_with_port_vlan_mapping_miss':
  if len(args) != 3:
    print('bd_action_profile_modify_member_with_port_vlan_mapping_miss requires 3 args')
    sys.exit(1)
  pp.pprint(client.bd_action_profile_modify_member_with_port_vlan_mapping_miss(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bd_action_profile_add_member_with_set_bd':
  if len(args) != 3:
    print('bd_action_profile_add_member_with_set_bd requires 3 args')
    sys.exit(1)
  pp.pprint(client.bd_action_profile_add_member_with_set_bd(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bd_action_profile_modify_member_with_set_bd':
  if len(args) != 4:
    print('bd_action_profile_modify_member_with_set_bd requires 4 args')
    sys.exit(1)
  pp.pprint(client.bd_action_profile_modify_member_with_set_bd(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'bd_action_profile_del_member':
  if len(args) != 3:
    print('bd_action_profile_del_member requires 3 args')
    sys.exit(1)
  pp.pprint(client.bd_action_profile_del_member(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_action_profile_add_member_with_set_fabric_lag_port':
  if len(args) != 3:
    print('fabric_lag_action_profile_add_member_with_set_fabric_lag_port requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_add_member_with_set_fabric_lag_port(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_action_profile_modify_member_with_set_fabric_lag_port':
  if len(args) != 4:
    print('fabric_lag_action_profile_modify_member_with_set_fabric_lag_port requires 4 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_modify_member_with_set_fabric_lag_port(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fabric_lag_action_profile_add_member_with_set_fabric_multicast':
  if len(args) != 2:
    print('fabric_lag_action_profile_add_member_with_set_fabric_multicast requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_add_member_with_set_fabric_multicast(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_lag_action_profile_modify_member_with_set_fabric_multicast':
  if len(args) != 3:
    print('fabric_lag_action_profile_modify_member_with_set_fabric_multicast requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_modify_member_with_set_fabric_multicast(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_action_profile_add_member_with_nop':
  if len(args) != 2:
    print('fabric_lag_action_profile_add_member_with_nop requires 2 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_add_member_with_nop(eval(args[0]),eval(args[1]),))

elif cmd == 'fabric_lag_action_profile_modify_member_with_nop':
  if len(args) != 3:
    print('fabric_lag_action_profile_modify_member_with_nop requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_modify_member_with_nop(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_action_profile_del_member':
  if len(args) != 3:
    print('fabric_lag_action_profile_del_member requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_del_member(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_action_profile_create_group':
  if len(args) != 3:
    print('fabric_lag_action_profile_create_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_create_group(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_action_profile_del_group':
  if len(args) != 3:
    print('fabric_lag_action_profile_del_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_del_group(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_action_profile_add_member_to_group':
  if len(args) != 4:
    print('fabric_lag_action_profile_add_member_to_group requires 4 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_add_member_to_group(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fabric_lag_action_profile_del_member_from_group':
  if len(args) != 4:
    print('fabric_lag_action_profile_del_member_from_group requires 4 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_del_member_from_group(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fabric_lag_action_profile_deactivate_group_member':
  if len(args) != 4:
    print('fabric_lag_action_profile_deactivate_group_member requires 4 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_deactivate_group_member(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fabric_lag_action_profile_reactivate_group_member':
  if len(args) != 4:
    print('fabric_lag_action_profile_reactivate_group_member requires 4 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_action_profile_reactivate_group_member(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'lag_group_add_entry':
  if len(args) != 4:
    print('lag_group_add_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.lag_group_add_entry(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'lag_group_add_entry_with_selector':
  if len(args) != 4:
    print('lag_group_add_entry_with_selector requires 4 args')
    sys.exit(1)
  pp.pprint(client.lag_group_add_entry_with_selector(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ecmp_group_add_entry':
  if len(args) != 4:
    print('ecmp_group_add_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.ecmp_group_add_entry(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'ecmp_group_add_entry_with_selector':
  if len(args) != 4:
    print('ecmp_group_add_entry_with_selector requires 4 args')
    sys.exit(1)
  pp.pprint(client.ecmp_group_add_entry_with_selector(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'port_vlan_mapping_add_entry':
  if len(args) != 4:
    print('port_vlan_mapping_add_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.port_vlan_mapping_add_entry(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fabric_lag_add_entry':
  if len(args) != 4:
    print('fabric_lag_add_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_add_entry(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'fabric_lag_add_entry_with_selector':
  if len(args) != 4:
    print('fabric_lag_add_entry_with_selector requires 4 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_add_entry_with_selector(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'lag_group_set_default_entry':
  if len(args) != 3:
    print('lag_group_set_default_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_group_set_default_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'lag_group_set_default_entry_with_selector':
  if len(args) != 3:
    print('lag_group_set_default_entry_with_selector requires 3 args')
    sys.exit(1)
  pp.pprint(client.lag_group_set_default_entry_with_selector(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_group_set_default_entry':
  if len(args) != 3:
    print('ecmp_group_set_default_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_group_set_default_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'ecmp_group_set_default_entry_with_selector':
  if len(args) != 3:
    print('ecmp_group_set_default_entry_with_selector requires 3 args')
    sys.exit(1)
  pp.pprint(client.ecmp_group_set_default_entry_with_selector(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'port_vlan_mapping_set_default_entry':
  if len(args) != 3:
    print('port_vlan_mapping_set_default_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.port_vlan_mapping_set_default_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_set_default_entry':
  if len(args) != 3:
    print('fabric_lag_set_default_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_set_default_entry(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'fabric_lag_set_default_entry_with_selector':
  if len(args) != 3:
    print('fabric_lag_set_default_entry_with_selector requires 3 args')
    sys.exit(1)
  pp.pprint(client.fabric_lag_set_default_entry_with_selector(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'clean_all':
  if len(args) != 2:
    print('clean_all requires 2 args')
    sys.exit(1)
  pp.pprint(client.clean_all(eval(args[0]),eval(args[1]),))

elif cmd == 'tables_clean_all':
  if len(args) != 2:
    print('tables_clean_all requires 2 args')
    sys.exit(1)
  pp.pprint(client.tables_clean_all(eval(args[0]),eval(args[1]),))

elif cmd == 'counter_read_drop_stats_2':
  if len(args) != 4:
    print('counter_read_drop_stats_2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.counter_read_drop_stats_2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'counter_write_drop_stats_2':
  if len(args) != 4:
    print('counter_write_drop_stats_2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.counter_write_drop_stats_2(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'counter_read_acl_stats':
  if len(args) != 4:
    print('counter_read_acl_stats requires 4 args')
    sys.exit(1)
  pp.pprint(client.counter_read_acl_stats(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'counter_write_acl_stats':
  if len(args) != 4:
    print('counter_write_acl_stats requires 4 args')
    sys.exit(1)
  pp.pprint(client.counter_write_acl_stats(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'counter_read_ingress_bd_stats':
  if len(args) != 4:
    print('counter_read_ingress_bd_stats requires 4 args')
    sys.exit(1)
  pp.pprint(client.counter_read_ingress_bd_stats(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'counter_write_ingress_bd_stats':
  if len(args) != 4:
    print('counter_write_ingress_bd_stats requires 4 args')
    sys.exit(1)
  pp.pprint(client.counter_write_ingress_bd_stats(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'counter_read_drop_stats':
  if len(args) != 4:
    print('counter_read_drop_stats requires 4 args')
    sys.exit(1)
  pp.pprint(client.counter_read_drop_stats(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'counter_write_drop_stats':
  if len(args) != 4:
    print('counter_write_drop_stats requires 4 args')
    sys.exit(1)
  pp.pprint(client.counter_write_drop_stats(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'counter_hw_sync_drop_stats_2':
  if len(args) != 2:
    print('counter_hw_sync_drop_stats_2 requires 2 args')
    sys.exit(1)
  pp.pprint(client.counter_hw_sync_drop_stats_2(eval(args[0]),eval(args[1]),))

elif cmd == 'counter_hw_sync_acl_stats':
  if len(args) != 2:
    print('counter_hw_sync_acl_stats requires 2 args')
    sys.exit(1)
  pp.pprint(client.counter_hw_sync_acl_stats(eval(args[0]),eval(args[1]),))

elif cmd == 'counter_hw_sync_ingress_bd_stats':
  if len(args) != 2:
    print('counter_hw_sync_ingress_bd_stats requires 2 args')
    sys.exit(1)
  pp.pprint(client.counter_hw_sync_ingress_bd_stats(eval(args[0]),eval(args[1]),))

elif cmd == 'counter_hw_sync_drop_stats':
  if len(args) != 2:
    print('counter_hw_sync_drop_stats requires 2 args')
    sys.exit(1)
  pp.pprint(client.counter_hw_sync_drop_stats(eval(args[0]),eval(args[1]),))

elif cmd == 'meter_configure_storm_control_meter':
  if len(args) != 7:
    print('meter_configure_storm_control_meter requires 7 args')
    sys.exit(1)
  pp.pprint(client.meter_configure_storm_control_meter(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'mirroring_mapping_add':
  if len(args) != 2:
    print('mirroring_mapping_add requires 2 args')
    sys.exit(1)
  pp.pprint(client.mirroring_mapping_add(eval(args[0]),eval(args[1]),))

elif cmd == 'mirroring_mapping_delete':
  if len(args) != 1:
    print('mirroring_mapping_delete requires 1 args')
    sys.exit(1)
  pp.pprint(client.mirroring_mapping_delete(eval(args[0]),))

elif cmd == 'mirroring_mapping_get_egress_port':
  if len(args) != 1:
    print('mirroring_mapping_get_egress_port requires 1 args')
    sys.exit(1)
  pp.pprint(client.mirroring_mapping_get_egress_port(eval(args[0]),))

elif cmd == 'set_learning_timeout':
  if len(args) != 3:
    print('set_learning_timeout requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_learning_timeout(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'mac_learn_digest_register':
  if len(args) != 2:
    print('mac_learn_digest_register requires 2 args')
    sys.exit(1)
  pp.pprint(client.mac_learn_digest_register(eval(args[0]),eval(args[1]),))

elif cmd == 'mac_learn_digest_deregister':
  if len(args) != 2:
    print('mac_learn_digest_deregister requires 2 args')
    sys.exit(1)
  pp.pprint(client.mac_learn_digest_deregister(eval(args[0]),eval(args[1]),))

elif cmd == 'mac_learn_digest_get_digest':
  if len(args) != 1:
    print('mac_learn_digest_get_digest requires 1 args')
    sys.exit(1)
  pp.pprint(client.mac_learn_digest_get_digest(eval(args[0]),))

elif cmd == 'mac_learn_digest_digest_notify_ack':
  if len(args) != 2:
    print('mac_learn_digest_digest_notify_ack requires 2 args')
    sys.exit(1)
  pp.pprint(client.mac_learn_digest_digest_notify_ack(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
