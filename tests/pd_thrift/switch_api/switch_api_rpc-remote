#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from switch_api import switch_api_rpc
from switch_api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  switcht_status_t switcht_api_init(switcht_device_t device)')
  print('   switcht_api_drop_stats_get(switcht_device_t device)')
  print('  switcht_status_t switcht_api_port_set(switcht_device_t device, switcht_port_info_t port_info)')
  print('  switcht_status_t switcht_api_port_print_all()')
  print('  switcht_handle_t switcht_api_vrf_create(switcht_device_t device, switcht_vrf_id_t vrf)')
  print('  switcht_status_t switcht_api_vrf_delete(switcht_device_t device, switcht_handle_t vrf_handle)')
  print('  switcht_handle_t switcht_api_router_mac_group_create(switcht_device_t device)')
  print('  switcht_status_t switcht_api_router_mac_group_delete(switcht_device_t device, switcht_handle_t rmac_handle)')
  print('  switcht_status_t switcht_api_router_mac_add(switcht_device_t device, switcht_handle_t rmac_handle, switcht_mac_addr_t mac)')
  print('  switcht_status_t switcht_api_router_mac_delete(switcht_device_t device, switcht_handle_t rmac_handle, switcht_mac_addr_t mac)')
  print('  switcht_status_t switcht_api_router_mac_group_print_all()')
  print('  switcht_interface_handle_t switcht_api_interface_create(switcht_device_t device, switcht_interface_info_t interface_info)')
  print('  switcht_status_t switcht_api_interface_delete(switcht_device_t device, switcht_interface_handle_t interface_handle)')
  print('  switcht_status_t switcht_api_interface_print_all()')
  print('  switcht_status_t switcht_api_interface_attribute_set(switcht_handle_t interface_handle, switcht_intf_attr_t attr_type, i64 value)')
  print('  switcht_status_t switcht_api_interface_ipv4_unicast_enabled_set(switcht_handle_t intf_handle, i64 value)')
  print('  switcht_status_t switcht_api_interface_ipv6_unicast_enabled_set(switcht_handle_t intf_handle, i64 value)')
  print('  switcht_status_t switcht_api_interface_ipv4_urpf_mode_set(switcht_handle_t intf_handle, i64 value)')
  print('  switcht_status_t switcht_api_interface_ipv6_urpf_mode_set(switcht_handle_t intf_handle, i64 value)')
  print('  switcht_status_t switcht_api_l3_interface_address_add(switcht_device_t device, switcht_interface_handle_t interface_handle, switcht_handle_t vrf, switcht_ip_addr_t ip_addr)')
  print('  switcht_status_t switcht_api_l3_interface_address_delete(switcht_device_t device, switcht_interface_handle_t interface_handle, switcht_handle_t vrf, switcht_ip_addr_t ip_addr)')
  print('  switcht_handle_t switcht_api_nhop_create(switcht_device_t device, switcht_nhop_key_t nhop_key)')
  print('  switcht_status_t switcht_api_nhop_delete(switcht_device_t device, switcht_handle_t handle)')
  print('  switcht_status_t switcht_api_nhop_print_all()')
  print('  switcht_handle_t switcht_api_neighbor_entry_add(switcht_device_t device, switcht_neighbor_info_t neighbor)')
  print('  switcht_status_t switcht_api_neighbor_entry_remove(switcht_device_t device, switcht_handle_t neighbor_handle)')
  print('  switcht_status_t switcht_api_neighbor_print_all()')
  print('  switcht_status_t switcht_api_l3_route_add(switcht_device_t device, switcht_handle_t vrf, switcht_ip_addr_t ip_addr, switcht_handle_t nhop_handle)')
  print('  switcht_status_t switcht_api_l3_route_delete(switcht_device_t device, switcht_handle_t vrf, switcht_ip_addr_t ip_addr, switcht_handle_t nhop_handle)')
  print('  switcht_status_t switcht_api_l3_routes_print_all()')
  print('  switcht_handle_t switcht_api_vlan_create(switcht_device_t device, switcht_vlan_t vlan_id)')
  print('  switcht_status_t switcht_api_vlan_delete(switcht_device_t device, switcht_handle_t vlan_handle)')
  print('  switcht_status_t switcht_api_vlan_ports_add(switcht_device_t device, switcht_handle_t vlan_handle, switcht_vlan_port_t port_vlan)')
  print('  switcht_status_t switcht_api_vlan_ports_remove(switcht_device_t device, switcht_handle_t vlan_handle, switcht_vlan_port_t port_vlan)')
  print('  switcht_status_t switcht_api_vlan_print_all()')
  print('  switcht_status_t switcht_api_vlan_learning_enabled_set(switcht_handle_t vlan_handle, i64 value)')
  print('  switcht_status_t switcht_api_vlan_learning_enabled_get(switcht_handle_t vlan_handle, i64 value)')
  print('  switcht_status_t switcht_api_vlan_aging_interval_set(switcht_handle_t vlan_handle, i64 value)')
  print('  switcht_status_t switcht_api_vlan_stats_enable(switcht_device_t device, switcht_handle_t vlan_handle)')
  print('  switcht_status_t switcht_api_vlan_stats_disable(switcht_device_t device, switcht_handle_t vlan_handle)')
  print('   switcht_api_vlan_stats_get(switcht_handle_t vlan_handle,  counter_ids)')
  print('  switcht_status_t switcht_api_mac_table_entry_create(switcht_device_t device, switcht_handle_t vlan_handle, switcht_mac_addr_t mac, byte entry_type, switcht_handle_t handle)')
  print('  switcht_status_t switcht_api_mac_table_entry_update(switcht_device_t device, switcht_handle_t vlan_handle, switcht_mac_addr_t mac, byte entry_type, switcht_handle_t handle)')
  print('  switcht_status_t switcht_api_mac_table_entry_delete(switcht_device_t device, switcht_handle_t vlan_handle, switcht_mac_addr_t mac)')
  print('  switcht_status_t switcht_api_mac_table_entries_delete_by_vlan(switcht_device_t device, switcht_handle_t vlan_handle)')
  print('  switcht_status_t switcht_api_mac_table_entries_delete_by_interface(switcht_device_t device, switcht_handle_t intf_handle)')
  print('  switcht_status_t switcht_api_mac_table_entries_delete_all(switcht_device_t device)')
  print('  switcht_status_t switcht_api_mac_table_set_learning_timeout(switcht_device_t device, i32 timeout)')
  print('  switcht_status_t switcht_api_mac_table_aging_time_set(i64 value)')
  print('  switcht_status_t switcht_api_mac_table_print_all()')
  print('  switcht_handle_t switcht_api_l3_ecmp_create(switcht_device_t device)')
  print('  switcht_status_t switcht_api_l3_ecmp_delete(switcht_device_t device, switcht_handle_t handle)')
  print('  switcht_status_t switcht_api_l3_ecmp_member_add(switcht_device_t device, switcht_handle_t handle, i16 nhop_count,  nhop_handle)')
  print('  switcht_status_t switcht_api_l3_ecmp_member_delete(switcht_device_t device, switcht_handle_t handle, i16 nhop_count,  nhop_handle)')
  print('  switcht_handle_t switcht_api_lag_create(switcht_device_t device)')
  print('  switcht_status_t switcht_api_lag_delete(switcht_device_t device, switcht_handle_t lag_handle)')
  print('  switcht_status_t switcht_api_lag_member_add(switcht_device_t device, switcht_handle_t lag_handle, switcht_direction_t side, switcht_port_t port)')
  print('  switcht_status_t switcht_api_lag_member_delete(switcht_device_t device, switcht_handle_t lag_handle, switcht_direction_t side, switcht_port_t port)')
  print('  switcht_status_t switcht_api_lag_print_all()')
  print('  switcht_handle_t switcht_api_logical_network_create(switcht_device_t device, switcht_logical_network_t info)')
  print('  switcht_status_t switcht_api_logical_network_delete(switcht_device_t device, switcht_handle_t network_handle)')
  print('  switcht_tunnel_handle_t switcht_api_tunnel_interface_create(switcht_device_t device, switcht_direction_t direction, switcht_tunnel_info_t tun_info)')
  print('  switcht_status_t switcht_api_tunnel_interface_delete(switcht_device_t device, switcht_tunnel_handle_t tun_handle)')
  print('  switcht_status_t switcht_api_logical_network_member_add(switcht_device_t device, switcht_handle_t network_handle, switcht_interface_handle_t interface_handle)')
  print('  switcht_status_t switcht_api_logical_network_member_remove(switcht_device_t device, switcht_handle_t network_handle, switcht_interface_handle_t interface_handle)')
  print('  switcht_status_t switcht_api_mpls_tunnel_transit_create(switcht_device_t device, switcht_mpls_encap_t mpls_encap)')
  print('  switcht_status_t switcht_api_mpls_tunnel_transit_delete(switcht_device_t device, switcht_mpls_encap_t mpls_encap)')
  print('  switcht_handle_t switcht_api_stp_group_create(switcht_device_t device, switcht_stp_mode_t stp_mode)')
  print('  switcht_status_t switcht_api_stp_group_delete(switcht_device_t device, switcht_handle_t stp_handle)')
  print('  switcht_status_t switcht_api_stp_group_vlans_add(switcht_device_t device, switcht_handle_t stp_handle, i16 vlan_count,  vlan_handle)')
  print('  switcht_status_t switcht_api_stp_group_vlans_remove(switcht_device_t device, switcht_handle_t stp_handle, i16 vlan_count,  vlan_handle)')
  print('  switcht_status_t switcht_api_stp_port_state_set(switcht_device_t device, switcht_handle_t stp_handle, switcht_handle_t intf_handle, switcht_stp_state_t stp_state)')
  print('  switcht_status_t switcht_api_stp_port_state_clear(switcht_device_t device, switcht_handle_t stp_handle, switcht_handle_t intf_handle)')
  print('  switcht_status_t switcht_api_stp_group_print_all()')
  print('  switcht_handle_t switcht_api_acl_list_create(switcht_device_t device, switcht_acl_type_t type)')
  print('  switcht_status_t switcht_api_acl_list_delete(switcht_device_t device, switcht_handle_t handle)')
  print('  switcht_handle_t switcht_api_acl_ip_rule_create(switcht_device_t device, switcht_handle_t acl_handle, i32 priority, i32 key_value_count,  acl_kvp, switcht_acl_action_t action, switcht_acl_action_params_t action_params)')
  print('  switcht_handle_t switcht_api_acl_mirror_rule_create(switcht_device_t device, switcht_handle_t acl_handle, i32 priority, i32 key_value_count,  acl_kvp, switcht_acl_action_t action, switcht_acl_action_params_t action_params)')
  print('  switcht_handle_t switcht_api_acl_system_rule_create(switcht_device_t device, switcht_handle_t acl_handle, i32 priority, i32 key_value_count,  acl_kvp, switcht_acl_action_t action, switcht_acl_action_params_t action_params)')
  print('  switcht_handle_t switcht_api_acl_egr_rule_create(switcht_device_t device, switcht_handle_t acl_handle, i32 priority, i32 key_value_count,  acl_kvp, switcht_acl_action_t action, switcht_acl_action_params_t action_params)')
  print('  switcht_status_t switcht_api_acl_rule_delete(switcht_device_t device, switcht_handle_t acl_handle, switcht_handle_t handle)')
  print('  switcht_status_t switcht_api_acl_reference(switcht_device_t device, switcht_handle_t acl_handle, switcht_handle_t interface_handle)')
  print('  switcht_status_t switcht_api_acl_remove(switcht_device_t device, switcht_handle_t acl_handle, switcht_handle_t interface_handle)')
  print('  switcht_handle_t switcht_api_hostif_group_create(switcht_device_t device, switcht_hostif_group_t hostif_group)')
  print('  switcht_status_t switcht_api_hostif_group_delete(switcht_device_t device, switcht_handle_t hostif_group_handle)')
  print('  switcht_status_t switcht_api_hostif_reason_code_create(switcht_device_t device, switcht_api_hostif_rcode_info_t rcode_api_info)')
  print('  switcht_status_t switcht_api_hostif_reason_code_delete(switcht_device_t device, switcht_hostif_reason_code_t reason_code)')
  print('  switcht_handle_t switcht_api_hostif_create(switcht_device_t device, switcht_hostif_t hostif)')
  print('  switcht_status_t switcht_api_hostif_delete(switcht_device_t device, switcht_handle_t hostif_handle)')
  print('  switcht_handle_t switcht_api_mirror_session_create(switcht_device_t device, switcht_mirror_info_t api_mirror_info)')
  print('  switcht_status_t switcht_api_mirror_session_update(switcht_device_t device, switcht_handle_t mirror_handle, switcht_mirror_info_t api_mirror_info)')
  print('  switcht_status_t switcht_api_mirror_session_delete(switcht_device_t device, switcht_handle_t mirror_handle)')
  print('  switcht_status_t switcht_int_transit_enable(switcht_device_t device, i32 switch_id, i32 enable)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = switch_api_rpc.Client(protocol)
transport.open()

if cmd == 'switcht_api_init':
  if len(args) != 1:
    print('switcht_api_init requires 1 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_init(eval(args[0]),))

elif cmd == 'switcht_api_drop_stats_get':
  if len(args) != 1:
    print('switcht_api_drop_stats_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_drop_stats_get(eval(args[0]),))

elif cmd == 'switcht_api_port_set':
  if len(args) != 2:
    print('switcht_api_port_set requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_port_set(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_port_print_all':
  if len(args) != 0:
    print('switcht_api_port_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_port_print_all())

elif cmd == 'switcht_api_vrf_create':
  if len(args) != 2:
    print('switcht_api_vrf_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vrf_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_vrf_delete':
  if len(args) != 2:
    print('switcht_api_vrf_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vrf_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_router_mac_group_create':
  if len(args) != 1:
    print('switcht_api_router_mac_group_create requires 1 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_router_mac_group_create(eval(args[0]),))

elif cmd == 'switcht_api_router_mac_group_delete':
  if len(args) != 2:
    print('switcht_api_router_mac_group_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_router_mac_group_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_router_mac_add':
  if len(args) != 3:
    print('switcht_api_router_mac_add requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_router_mac_add(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_router_mac_delete':
  if len(args) != 3:
    print('switcht_api_router_mac_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_router_mac_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_router_mac_group_print_all':
  if len(args) != 0:
    print('switcht_api_router_mac_group_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_router_mac_group_print_all())

elif cmd == 'switcht_api_interface_create':
  if len(args) != 2:
    print('switcht_api_interface_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_interface_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_interface_delete':
  if len(args) != 2:
    print('switcht_api_interface_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_interface_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_interface_print_all':
  if len(args) != 0:
    print('switcht_api_interface_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_interface_print_all())

elif cmd == 'switcht_api_interface_attribute_set':
  if len(args) != 3:
    print('switcht_api_interface_attribute_set requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_interface_attribute_set(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_interface_ipv4_unicast_enabled_set':
  if len(args) != 2:
    print('switcht_api_interface_ipv4_unicast_enabled_set requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_interface_ipv4_unicast_enabled_set(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_interface_ipv6_unicast_enabled_set':
  if len(args) != 2:
    print('switcht_api_interface_ipv6_unicast_enabled_set requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_interface_ipv6_unicast_enabled_set(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_interface_ipv4_urpf_mode_set':
  if len(args) != 2:
    print('switcht_api_interface_ipv4_urpf_mode_set requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_interface_ipv4_urpf_mode_set(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_interface_ipv6_urpf_mode_set':
  if len(args) != 2:
    print('switcht_api_interface_ipv6_urpf_mode_set requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_interface_ipv6_urpf_mode_set(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_l3_interface_address_add':
  if len(args) != 4:
    print('switcht_api_l3_interface_address_add requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_interface_address_add(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_l3_interface_address_delete':
  if len(args) != 4:
    print('switcht_api_l3_interface_address_delete requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_interface_address_delete(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_nhop_create':
  if len(args) != 2:
    print('switcht_api_nhop_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_nhop_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_nhop_delete':
  if len(args) != 2:
    print('switcht_api_nhop_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_nhop_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_nhop_print_all':
  if len(args) != 0:
    print('switcht_api_nhop_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_nhop_print_all())

elif cmd == 'switcht_api_neighbor_entry_add':
  if len(args) != 2:
    print('switcht_api_neighbor_entry_add requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_neighbor_entry_add(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_neighbor_entry_remove':
  if len(args) != 2:
    print('switcht_api_neighbor_entry_remove requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_neighbor_entry_remove(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_neighbor_print_all':
  if len(args) != 0:
    print('switcht_api_neighbor_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_neighbor_print_all())

elif cmd == 'switcht_api_l3_route_add':
  if len(args) != 4:
    print('switcht_api_l3_route_add requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_route_add(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_l3_route_delete':
  if len(args) != 4:
    print('switcht_api_l3_route_delete requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_route_delete(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_l3_routes_print_all':
  if len(args) != 0:
    print('switcht_api_l3_routes_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_routes_print_all())

elif cmd == 'switcht_api_vlan_create':
  if len(args) != 2:
    print('switcht_api_vlan_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_vlan_delete':
  if len(args) != 2:
    print('switcht_api_vlan_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_vlan_ports_add':
  if len(args) != 3:
    print('switcht_api_vlan_ports_add requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_ports_add(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_vlan_ports_remove':
  if len(args) != 3:
    print('switcht_api_vlan_ports_remove requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_ports_remove(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_vlan_print_all':
  if len(args) != 0:
    print('switcht_api_vlan_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_print_all())

elif cmd == 'switcht_api_vlan_learning_enabled_set':
  if len(args) != 2:
    print('switcht_api_vlan_learning_enabled_set requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_learning_enabled_set(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_vlan_learning_enabled_get':
  if len(args) != 2:
    print('switcht_api_vlan_learning_enabled_get requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_learning_enabled_get(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_vlan_aging_interval_set':
  if len(args) != 2:
    print('switcht_api_vlan_aging_interval_set requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_aging_interval_set(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_vlan_stats_enable':
  if len(args) != 2:
    print('switcht_api_vlan_stats_enable requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_stats_enable(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_vlan_stats_disable':
  if len(args) != 2:
    print('switcht_api_vlan_stats_disable requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_stats_disable(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_vlan_stats_get':
  if len(args) != 2:
    print('switcht_api_vlan_stats_get requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_vlan_stats_get(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_mac_table_entry_create':
  if len(args) != 5:
    print('switcht_api_mac_table_entry_create requires 5 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_entry_create(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'switcht_api_mac_table_entry_update':
  if len(args) != 5:
    print('switcht_api_mac_table_entry_update requires 5 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_entry_update(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'switcht_api_mac_table_entry_delete':
  if len(args) != 3:
    print('switcht_api_mac_table_entry_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_entry_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_mac_table_entries_delete_by_vlan':
  if len(args) != 2:
    print('switcht_api_mac_table_entries_delete_by_vlan requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_entries_delete_by_vlan(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_mac_table_entries_delete_by_interface':
  if len(args) != 2:
    print('switcht_api_mac_table_entries_delete_by_interface requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_entries_delete_by_interface(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_mac_table_entries_delete_all':
  if len(args) != 1:
    print('switcht_api_mac_table_entries_delete_all requires 1 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_entries_delete_all(eval(args[0]),))

elif cmd == 'switcht_api_mac_table_set_learning_timeout':
  if len(args) != 2:
    print('switcht_api_mac_table_set_learning_timeout requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_set_learning_timeout(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_mac_table_aging_time_set':
  if len(args) != 1:
    print('switcht_api_mac_table_aging_time_set requires 1 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_aging_time_set(eval(args[0]),))

elif cmd == 'switcht_api_mac_table_print_all':
  if len(args) != 0:
    print('switcht_api_mac_table_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mac_table_print_all())

elif cmd == 'switcht_api_l3_ecmp_create':
  if len(args) != 1:
    print('switcht_api_l3_ecmp_create requires 1 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_ecmp_create(eval(args[0]),))

elif cmd == 'switcht_api_l3_ecmp_delete':
  if len(args) != 2:
    print('switcht_api_l3_ecmp_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_ecmp_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_l3_ecmp_member_add':
  if len(args) != 4:
    print('switcht_api_l3_ecmp_member_add requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_ecmp_member_add(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_l3_ecmp_member_delete':
  if len(args) != 4:
    print('switcht_api_l3_ecmp_member_delete requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_l3_ecmp_member_delete(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_lag_create':
  if len(args) != 1:
    print('switcht_api_lag_create requires 1 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_lag_create(eval(args[0]),))

elif cmd == 'switcht_api_lag_delete':
  if len(args) != 2:
    print('switcht_api_lag_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_lag_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_lag_member_add':
  if len(args) != 4:
    print('switcht_api_lag_member_add requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_lag_member_add(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_lag_member_delete':
  if len(args) != 4:
    print('switcht_api_lag_member_delete requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_lag_member_delete(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_lag_print_all':
  if len(args) != 0:
    print('switcht_api_lag_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_lag_print_all())

elif cmd == 'switcht_api_logical_network_create':
  if len(args) != 2:
    print('switcht_api_logical_network_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_logical_network_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_logical_network_delete':
  if len(args) != 2:
    print('switcht_api_logical_network_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_logical_network_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_tunnel_interface_create':
  if len(args) != 3:
    print('switcht_api_tunnel_interface_create requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_tunnel_interface_create(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_tunnel_interface_delete':
  if len(args) != 2:
    print('switcht_api_tunnel_interface_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_tunnel_interface_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_logical_network_member_add':
  if len(args) != 3:
    print('switcht_api_logical_network_member_add requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_logical_network_member_add(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_logical_network_member_remove':
  if len(args) != 3:
    print('switcht_api_logical_network_member_remove requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_logical_network_member_remove(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_mpls_tunnel_transit_create':
  if len(args) != 2:
    print('switcht_api_mpls_tunnel_transit_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mpls_tunnel_transit_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_mpls_tunnel_transit_delete':
  if len(args) != 2:
    print('switcht_api_mpls_tunnel_transit_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mpls_tunnel_transit_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_stp_group_create':
  if len(args) != 2:
    print('switcht_api_stp_group_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_stp_group_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_stp_group_delete':
  if len(args) != 2:
    print('switcht_api_stp_group_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_stp_group_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_stp_group_vlans_add':
  if len(args) != 4:
    print('switcht_api_stp_group_vlans_add requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_stp_group_vlans_add(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_stp_group_vlans_remove':
  if len(args) != 4:
    print('switcht_api_stp_group_vlans_remove requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_stp_group_vlans_remove(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_stp_port_state_set':
  if len(args) != 4:
    print('switcht_api_stp_port_state_set requires 4 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_stp_port_state_set(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'switcht_api_stp_port_state_clear':
  if len(args) != 3:
    print('switcht_api_stp_port_state_clear requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_stp_port_state_clear(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_stp_group_print_all':
  if len(args) != 0:
    print('switcht_api_stp_group_print_all requires 0 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_stp_group_print_all())

elif cmd == 'switcht_api_acl_list_create':
  if len(args) != 2:
    print('switcht_api_acl_list_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_list_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_acl_list_delete':
  if len(args) != 2:
    print('switcht_api_acl_list_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_list_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_acl_ip_rule_create':
  if len(args) != 7:
    print('switcht_api_acl_ip_rule_create requires 7 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_ip_rule_create(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'switcht_api_acl_mirror_rule_create':
  if len(args) != 7:
    print('switcht_api_acl_mirror_rule_create requires 7 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_mirror_rule_create(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'switcht_api_acl_system_rule_create':
  if len(args) != 7:
    print('switcht_api_acl_system_rule_create requires 7 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_system_rule_create(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'switcht_api_acl_egr_rule_create':
  if len(args) != 7:
    print('switcht_api_acl_egr_rule_create requires 7 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_egr_rule_create(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'switcht_api_acl_rule_delete':
  if len(args) != 3:
    print('switcht_api_acl_rule_delete requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_rule_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_acl_reference':
  if len(args) != 3:
    print('switcht_api_acl_reference requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_reference(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_acl_remove':
  if len(args) != 3:
    print('switcht_api_acl_remove requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_acl_remove(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_hostif_group_create':
  if len(args) != 2:
    print('switcht_api_hostif_group_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_hostif_group_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_hostif_group_delete':
  if len(args) != 2:
    print('switcht_api_hostif_group_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_hostif_group_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_hostif_reason_code_create':
  if len(args) != 2:
    print('switcht_api_hostif_reason_code_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_hostif_reason_code_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_hostif_reason_code_delete':
  if len(args) != 2:
    print('switcht_api_hostif_reason_code_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_hostif_reason_code_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_hostif_create':
  if len(args) != 2:
    print('switcht_api_hostif_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_hostif_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_hostif_delete':
  if len(args) != 2:
    print('switcht_api_hostif_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_hostif_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_mirror_session_create':
  if len(args) != 2:
    print('switcht_api_mirror_session_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mirror_session_create(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_api_mirror_session_update':
  if len(args) != 3:
    print('switcht_api_mirror_session_update requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mirror_session_update(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'switcht_api_mirror_session_delete':
  if len(args) != 2:
    print('switcht_api_mirror_session_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.switcht_api_mirror_session_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'switcht_int_transit_enable':
  if len(args) != 3:
    print('switcht_int_transit_enable requires 3 args')
    sys.exit(1)
  pp.pprint(client.switcht_int_transit_enable(eval(args[0]),eval(args[1]),eval(args[2]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
